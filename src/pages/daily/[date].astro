---
import StorySection from '../../components/StorySection.astro';
import '../../styles/global.css';
import { env } from '@config/env';
import { formatDateHuman } from '@utils/date';
import { readFileSync, existsSync } from 'node:fs';

type AggregatedItem = {
  id: number;
  title: string;
  url: string | null;
  by: string;
  timeISO: string;
  postSummary?: string;
  commentsSummary?: string;
  score?: number;
  commentsCount?: number;
  hnUrl?: string;
  domain?: string;
};

type AggregatedFile = {
  updatedISO: string;
  items: AggregatedItem[];
};

function toDateKeyUTC(iso: string): string {
  // Use UTC date key to avoid timezone ambiguity
  return typeof iso === 'string' && iso.length >= 10 ? iso.slice(0, 10) : '0000-00-00';
}

export async function getStaticPaths() {
  function toDateKeyUTC(iso: string): string {
    return typeof iso === 'string' && iso.length >= 10 ? iso.slice(0, 10) : '0000-00-00';
  }

  const dataPath = new URL('../../../data/aggregated.json', import.meta.url).pathname;
  const data: AggregatedFile = existsSync(dataPath)
    ? JSON.parse(readFileSync(dataPath, 'utf8'))
    : { items: [], updatedISO: '—' };
  const items = Array.isArray((data as any).items) ? (data as any).items as AggregatedItem[] : [];
  const keys = Array.from(new Set(items.map((it) => toDateKeyUTC(it.timeISO))));
  keys.sort((a, b) => (a < b ? 1 : a > b ? -1 : 0));
  return keys.map((key) => ({ params: { date: key } }));
}

const lang = env.SUMMARY_LANG;
const dateParam = Astro.params.date ?? '';
const dateKey = typeof dateParam === 'string' ? dateParam : '';

const dataPath = new URL('../../../data/aggregated.json', import.meta.url).pathname;
const data: AggregatedFile = existsSync(dataPath)
  ? JSON.parse(readFileSync(dataPath, 'utf8'))
  : { items: [], updatedISO: '—' };

const allItems: AggregatedItem[] = Array.isArray((data as any).items) ? (data as any).items as AggregatedItem[] : [];
const dayItems = allItems.filter((it) => toDateKeyUTC(it.timeISO) === dateKey);

// Format date for display
const displayDate = dateKey ? formatDateHuman(`${dateKey}T12:00:00Z`) : dateKey;

const i18n = {
  ru: {
    title: 'За сутки',
    noData: 'Нет данных для выбранной даты.',
    posts: 'Постов',
  },
  en: {
    title: 'Daily',
    noData: 'No data for the selected date.',
    posts: 'Posts',
  },
} as const;
const t = i18n[lang as 'ru' | 'en'];
const pageTitle = `${t.title}: ${displayDate} — Hacker News Digest`;
const description = `Hacker News Digest for ${displayDate}. ${dayItems.length} ${t.posts}.`;
---
<html lang={lang}>
  <head>
    <meta charset="utf-8" />
    <title>{pageTitle}</title>
    <meta name="description" content={description} />
    <meta name="robots" content="index,follow" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:site_name" content="Hacker News Digest" />
    <meta property="og:type" content="website" />
  </head>
  <body>
    <header>
      <h1><a href="/">Hacker News Digest</a></h1>
      <p class="meta">{t.title}: {displayDate}</p>
      <p class="meta">Постов: {dayItems.length}</p>
    </header>
    <main>
      {dayItems.length === 0 ? (
        <p class="meta">{t.noData}</p>
      ) : (
        dayItems.map((it) => <StorySection item={it} />)
      )}
    </main>
  </body>
  </html>


