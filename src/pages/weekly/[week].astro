---
import StorySection from '../../components/StorySection.astro';
import '../../styles/global.css';
import { env } from '@config/env';
import { readFileSync, existsSync } from 'node:fs';

type AggregatedItem = {
  id: number;
  title: string;
  url: string | null;
  by: string;
  timeISO: string;
  postSummary?: string;
  commentsSummary?: string;
  score?: number;
  commentsCount?: number;
  hnUrl?: string;
  domain?: string;
};

type AggregatedFile = {
  updatedISO: string;
  items: AggregatedItem[];
};

function toWeekKeyUTC(iso: string): string {
  const date = new Date(iso);
  if (isNaN(date.getTime())) return '0000-w00';

  // Simple week calculation using Monday as start of week
  const dayOfYear = Math.floor((date.getTime() - new Date(date.getFullYear(), 0, 1).getTime()) / 86400000);
  const week = Math.ceil((dayOfYear + 1) / 7);
  const w = String(week).padStart(2, '0');
  return `${date.getFullYear()}-w${w}`;
}

export async function getStaticPaths() {
  function toWeekKeyUTC(iso: string): string {
    const date = new Date(iso);
    if (isNaN(date.getTime())) return '0000-w00';

    // Simple week calculation using Monday as start of week
    const dayOfYear = Math.floor((date.getTime() - new Date(date.getFullYear(), 0, 1).getTime()) / 86400000);
    const week = Math.ceil((dayOfYear + 1) / 7);
    const w = String(week).padStart(2, '0');
    return `${date.getFullYear()}-w${w}`;
  }

  const dataPath = new URL('../../../data/aggregated.json', import.meta.url).pathname;
  const data: AggregatedFile = existsSync(dataPath)
    ? JSON.parse(readFileSync(dataPath, 'utf8'))
    : { items: [], updatedISO: '—' };
  const items = Array.isArray((data as any).items) ? (data as any).items as AggregatedItem[] : [];
  const keys = Array.from(new Set(items.map((it) => toWeekKeyUTC(it.timeISO))));
  keys.sort((a, b) => (a < b ? 1 : a > b ? -1 : 0));
  return keys.map((key) => ({ params: { week: key } }));
}

const lang = env.SUMMARY_LANG;
const weekParam = Astro.params.week ?? '';
const weekKey = typeof weekParam === 'string' ? weekParam : '';

const dataPath = new URL('../../../data/aggregated.json', import.meta.url).pathname;
const data: AggregatedFile = existsSync(dataPath)
  ? JSON.parse(readFileSync(dataPath, 'utf8'))
  : { items: [], updatedISO: '—' };

const allItems: AggregatedItem[] = Array.isArray((data as any).items) ? (data as any).items as AggregatedItem[] : [];
const weekItems = allItems.filter((it) => toWeekKeyUTC(it.timeISO) === weekKey);

// Format week for display
const displayWeek = weekKey ? `Неделя ${weekKey.split('-w')[1]}, ${weekKey.split('-w')[0]}` : weekKey;

const t = {
  title: 'По неделям',
  noData: 'Нет данных для выбранной недели.',
};
const pageTitle = `${t.title}: ${displayWeek} — Hacker News Digest`;
const description = `Weekly Hacker News Digest for ${displayWeek}. ${weekItems.length} posts.`;
---
<html lang={lang}>
  <head>
    <meta charset="utf-8" />
    <title>{pageTitle}</title>
    <meta name="description" content={description} />
    <meta name="robots" content="index,follow" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:site_name" content="Hacker News Digest" />
    <meta property="og:type" content="website" />
  </head>
  <body>
    <header>
      <h1><a href="/">Hacker News Digest</a></h1>
      <p class="meta">{t.title}: {displayWeek}</p>
      <p class="meta">Posts: {weekItems.length}</p>
    </header>
    <main>
      {weekItems.length === 0 ? (
        <p class="meta">{t.noData}</p>
      ) : (
        weekItems.map((it) => <StorySection item={it} />)
      )}
    </main>
  </body>
  </html>
