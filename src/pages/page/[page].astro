---
import StorySection from '../../components/StorySection.astro';
import '../../styles/global.css';
import { LANG } from '@config/lang';
import { PATHS } from '@config/paths';
import { formatDateHuman } from '@utils/date';
import type { AggregatedItem } from '@config/schemas';
import { loadAggregated } from '@utils/load-aggregated';

export const PAGE_SIZE = 10;

export async function getStaticPaths() {
  const { items } = loadAggregated(PATHS.aggregated);
  const totalPages = Math.max(1, Math.ceil(items.length / PAGE_SIZE));
  return Array.from({ length: totalPages }, (_, i) => ({ params: { page: String(i + 1) } }));
}

const lang = LANG;
const { items: allItems, updatedISO } = loadAggregated(PATHS.aggregated);
const updatedPretty = formatDateHuman(updatedISO);

const totalPages = Math.max(1, Math.ceil(allItems.length / PAGE_SIZE));
const pStr = Astro.params.page ?? '1';
const pNum = Number.parseInt(pStr, 10);
const currentPage = Number.isFinite(pNum) && pNum > 0 ? Math.min(pNum, totalPages) : 1;

const start = (currentPage - 1) * PAGE_SIZE;
const pageItems = allItems.slice(start, start + PAGE_SIZE);

function pageHref(n: number): string {
  const u = new URL(`page/${n}/`, Astro.site ?? 'http://localhost/');
  const path = u.pathname;
  return path.endsWith('/') ? path : `${path}/`;
}

const i18n = {
  ru: {
    updated: '–û–±–Ω–æ–≤–ª–µ–Ω–æ',
    stories: '–ü–æ—Å—Ç–æ–≤',
    noData: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
    page: '–°—Ç—Ä–∞–Ω–∏—Ü–∞',
    prev: '¬´ –ù–∞–∑–∞–¥',
    next: '–í–ø–µ—Ä—ë–¥ ¬ª',
  },
  en: {
    updated: 'Updated',
    stories: 'Stories',
    noData: 'No data to display. Please try again later.',
    page: 'Page',
    prev: '¬´ Prev',
    next: 'Next ¬ª',
  }
};
const t = i18n[lang];
const pageTitle = `Hacker News Digest ‚Äî ${t.page} ${currentPage}/${totalPages}`;
const description = `${t.page} ${currentPage}/${totalPages} of Hacker News Digest. ${t.updated}: ${updatedPretty}.`;
---
<html lang={lang}>
  <head>
    <meta charset="utf-8" />
    <title>{pageTitle}</title>
    <meta name="description" content={description} />
    <meta name="robots" content="index,follow" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:site_name" content="Hacker News Digest" />
    <meta property="og:type" content="website" />
    <meta name="color-scheme" content="light dark" />
    <meta name="theme-color" media="(prefers-color-scheme: light)" content="#ffffff" />
    <meta name="theme-color" media="(prefers-color-scheme: dark)" content="#0b1220" />
  </head>
  <body>
    <header>
      <div class="header-top">
        <h1><a href="/">Hacker News Digest</a></h1>
        <button id="theme-toggle" aria-label="Toggle theme">üåì</button>
      </div>
      <p class="meta">{t.updated}: {updatedPretty}</p>
      <p class="meta">{t.stories}: {allItems.length} ‚Ä¢ {t.page} {currentPage}/{totalPages}</p>
    </header>
    <main>
      {allItems.length === 0 ? (
        <p class="meta">{t.noData}</p>
      ) : (
        pageItems.map((it: AggregatedItem) => <StorySection item={it} />)
      )}
      {allItems.length > 0 && (
        <nav class="pagination" aria-label="Pagination">
          {currentPage > 1 ? <a href={pageHref(currentPage - 1)} rel="prev">{t.prev}</a> : <span></span>}
          <span>{t.page} {currentPage} / {totalPages}</span>
          {currentPage < totalPages ? <a href={pageHref(currentPage + 1)} rel="next">{t.next}</a> : <span></span>}
        </nav>
      )}
    </main>
    <script>
      const root = document.documentElement;
      const btn = document.getElementById('theme-toggle');
      if (localStorage.getItem('theme') === 'dark') {
        root.setAttribute('data-theme', 'dark');
      }
      btn?.addEventListener('click', () => {
        const isDark = root.getAttribute('data-theme') === 'dark';
        if (isDark) {
          root.removeAttribute('data-theme');
          localStorage.setItem('theme', 'light');
        } else {
          root.setAttribute('data-theme', 'dark');
          localStorage.setItem('theme', 'dark');
        }
      });
    </script>

    <script>
      (function () {
        const cards = Array.from(document.querySelectorAll("section.js-card"));
        if (cards.length === 0) return;

        let i = 0; // current index
        const select = (next) => {
          cards[i]?.classList.remove("selected");
          i = Math.max(0, Math.min(next, cards.length - 1));
          const el = cards[i];
          if (!el) return;
          el.classList.add("selected");
          try { el.focus({ preventScroll: true }); } catch {}
          el.scrollIntoView({ block: "nearest" });
        };

        // Initialize on first card for predictability
        select(0);

        const isTypingField = (t) =>
          t && (t.tagName === "INPUT" || t.tagName === "TEXTAREA" || t.isContentEditable);

        const openOriginal = () => {
          const el = cards[i];
          const href = el?.dataset?.original;
          if (href) window.open(href, "_blank", "noopener,noreferrer");
        };

        const goPrevPage = () => {
          const a = document.querySelector('nav.pagination a[rel="prev"]');
          if (a) window.location.assign(a.getAttribute("href"));
        };

        const goNextPage = () => {
          const a =
            document.querySelector('nav.pagination a[rel="next"]') ||
            document.querySelector('nav.pagination a[href]');
          if (a) window.location.assign(a.getAttribute("href"));
        };

        window.addEventListener("keydown", (e) => {
          if (e.altKey || e.metaKey || e.ctrlKey) return;
          if (isTypingField(e.target)) return;

          switch (e.key) {
            case "j":
              e.preventDefault();
              select(i + 1);
              break;
            case "k":
              e.preventDefault();
              select(i - 1);
              break;
            case "o":
              e.preventDefault();
              openOriginal();
              break;
            case "h":
              e.preventDefault();
              goPrevPage();
              break;
            case "l":
              e.preventDefault();
              goNextPage();
              break;
          }
        }, { passive: false });
      })();
    </script>
  </body>
</html>
