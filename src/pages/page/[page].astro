---
import StorySection from '../../components/StorySection.astro';
import '../../styles/global.css';
import { env } from '@config/env';
import { formatDateHuman } from '@utils/date';
import { readFileSync, existsSync } from 'node:fs';
import type { AggregatedItem } from '@config/schemas';

export const PAGE_SIZE = 10;

export async function getStaticPaths() {
  const dataPath = new URL('../../../data/aggregated.json', import.meta.url).pathname;
  const data = existsSync(dataPath) ? JSON.parse(readFileSync(dataPath, 'utf8')) : { items: [], updatedISO: '—' };
  const items = Array.isArray((data as any).items) ? (data as any).items : [];
  const totalPages = Math.max(1, Math.ceil(items.length / PAGE_SIZE));
  return Array.from({ length: totalPages }, (_, i) => ({ params: { page: String(i + 1) } }));
}

const lang = env.SUMMARY_LANG;
const dataPath = new URL('../../../data/aggregated.json', import.meta.url).pathname;
const data = existsSync(dataPath) ? JSON.parse(readFileSync(dataPath, 'utf8')) : { items: [], updatedISO: '—' };

const allItems = Array.isArray((data as any).items) ? (data as any).items : [];
const updatedISO = typeof (data as any).updatedISO === 'string' ? (data as any).updatedISO : '—';
const updatedPretty = formatDateHuman(updatedISO);

const totalPages = Math.max(1, Math.ceil(allItems.length / PAGE_SIZE));
const pStr = Astro.params.page ?? '1';
const pNum = Number.parseInt(pStr, 10);
const currentPage = Number.isFinite(pNum) && pNum > 0 ? Math.min(pNum, totalPages) : 1;

const start = (currentPage - 1) * PAGE_SIZE;
const pageItems = allItems.slice(start, start + PAGE_SIZE);

function pageHref(n: number): string {
  const u = new URL(`page/${n}/`, Astro.site ?? 'http://localhost/');
  const path = u.pathname;
  return path.endsWith('/') ? path : `${path}/`;
}

const i18n = {
  ru: {
    updated: 'Обновлено',
    stories: 'Постов',
    noData: 'Нет данных для отображения. Попробуйте позже.',
    page: 'Страница',
    prev: '« Назад',
    next: 'Вперёд »',
  },
  en: {
    updated: 'Updated',
    stories: 'Stories',
    noData: 'No data to display. Please try again later.',
    page: 'Page',
    prev: '« Prev',
    next: 'Next »',
  }
};
const t = i18n[lang];
---
<html lang={lang}>
  <head>
    <meta charset="utf-8" />
    <title>Hacker News Digest — {t.page} {currentPage}/{totalPages}</title>
    <meta name="robots" content="index,follow" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="color-scheme" content="light dark" />
    <meta name="theme-color" media="(prefers-color-scheme: light)" content="#ffffff" />
    <meta name="theme-color" media="(prefers-color-scheme: dark)" content="#0b1220" />
  </head>
  <body>
    <header>
      <h1><a href="/">Hacker News Digest</a></h1>
      <p class="meta">{t.updated}: {updatedPretty}</p>
      <p class="meta">{t.stories}: {allItems.length} • {t.page} {currentPage}/{totalPages}</p>
    </header>
    <main>
      {allItems.length === 0 ? (
        <p class="meta">{t.noData}</p>
      ) : (
        pageItems.map((it: AggregatedItem) => <StorySection item={it} />)
      )}
      {allItems.length > 0 && (
        <nav class="pagination" aria-label="Pagination">
          {currentPage > 1 ? <a href={pageHref(currentPage - 1)} rel="prev">{t.prev}</a> : <span></span>}
          <span>{t.page} {currentPage} / {totalPages}</span>
          {currentPage < totalPages ? <a href={pageHref(currentPage + 1)} rel="next">{t.next}</a> : <span></span>}
        </nav>
      )}
    </main>
  </body>
</html>