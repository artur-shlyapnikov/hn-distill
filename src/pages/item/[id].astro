---
// src/pages/item/[id].astro
import { env } from "@config/env";
import type { AggregatedItem } from "@config/schemas";
import { formatDateHuman } from "@utils/date";
import { mdToHtml } from "@utils/md-to-html";
import type { GetStaticPaths } from "astro";
import { existsSync, readFileSync } from "node:fs";
import "../../styles/global.css";

// no-op

export const getStaticPaths: GetStaticPaths = async () => {
  const p = new URL("../../../data/aggregated.json", import.meta.url).pathname;
  type AggJson = { items?: Array<{ id: number }> };
  const content: AggJson = existsSync(p) ? JSON.parse(readFileSync(p, "utf8")) : { items: [] };
  return (content.items ?? []).map((it) => ({ params: { id: String(it.id) } }));
};

const lang = env.SUMMARY_LANG;
const { id: idParam } = Astro.params as { id: string };
const id = Number(idParam);
const dataPath = new URL("../../../data/aggregated.json", import.meta.url).pathname;
const data = existsSync(dataPath) ? JSON.parse(readFileSync(dataPath, "utf8")) : { items: [] };
const item = (data.items as AggregatedItem[]).find((x) => x.id === id);

if (!item) throw new Error("Missing item for id " + id);

const tags = Array.isArray(item.tags) ? item.tags : [];

function loadSummary(kind: "post" | "comments"): string | undefined {
  const p = new URL(`../../../data/summaries/${id}.${kind}.json`, import.meta.url).pathname;
  if (!existsSync(p)) return undefined;
  try {
    return (JSON.parse(readFileSync(p, "utf8")).summary as string) || undefined;
  } catch {
    return undefined;
  }
}

const postMd = loadSummary("post") ?? item.postSummary ?? "";
const commentsMd = loadSummary("comments") ?? item.commentsSummary ?? "";
const postHtml = postMd ? mdToHtml(postMd) : "";
const commentsHtml = commentsMd ? mdToHtml(commentsMd) : "";
const datePretty = formatDateHuman(item.timeISO);
const hnUrl = item.hnUrl ?? `https://news.ycombinator.com/item?id=${item.id}`;

const description = (postMd || commentsMd || `Hacker News discussion for: ${item.title}`).slice(0, 300);

const i18n = {
  ru: {
    comments: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
  },
  en: {
    comments: "Comments",
  },
};
const t = i18n[lang];
const commentsLabel = typeof item.commentsCount === "number" ? ` (${item.commentsCount})` : "";
---

<html lang={lang}>
  <head>
    <meta charset="utf-8" />
    <title>{item.title}</title>
    <meta name="description" content={description} />
    <meta name="robots" content="index,follow" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta property="og:title" content={item.title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:site_name" content="Hacker News Digest" />
    <meta property="og:type" content="article" />
    <link rel="canonical" href={hnUrl} />
  </head>
  <body>
    <header>
      <h1><a href="/">Hacker News Digest</a></h1>
      <p class="meta">
        {datePretty} ‚Ä¢ {item.domain ?? "news.ycombinator.com"} ‚Ä¢ ‚≠ê {item.score ?? 0} ‚Ä¢ üí¨ {item.commentsCount ?? 0}
      </p>
      <p class="meta"><a href={item.url ?? hnUrl} rel="noopener noreferrer">Original</a> ‚Ä¢ <a href={hnUrl}>HN</a></p>
      {tags.length > 0 && (
        <p class="meta tags">
          {tags.map((tag) => <a href={`/tag/${tag}/`} class="tag">#{tag}</a>)}
        </p>
      )}
    </header>
    <main>
      <section class="grid2">
        <div class="card">
          <h2 class="title">{item.title}</h2>
          {postHtml ? <div class="md" set:html={postHtml} /> : <p class="meta">No post summary.</p>}
        </div>
        <aside class="card">
          <h3 class="title">
            <a href={hnUrl} target="_blank" rel="noopener noreferrer nofollow">{t.comments}{commentsLabel}</a>
          </h3>
          {commentsHtml ? <div class="md" set:html={commentsHtml} /> : <p class="meta">No comments summary.</p>}
        </aside>
      </section>
    </main>
  </body>
</html>
