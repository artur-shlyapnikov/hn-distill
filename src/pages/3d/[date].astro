---
import StorySection from '../../components/StorySection.astro';
import '../../styles/global.css';
import { LANG } from '@config/lang';
import { PATHS } from '@config/paths';
import type { AggregatedItem } from '@config/schemas';
import { addDaysUTC } from '@utils/date-keys';
import { formatDateHuman } from '@utils/date';
import { indexById, loadAggregated, pickByIds } from '@utils/load-aggregated';
import { readJsonSafeOr } from '@utils/json';
import { z } from 'zod';

const DailyGroupFileSchema = z.object({
  updatedISO: z.string(),
  byDate: z.record(z.array(z.number())),
});

export async function getStaticPaths() {
  const dailyGroup = await readJsonSafeOr(PATHS.grouped.daily, DailyGroupFileSchema, {
    updatedISO: '',
    byDate: {},
  });
  const keys = Object.keys(dailyGroup.byDate);
  keys.sort((a, b) => (a < b ? 1 : a > b ? -1 : 0));
  return keys.map((key) => ({ params: { date: key } }));
}

const lang = LANG;
const dateParam = Astro.params.date ?? '';
const dateKey = typeof dateParam === 'string' ? dateParam : '';

const { items: allItems } = loadAggregated(PATHS.aggregated);
const itemsById = indexById(allItems);

const dailyGroup = await readJsonSafeOr(PATHS.grouped.daily, DailyGroupFileSchema, {
  updatedISO: '',
  byDate: {},
});

const endExclusive = addDaysUTC(dateKey, 1);
const startInclusive = addDaysUTC(dateKey, -2);
const allIds: number[] = [];
for (const [key, ids] of Object.entries(dailyGroup.byDate)) {
  if (key >= startInclusive && key < endExclusive) {
    allIds.push(...ids);
  }
}
const triItems = pickByIds(itemsById, [...new Set(allIds)]);

// Format dates for display
const displayStartDate = startInclusive ? formatDateHuman(`${startInclusive}T12:00:00Z`) : startInclusive;
const displayEndDate = dateKey ? formatDateHuman(`${dateKey}T12:00:00Z`) : dateKey;

const i18n = {
  ru: {
    title: 'За три дня',
    noData: 'Нет данных для выбранного периода.',
  },
  en: {
    title: 'Last 3 days',
    noData: 'No data for the selected period.',
  },
} as const;
const t = i18n[lang as 'ru' | 'en'];
const pageTitle = `${t.title}: ${displayStartDate} — ${displayEndDate} — Hacker News Digest`;
const description = `Hacker News Digest for ${displayStartDate} — ${displayEndDate}. ${triItems.length} posts.`;
---
<html lang={lang}>
  <head>
    <meta charset="utf-8" />
    <title>{pageTitle}</title>
    <meta name="description" content={description} />
    <meta name="robots" content="index,follow" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:site_name" content="Hacker News Digest" />
    <meta property="og:type" content="website" />
  </head>
  <body>
    <header>
      <h1><a href="/">Hacker News Digest</a></h1>
      <p class="meta">{t.title}: {displayStartDate} — {displayEndDate}</p>
      <p class="meta">Постов: {triItems.length}</p>
    </header>
    <main>
      {triItems.length === 0 ? (
        <p class="meta">{t.noData}</p>
      ) : (
        triItems.map((it: AggregatedItem) => <StorySection item={it} />)
      )}
    </main>
  </body>
  </html>
