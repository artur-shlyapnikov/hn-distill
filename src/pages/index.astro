---
import StorySection from "../components/StorySection.astro";
import "../styles/global.css";
import { LANG } from "@config/lang";
import { isoWeekKey } from "@utils/date-keys";
import { formatDateHuman } from "@utils/date";
import type { AggregatedItem } from "@config/schemas";
import { loadAggregated } from "@utils/load-aggregated";

const PAGE_SIZE = 10;

const lang = LANG;
const dataPath = new URL("../../data/aggregated.json", import.meta.url).pathname;
const { items, updatedISO } = loadAggregated(dataPath);
const updatedPretty = formatDateHuman(updatedISO);

const totalPages = Math.max(1, Math.ceil(items.length / PAGE_SIZE));
const pageItems = items.slice(0, PAGE_SIZE);

function pageHref(n: number): string {
  const u = new URL(`page/${n}/`, Astro.site ?? "http://localhost/");
  const path = u.pathname;
  return path.endsWith("/") ? path : `${path}/`;
}

// Generate date for navigation links based on latest data
const firstItem = items[0];
const latestDate = firstItem?.timeISO
  ? new Date(firstItem.timeISO).toISOString().slice(0, 10)
  : new Date().toISOString().slice(0, 10);

// Generate current week for weekly link (consistent with isoWeekKey format)
const currentWeek = isoWeekKey(new Date().toISOString());

const i18n = {
  ru: {
    updated: "–û–±–Ω–æ–≤–ª–µ–Ω–æ",
    stories: "–ü–æ—Å—Ç–æ–≤",
    noData: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    page: "–°—Ç—Ä–∞–Ω–∏—Ü–∞",
    next: "–í–ø–µ—Ä—ë–¥ ¬ª",
    navDaily: "–ó–∞ –¥–µ–Ω—å",
    nav3d: "–ó–∞ —Ç—Ä–∏ –¥–Ω—è",
    navWeekly: "–ó–∞ –Ω–µ–¥–µ–ª—é",
    navTags: "–¢–µ–≥–∏",
    navSearch: "–ü–æ–∏—Å–∫",
  },
  en: {
    updated: "Updated",
    stories: "Stories",
    noData: "No data to display. Please try again later.",
    page: "Page",
    next: "Next ¬ª",
    navDaily: "Daily",
    nav3d: "3 days",
    navWeekly: "Weekly",
    navTags: "Tags",
    navSearch: "Search",
  },
};
const t = i18n[lang];
const pageTitle = `Hacker News Digest ‚Äî ${t.page} 1/${totalPages}`;
const description = `${t.stories}: ${items.length}. ${t.updated}: ${updatedPretty}.`;
---

<html lang={lang}>
  <head>
    <meta charset="utf-8" />
    <title>{pageTitle}</title>
    <meta name="description" content={description} />
    <meta name="robots" content="index,follow" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:site_name" content="Hacker News Digest" />
    <meta property="og:type" content="website" />
    <meta name="color-scheme" content="light dark" />
    <meta name="theme-color" media="(prefers-color-scheme: light)" content="#ffffff" />
    <meta name="theme-color" media="(prefers-color-scheme: dark)" content="#0b1220" />
  </head>
  <body>
    <header>
      <div class="header-top">
        <h1><a href="/">Hacker News Digest</a></h1>
        <nav class="header-nav" aria-label="Site navigation">
          <a href={`/daily/${latestDate}/`}>{t.navDaily}</a>
          <a href={`/3d/${latestDate}/`}>{t.nav3d}</a>
          <a href={`/weekly/${currentWeek}/`}>{t.navWeekly}</a>
          <a href="/tags/">{t.navTags}</a>
          <a href="/search/">{t.navSearch}</a>
        </nav>
        <button id="theme-toggle" aria-label="Toggle theme">üåì</button>
      </div>
      <p class="meta">{t.updated}: {updatedPretty}</p>
      <p class="meta">{t.stories}: {items.length} ‚Ä¢ {t.page} 1/{totalPages}</p>
    </header>
    <main>
      {
        items.length === 0 ? (
          <p class="meta">{t.noData}</p>
        ) : (
          pageItems.map((it: AggregatedItem) => <StorySection item={it} />)
        )
      }
      {
        items.length > 0 && totalPages > 1 && (
          <nav class="pagination" aria-label="Pagination">
            <span>
              {t.page} 1 / {totalPages}
            </span>
            <a href={pageHref(2)} rel="next">
              {t.next}
            </a>
          </nav>
        )
      }
    </main>
    <script>
      const root = document.documentElement;
      const btn = document.getElementById("theme-toggle");
      if (localStorage.getItem("theme") === "dark") {
        root.setAttribute("data-theme", "dark");
      }
      btn?.addEventListener("click", () => {
        const isDark = root.getAttribute("data-theme") === "dark";
        if (isDark) {
          root.removeAttribute("data-theme");
          localStorage.setItem("theme", "light");
        } else {
          root.setAttribute("data-theme", "dark");
          localStorage.setItem("theme", "dark");
        }
      });
    </script>

    <script>
      (function () {
        const cards = Array.from(document.querySelectorAll("section.js-card"));
        if (cards.length === 0) return;

        let i = 0; // current index
        const select = (next) => {
          cards[i]?.classList.remove("selected");
          i = Math.max(0, Math.min(next, cards.length - 1));
          const el = cards[i];
          if (!el) return;
          el.classList.add("selected");
          try {
            el.focus({ preventScroll: true });
          } catch {}
          el.scrollIntoView({ block: "nearest" });
        };

        // Initialize on first card for predictability
        select(0);

        const isTypingField = (t) => t && (t.tagName === "INPUT" || t.tagName === "TEXTAREA" || t.isContentEditable);

        const openOriginal = () => {
          const el = cards[i];
          const href = el?.dataset?.original;
          if (href) window.open(href, "_blank", "noopener,noreferrer");
        };

        const goPrevPage = () => {
          const a = document.querySelector('nav.pagination a[rel="prev"]');
          if (a) window.location.assign(a.getAttribute("href"));
        };

        const goNextPage = () => {
          const a =
            document.querySelector('nav.pagination a[rel="next"]') || document.querySelector("nav.pagination a[href]");
          if (a) window.location.assign(a.getAttribute("href"));
        };

        window.addEventListener(
          "keydown",
          (e) => {
            if (e.altKey || e.metaKey || e.ctrlKey) return;
            if (isTypingField(e.target)) return;

            switch (e.key) {
              case "j":
                e.preventDefault();
                select(i + 1);
                break;
              case "k":
                e.preventDefault();
                select(i - 1);
                break;
              case "o":
                e.preventDefault();
                openOriginal();
                break;
              case "h":
                e.preventDefault();
                goPrevPage();
                break;
              case "l":
                e.preventDefault();
                goNextPage();
                break;
            }
          },
          { passive: false }
        );
      })();
    </script>
  </body>
</html>
