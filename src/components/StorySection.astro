---
import { HOT_SCORE_THRESHOLD, LONG_DISCUSSION_THRESHOLD } from "@config/constants";
import { LANG } from "@config/lang";
import type { AggregatedItem } from "@config/schemas";
import { formatDateHuman } from "@utils/date";
import { mdToHtml } from "@utils/md-to-html";

const { item } = Astro.props as { item: AggregatedItem };
const lang = LANG;
const tags = Array.isArray(item.tags) ? item.tags : [];

function storyHref(id: number): string {
  const u = new URL(`item/${id}/`, Astro.site ?? "http://localhost/");
  return u.pathname.endsWith("/") ? u.pathname : `${u.pathname}/`;
}

const safeTitle = item.title || "(no title)";
const safeBy = item.by || "unknown";
const safeTime = item.timeISO ? formatDateHuman(item.timeISO) : "‚Äî";
const pts = typeof item.score === "number" ? ` ‚Ä¢ ${item.score} points` : "";
const commentsLabel = typeof item.commentsCount === "number" ? ` (${item.commentsCount})` : "";
const hnUrl = item.hnUrl ?? `https://news.ycombinator.com/item?id=${item.id}`;

const commentsCount = typeof item.commentsCount === "number" ? item.commentsCount : 0;
const score = typeof item.score === "number" ? item.score : 0;
const isLongDiscussion = commentsCount > LONG_DISCUSSION_THRESHOLD;
const isHot = score > HOT_SCORE_THRESHOLD;

const i18n = {
  ru: {
    comments: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
    hot: "–ì–æ—Ä—è—á–µ–µ",
    long: "–î–ª–∏–Ω–Ω–∞—è –¥–∏—Å–∫—É—Å—Å–∏—è",
    original: "–û—Ä–∏–≥–∏–Ω–∞–ª",
  },
  en: {
    comments: "Comments",
    hot: "Hot",
    long: "Long discussion",
    original: "Original",
  },
};
const t = i18n[lang];

const postHtml = item.postSummary ? mdToHtml(item.postSummary) : "";
const commentsHtml = item.commentsSummary ? mdToHtml(item.commentsSummary) : "";
---

<section
  class="grid2 js-card"
  aria-labelledby={`t-${item.id}`}
  tabindex="-1"
  data-original={item.url ?? hnUrl}
>
  <div class="card">
    <h2 id={`t-${item.id}`} class="title">
      <a href={storyHref(item.id)}>{safeTitle}</a>
      {
        item.domain && (
          <span class="meta" style="font-weight: normal; margin-left: 0.5rem;">
            ({item.domain})
          </span>
        )
      }
      {
        (isHot || isLongDiscussion) && (
          <span class="badges">
            {isHot && <span class="badge badge--hot">üî• {t.hot}</span>}
            {isLongDiscussion && <span class="badge badge--long">üí¨ {t.long}</span>}
          </span>
        )
      }
    </h2>
    {postHtml ? <div class="md" set:html={postHtml} /> : <p>‚Äî</p>}
    <p class="meta">by {safeBy} ‚Ä¢ {safeTime}{pts}</p>
    <p class="meta"><a href={item.url ?? hnUrl} target="_blank" rel="noopener noreferrer nofollow">{t.original}</a> ‚Ä¢ <a href={hnUrl} target="_blank" rel="noopener noreferrer nofollow">HN</a></p>
    {tags.length > 0 && (
      <p class="meta tags">
        {tags.map((tag) => <a href={`/tag/${tag}/`} class="tag">#{tag}</a>)}
      </p>
    )}
  </div>
  <div class="card">
    <h3 class="title">
      <a href={hnUrl} target="_blank" rel="noopener noreferrer nofollow">{t.comments}{commentsLabel}</a>
    </h3>
    {commentsHtml ? <div class="md" set:html={commentsHtml} /> : <p>‚Äî</p>}
  </div>
</section>
