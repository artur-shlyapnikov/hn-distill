[
  {
    "id": 44871980,
    "by": "starchild3001",
    "timeISO": "2025-08-12T03:15:27.000Z",
    "textPlain": "Really appreciate the depth of this paper; it's a welcome change from the usual model announcement blog posts. The Zhipu/Tsinghua team laid out not just the 'what' but the 'how,' which is where the most interesting details are for anyone trying to build with or on top of these models.The post-training methodology (Sec 3) is what really stands out to me. The idea of creating specialized 'expert models' for reasoning, agents, and chat, and then distilling their capabilities into a final unified model is a fascinating approach. It feels like a more structured way to solve the \"jack of all trades, master of none\" problem that can plague generalist models. Instead of just mixing all the data, they're essentially having a generalist learn from a committee of specialists.A couple of the findings from their RL experiments are pure gold for anyone working in this space. The counter-intuitive result that a single-stage RL process at the full 64K context length outperforms a progressive, multi-stage approach (Fig 6) is a fantastic lesson. I've seen teams assume the opposite would be true. Also, the pragmatic choice to use an XML-like template for function calls to avoid JSON escaping hell (Fig 4) may be a small but brilliant engineering decision that makes a huge difference in practice. Wrangling escaped code inside JSON turns out to be a mess.The performance on SWE-bench is impressive, putting it in the same league as much larger or proprietary models. What I’d love to see, and maybe others here have thoughts, is whether this hybrid training recipe holds up outside ARC-style evals. For example, do the agentic improvements transfer to messier, real-world workflows where APIs are undocumented, partial failures are common, and user input is full of ambiguity?",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44871910,
    "by": "reissbaker",
    "timeISO": "2025-08-12T03:06:15.000Z",
    "textPlain": "I've been playing around with GLM-4.5 as a coding model for a while now and it's really, really good. In the coding agent I've been working on, Octofriend [1], I've sometimes had it on and confused it for Claude 4. Subjectively, my experience has been:1. Claude is somewhat better at whole-codebase tasks, where you need to reason over a bunch of context and consider system interactions.2. GLM-4.5 is somewhat better at being \"honest\" — i.e. I rarely see it doing the things Claude does like making broken tests pass by changing the test instead of fixing the bug.Both are quite good though, and GLM-4.5 has found bugs that both Claude 4 Sonnet and 4.1 Opus have failed to catch. In general I think Claude wins a little more frequently on debugging tasks than GLM-4.5, but it's close.Compared to GPT-5, both Claude and GLM feel like they're more consistent, although GPT-5 sometimes has long brilliant runs where it nails everything with subjectively higher code quality than either of the latter. However, once GPT-5 goes off the rails, it's hard to get it back on track, so it can be a bit frustrating to work with in comparison.1: https://github.com/synthetic-lab/octofriend",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44871638,
    "by": "ttul",
    "timeISO": "2025-08-12T02:23:07.000Z",
    "textPlain": "This feels like the first open model that doesn’t require significant caveats when comparing to frontier proprietary models. The parameter efficiency alone suggests some genuine innovations in training methodology.                 I am keen to see some independent verification of the results and to see how if does on Aider’s LLM Leaderboard.",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44872784,
    "by": "chvid",
    "timeISO": "2025-08-12T05:39:28.000Z",
    "textPlain": "This is a great model for software development - probably the best of the freely available ones.",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44871786,
    "by": "Reubend",
    "timeISO": "2025-08-12T02:47:31.000Z",
    "textPlain": "Fantastic release, and it's under the Apache license too. I'm so happy that we've got open source models pushing the envelope.",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44871650,
    "by": "lumost",
    "timeISO": "2025-08-12T02:25:18.000Z",
    "textPlain": "Why was qwen3 omitted from the coding benchmark but not other benchmarks?",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44872546,
    "by": "sagarpatil",
    "timeISO": "2025-08-12T04:57:19.000Z",
    "textPlain": "I’ve been using it and I think it’s on par with sonnet.",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44871832,
    "by": "darknoon",
    "timeISO": "2025-08-12T02:55:07.000Z",
    "textPlain": "It's ok, somewhere between a qwen 2.5 VL and the frontier models (o3 / opus 4) on visual reasoning",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44872918,
    "by": "buyucu",
    "timeISO": "2025-08-12T06:02:41.000Z",
    "textPlain": "Huge respect to the open-source culture in China.  The Chinese are really leading the world in democratizing AI.",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44872092,
    "by": "UncleOxidant",
    "timeISO": "2025-08-12T03:31:37.000Z",
    "textPlain": "I just read your comment and decided to give GLM-4.5 a try in Kilocode. I'd been using Gemini CLI all day to try to resolve a tricky bug in some compiler code (a compiler for a subset of C that generates microcode for... a weird architecture, I'll leave it at that). So GLM-4.5 zoomed in on the problem right away. A problem that's eluded Gemini CLI all day. Gemini was leading me on a wild goose chase implicating a function that turns out wasn't the problem (and trying to make all kinds of lame changes to the function saying that would fix the problem - and it never did because the problem wasn't that function).",
    "parent": 44871910,
    "depth": 2
  },
  {
    "id": 44873170,
    "by": "faangguyindia",
    "timeISO": "2025-08-12T06:50:42.000Z",
    "textPlain": "I've been using architect mode in aiderDeepseek R1 (does high level planning) combined with Qwen3 480B (does low level coding) or whatever is available from qwen code apis.It's working great.It solves 99.99% problem on tis own.The seperation isn't very good in aider so i later plan to make my own tool to achieve better workflow.",
    "parent": 44871910,
    "depth": 2
  },
  {
    "id": 44872081,
    "by": "nico",
    "timeISO": "2025-08-12T03:30:22.000Z",
    "textPlain": "How are you using glm-4.5? Are you consuming the api or running something like glm-4.5 air locally?",
    "parent": 44871910,
    "depth": 2
  },
  {
    "id": 44872011,
    "by": "coder543",
    "timeISO": "2025-08-12T03:20:24.000Z",
    "textPlain": "Section 4.3.2 includes Qwen3-Coder.",
    "parent": 44871650,
    "depth": 2
  }
]