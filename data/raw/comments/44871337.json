[
  {
    "id": 44871980,
    "by": "starchild3001",
    "timeISO": "2025-08-12T03:15:27.000Z",
    "textPlain": "Really appreciate the depth of this paper; it's a welcome change from the usual model announcement blog posts. The Zhipu/Tsinghua team laid out not just the 'what' but the 'how,' which is where the most interesting details are for anyone trying to build with or on top of these models.The post-training methodology (Sec 3) is what really stands out to me. The idea of creating specialized 'expert models' for reasoning, agents, and chat, and then distilling their capabilities into a final unified model is a fascinating approach. It feels like a more structured way to solve the \"jack of all trades, master of none\" problem that can plague generalist models. Instead of just mixing all the data, they're essentially having a generalist learn from a committee of specialists.A couple of the findings from their RL experiments are pure gold for anyone working in this space. The counter-intuitive result that a single-stage RL process at the full 64K context length outperforms a progressive, multi-stage approach (Fig 6) is a fantastic lesson. I've seen teams assume the opposite would be true. Also, the pragmatic choice to use an XML-like template for function calls to avoid JSON escaping hell (Fig 4) may be a small but brilliant engineering decision that makes a huge difference in practice. Wrangling escaped code inside JSON turns out to be a mess.The performance on SWE-bench is impressive, putting it in the same league as much larger or proprietary models. What I’d love to see, and maybe others here have thoughts, is whether this hybrid training recipe holds up outside ARC-style evals. For example, do the agentic improvements transfer to messier, real-world workflows where APIs are undocumented, partial failures are common, and user input is full of ambiguity?",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44874657,
    "by": "throwdbaaway",
    "timeISO": "2025-08-12T10:53:42.000Z",
    "textPlain": "So GLM-4.5 series omits the embedding layer and the output layer when counting both the total parameters and the active parameters:> When counting parameters, for GLM-4.5 and GLM-4.5-Air, we include the parameters of MTP layers but not word embeddings and the output layer.This matches with the calculation I did for GLM-4.5 (355B A32B):    In [14]: 356732107008 - (775946240 * 2) # token_embd / output are 775946240 each. assume omitted\n    Out[14]: 355180214528\n\n    In [15]: 356732107008 - 339738624000 - (775946240 * 2) # parameters that are always active\n    Out[15]: 15441590528\n\n    In [16]: 339738624000 * 8 / 160 # parameters from activated experts\n    Out[16]: 16986931200.0\n\nMeanwhile, GPT OSS series includes both the embedding layer and the output layer when counting the total parameters, but only includes the output layer when counting the active parameters:> We refer to the models as “120b” and “20b” for simplicity, though they technically have 116.8B and 20.9B parameters, respectively. Unembedding parameters are counted towards active, but not embeddings.And Qwen3 series includes both the embedding layer and the output layer when counting both the total parameters and the active parameters.Why there is no standard in counting? Which approach is more accurate?",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44871910,
    "by": "reissbaker",
    "timeISO": "2025-08-12T03:06:15.000Z",
    "textPlain": "I've been playing around with GLM-4.5 as a coding model for a while now and it's really, really good. In the coding agent I've been working on, Octofriend [1], I've sometimes had it on and confused it for Claude 4. Subjectively, my experience has been:1. Claude is somewhat better at whole-codebase tasks, where you need to reason over a bunch of context and consider system interactions.2. GLM-4.5 is somewhat better at being \"honest\" — i.e. I rarely see it doing the things Claude does like making broken tests pass by changing the test instead of fixing the bug.Both are quite good though, and GLM-4.5 has found bugs that both Claude 4 Sonnet and 4.1 Opus have failed to catch. In general I think Claude wins a little more frequently on debugging tasks than GLM-4.5, but it's close.Compared to GPT-5, both Claude and GLM feel like they're more consistent, although GPT-5 sometimes has long brilliant runs where it nails everything with subjectively higher code quality than either of the latter. However, once GPT-5 goes off the rails, it's hard to get it back on track, so it can be a bit frustrating to work with in comparison.1: https://github.com/synthetic-lab/octofriend",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44874236,
    "by": "jononor",
    "timeISO": "2025-08-12T09:39:17.000Z",
    "textPlain": "Seems like we may get local, open, workstation-grade models that are useful for coding in a few years. By workstation-grade I mean a computer around 2000 USD, and by useful for coding I mean around Sonnet 4 level.\nCurrent cloud based models are fun and useful, but a tool that is / will be so core to the developer experience, I want to be able to run locally.",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44871638,
    "by": "ttul",
    "timeISO": "2025-08-12T02:23:07.000Z",
    "textPlain": "This feels like the first open model that doesn’t require significant caveats when comparing to frontier proprietary models. The parameter efficiency alone suggests some genuine innovations in training methodology.                 I am keen to see some independent verification of the results and to see how if does on Aider’s LLM Leaderboard.",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44874852,
    "by": "matijsvzuijlen",
    "timeISO": "2025-08-12T11:20:15.000Z",
    "textPlain": "For people who, like me, prefer to read the abstract first: https://www.arxiv.org/abs/2508.06471",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44875254,
    "by": "rsanek",
    "timeISO": "2025-08-12T12:12:42.000Z",
    "textPlain": "What’s up with the charts? In their first figure they show sonnet 4 as having a swebench score of 53; in the next figure it’s close to 70. In reality it’s closer to the latter. [0][0]  https://www.swebench.com/",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44874249,
    "by": "promiseofbeans",
    "timeISO": "2025-08-12T09:41:10.000Z",
    "textPlain": "The sheer number of things \"they observed\" in this paper that could be whole papers in themselves is astounding! Lots of great stuff in here around training processes and data collection+synthesis.Does anyone have any background information on the authors? Have they published similarly impressive works in the past?",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44871786,
    "by": "Reubend",
    "timeISO": "2025-08-12T02:47:31.000Z",
    "textPlain": "Fantastic release, and it's under the Apache license too. I'm so happy that we've got open source models pushing the envelope.",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44872546,
    "by": "sagarpatil",
    "timeISO": "2025-08-12T04:57:19.000Z",
    "textPlain": "I’ve been using it and I think it’s on par with sonnet.",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44871650,
    "by": "lumost",
    "timeISO": "2025-08-12T02:25:18.000Z",
    "textPlain": "Why was qwen3 omitted from the coding benchmark but not other benchmarks?",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44872784,
    "by": "chvid",
    "timeISO": "2025-08-12T05:39:28.000Z",
    "textPlain": "This is a great model for software development - probably the best of the freely available ones.",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44871832,
    "by": "darknoon",
    "timeISO": "2025-08-12T02:55:07.000Z",
    "textPlain": "It's ok, somewhere between a qwen 2.5 VL and the frontier models (o3 / opus 4) on visual reasoning",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44874350,
    "by": "khalic",
    "timeISO": "2025-08-12T10:00:15.000Z",
    "textPlain": "Impressive work! Can’t wait to spin it up on HF",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44874887,
    "by": "acqbu",
    "timeISO": "2025-08-12T11:25:59.000Z",
    "textPlain": "Kimi K2 has been the best so far in my experience",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44872918,
    "by": "buyucu",
    "timeISO": "2025-08-12T06:02:41.000Z",
    "textPlain": "Huge respect to the open-source culture in China.  The Chinese are really leading the world in democratizing AI.",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44874604,
    "by": "sriku",
    "timeISO": "2025-08-12T10:45:01.000Z",
    "textPlain": "Ok so I asked \"how many bs in bluberry\" and it \"thought\" the following ------  First, the question is: \"How many bs in bluberry?\" That seems like a typo. I   think it's meant to be \"blueberry,\" but it's spelled \"bluberry\" with one 'e' missing. Also, \"bs\" probably refers to the letter 'b'.\n  So, rephrasing the question: How many times does the letter 'b' appear in the word \"blueberry\"?\n  But the word given is \"bluberry,\" which might be a misspelling of \"blueberry.\" Let me confirm the correct spelling. The standard spelling is \"blueberry,\" which has two 'e's: b-l-u-e-b-e-r-r-y.\n  The question says \"bluberry,\" which is missing the second 'e', so it's spelled b-l-u-b-e-r-r-y. That might be intentional or a mistake. I should answer based on the word as given.\n  The question is: \"How many bs in bluberry?\" So, I need to count the 'b's in \"bluberry.\"\n  Let me write it out: B-L-U-B-E-R-R-Y.\n  Now, I'll go through each letter:\n  Position 1: B (that's one b)\n  Position 2: L (not b)\n  Position 3: U (not b)\n  Position 4: B (that's the second b)\n  Position 5: E (not b)\n  Position 6: R (not b)\n  Position 7: R (not b)\n  Position 8: Y (not b)\n  So, there are two 'b's in \"bluberry.\"\n  But is \"bluberry\" the correct word? It's probably a misspelling of \"blueberry.\" In \"blueberry,\" it's B-L-U-E-B-E-R-R-Y.\n  Position 1: B (one)\n  Position 2: L\n  Position 3: U\n  Position 4: E\n  Position 5: B (two)\n  Position 6: E\n  Position 7: R\n  Position 8: R\n  Position 9: Y\n  \"Blueberry\" has nine letters, and there are two 'b's: one at the start and one after the 'e'.\n  In \"bluberry,\" as given, it's eight letters: B-L-U-B-E-R-R-Y, with two 'b's.\n  Perhaps the question is tricking me with the misspelling. But I should answer based on what's written.\n  Another thought: \"bs\" might be plural for 'b', meaning how many 'b's, or it could be something else. But in context, it's likely about the letter.\n  Maybe it's a riddle. \"Bluberry\" sounds like \"blueberry,\" but spelled differently.\n  Perhaps \"bs\" refers to ",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44873814,
    "by": "almaight",
    "timeISO": "2025-08-12T08:32:25.000Z",
    "textPlain": "so sarcastic when it first came out, but now you are so polite.",
    "parent": 44871337,
    "depth": 1
  },
  {
    "id": 44873432,
    "by": "algo_trader",
    "timeISO": "2025-08-12T07:35:21.000Z",
    "textPlain": "Are all these \"post/mid-training tweaks\" important if you have a specific domain with abundant/verified/synthesis data and labels?Can a small team working on ASI/domain-specific stick to scaling 2024-era best practices training stack? Or will they miss massive improvements?",
    "parent": 44871980,
    "depth": 2
  },
  {
    "id": 44875843,
    "by": "calmoo",
    "timeISO": "2025-08-12T13:15:08.000Z",
    "textPlain": "I don't want to call you out unnecessarily, but your writing heavily smells of LLMs.edit: looks like i'm not the first person to notice this either regarding this poster. \nhttps://news.ycombinator.com/item?id=44279662I think we have a duty to call this out, before the web becomes ridden with slop.",
    "parent": 44871980,
    "depth": 2
  },
  {
    "id": 44875524,
    "by": "atq2119",
    "timeISO": "2025-08-12T12:43:53.000Z",
    "textPlain": "I'd say it depends. For the total parameter count, you should just count all parameters, since that's what matters for memory requirements.For activated parameters: All unembedding parameters are used in every inference step during token generation, but only one column of the embeddings is used (if done right). So count accordingly, since that's what matters for memory bandwidth and therefore latency.",
    "parent": 44874657,
    "depth": 2
  },
  {
    "id": 44872092,
    "by": "UncleOxidant",
    "timeISO": "2025-08-12T03:31:37.000Z",
    "textPlain": "I just read your comment and decided to give GLM-4.5 a try in Kilocode. I'd been using Gemini CLI all day to try to resolve a tricky bug in some compiler code (a compiler for a subset of C that generates microcode for... a weird architecture, I'll leave it at that). So GLM-4.5 zoomed in on the problem right away. A problem that's eluded Gemini CLI all day. Gemini was leading me on a wild goose chase implicating a function that turns out wasn't the problem (and trying to make all kinds of lame changes to the function saying that would fix the problem - and it never did because the problem wasn't that function).",
    "parent": 44871910,
    "depth": 2
  },
  {
    "id": 44873839,
    "by": "nmfisher",
    "timeISO": "2025-08-12T08:36:02.000Z",
    "textPlain": "I've had similarly good experiences with GLM-4.5 for smaller projects/requests. Unfortunately that did degrade with larger contexts, so I'm still treating it as a good fallback for Sonnet 4, rather than a full-blown replacement.",
    "parent": 44871910,
    "depth": 2
  },
  {
    "id": 44873170,
    "by": "faangguyindia",
    "timeISO": "2025-08-12T06:50:42.000Z",
    "textPlain": "I've been using architect mode in aiderDeepseek R1 (does high level planning) combined with Qwen3 480B (does low level coding) or whatever is available from qwen code apis.It's working great.It solves 99.99% problem on tis own.The seperation isn't very good in aider so i later plan to make my own tool to achieve better workflow.",
    "parent": 44871910,
    "depth": 2
  },
  {
    "id": 44874150,
    "by": "mrklol",
    "timeISO": "2025-08-12T09:26:28.000Z",
    "textPlain": "About your first point, I also feel like Claude is better if there’s more in the context where 4.5 is getting \"worse\".",
    "parent": 44871910,
    "depth": 2
  },
  {
    "id": 44872081,
    "by": "nico",
    "timeISO": "2025-08-12T03:30:22.000Z",
    "textPlain": "How are you using glm-4.5? Are you consuming the api or running something like glm-4.5 air locally?",
    "parent": 44871910,
    "depth": 2
  },
  {
    "id": 44875418,
    "by": "orangebread",
    "timeISO": "2025-08-12T12:32:45.000Z",
    "textPlain": "I would say by end of year, not 2 years.",
    "parent": 44874236,
    "depth": 2
  },
  {
    "id": 44874323,
    "by": "cft",
    "timeISO": "2025-08-12T09:55:48.000Z",
    "textPlain": "This will be essential for the open source. Otherwise open source development will become unsustainable. I'm actually a little bit more optimistic. I think we will get something more than Sonnet 4 level in two years, that can be run on a $2,000 machine.",
    "parent": 44874236,
    "depth": 2
  },
  {
    "id": 44872011,
    "by": "coder543",
    "timeISO": "2025-08-12T03:20:24.000Z",
    "textPlain": "Section 4.3.2 includes Qwen3-Coder.",
    "parent": 44871650,
    "depth": 2
  },
  {
    "id": 44874221,
    "by": "revskill",
    "timeISO": "2025-08-12T09:38:02.000Z",
    "textPlain": "Qwen is still naive for large codebase understanding.",
    "parent": 44871650,
    "depth": 2
  },
  {
    "id": 44873911,
    "by": "natrys",
    "timeISO": "2025-08-12T08:48:19.000Z",
    "textPlain": "Yep I think it's the best, period. Qwen3-coder perhaps took the limelight but the GLM models perform and behave better in agentic loops. I cannot believe they had gone from a 32B frontend focused GLM-4 to these beasts that can challenge Claude, in a matter of months.",
    "parent": 44872784,
    "depth": 2
  },
  {
    "id": 44874697,
    "by": "quantumHazer",
    "timeISO": "2025-08-12T11:00:31.000Z",
    "textPlain": "It's open-weight, not open source though",
    "parent": 44872918,
    "depth": 2
  },
  {
    "id": 44876064,
    "by": "brookst",
    "timeISO": "2025-08-12T13:38:30.000Z",
    "textPlain": "It still uses text tokenization, so it can’t even see the word. Not sure what tokenizer GLM uses, but OpenAI’s tokenizer renders “blueberry” as a single token (116500 or thereabouts IIRC).It’s like asking us what the average wavelength is when looking at a blueberry: the information is actually there somewhere in our processing stack, but inaccessible to reasoning. It can be worked out logically from general knowledge, but probably inaccurately, and the gotcha of “you’re looking right at it and the photons are hitting your vision” is not much of a gotcha when you understand how it works.",
    "parent": 44874604,
    "depth": 2
  },
  {
    "id": 44876096,
    "by": "lsaferite",
    "timeISO": "2025-08-12T13:42:21.000Z",
    "textPlain": "Your spelling of \"bluberry\" almost made the model have an existential crisis. That gave me a good laugh. Out of curiosity, did you also run it using \"blueberry\" to see the differential?",
    "parent": 44874604,
    "depth": 2
  }
]