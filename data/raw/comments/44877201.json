[
  {
    "id": 44913517,
    "by": "joshmarinacci",
    "timeISO": "2025-08-15T15:20:38.000Z",
    "textPlain": "I love this concept but I feel it is hamstrung by the need to write it using a text editor. If the rectangles were defined by actual graphical shapes it would be a lot easier to read and understand.Also I wonder if positional parameters would need to be replaced by named arguments.",
    "parent": 44877201,
    "depth": 1
  },
  {
    "id": 44912067,
    "by": "rickcarlino",
    "timeISO": "2025-08-15T13:18:09.000Z",
    "textPlain": "Has this paradigm been explored as a basis for visual programming languages? It seems like it could do a better job of handling the “density” of a program, which is often a problem in VPLs.",
    "parent": 44877201,
    "depth": 1
  },
  {
    "id": 44913604,
    "by": "mockingloris",
    "timeISO": "2025-08-15T15:30:11.000Z",
    "textPlain": "Truly interesting read! @mhagiwara The article reads very well.With the bandwidth left from parsing all that new information, all I can say is this is something. I know there's still a whole lot of figuring out to do.(I imagine if there were peeps from other-than-earth, they'd probably communicate in a manner as this - depicted in the \"Arrival\" movie)Thanks for sharing. I'll be donating a star on github and keeping watch-O",
    "parent": 44877201,
    "depth": 1
  },
  {
    "id": 44913966,
    "by": "enricozb",
    "timeISO": "2025-08-15T15:56:47.000Z",
    "textPlain": "Hexagony is another 2d language: https://esolangs.org/wiki/Hexagony",
    "parent": 44877201,
    "depth": 1
  },
  {
    "id": 44913832,
    "by": "S4M",
    "timeISO": "2025-08-15T15:47:06.000Z",
    "textPlain": "There is also thje 2D dialect of Racket: https://docs.racket-lang.org/2d/",
    "parent": 44877201,
    "depth": 1
  },
  {
    "id": 44913023,
    "by": "abraxas",
    "timeISO": "2025-08-15T14:39:49.000Z",
    "textPlain": "I consider Unreal Blueprints to be essentially a 2D language with the data flow and the execution flow modelled in separate dimensions.",
    "parent": 44877201,
    "depth": 1
  },
  {
    "id": 44913525,
    "by": "xigoi",
    "timeISO": "2025-08-15T15:21:17.000Z",
    "textPlain": "Having only the corners marked out with weird markers makes it hard to visualize the rectangles. It would be nicer to have the entire rectangle laid out of Unicode box drawing characters.",
    "parent": 44877201,
    "depth": 1
  },
  {
    "id": 44911984,
    "by": "keyle",
    "timeISO": "2025-08-15T13:11:54.000Z",
    "textPlain": "There is a whole category of multiple dimension languages on esolang [1]... Nothing you'd really want to use other than to impress someone.No languages captures time as a dimension, yet.[1] https://esolangs.org/wiki/Esolang:Categorization#Dimensions",
    "parent": 44877201,
    "depth": 1
  },
  {
    "id": 44912557,
    "by": "flyinghamster",
    "timeISO": "2025-08-15T14:02:08.000Z",
    "textPlain": "I'm guessing the author doesn't speak Spanish. :)",
    "parent": 44877201,
    "depth": 1
  },
  {
    "id": 44912478,
    "by": "IsTom",
    "timeISO": "2025-08-15T13:55:40.000Z",
    "textPlain": "Isn't this just braces/parens with extra steps?",
    "parent": 44877201,
    "depth": 1
  },
  {
    "id": 44883173,
    "by": "OgsyedIE",
    "timeISO": "2025-08-12T23:55:45.000Z",
    "textPlain": "Does Recto support something like this:https://i.redd.it/tfd086olfoif1.jpeg",
    "parent": 44877201,
    "depth": 1
  },
  {
    "id": 44912128,
    "by": "hamstor",
    "timeISO": "2025-08-15T13:24:02.000Z",
    "textPlain": "Why the tight limit of only 2 dimensions? Seems unnecessary. A more general approach would be to support an arbitrary amount of dimensions",
    "parent": 44877201,
    "depth": 1
  },
  {
    "id": 44912258,
    "by": "curtisszmania",
    "timeISO": "2025-08-15T13:35:48.000Z",
    "textPlain": "[dead]",
    "parent": 44877201,
    "depth": 1
  },
  {
    "id": 44912606,
    "by": "jeffreyyao",
    "timeISO": "2025-08-15T14:08:07.000Z",
    "textPlain": "I really enjoyed this read! Sending you support, strength and comfort to you for the days ahead",
    "parent": 44877201,
    "depth": 1
  },
  {
    "id": 44912252,
    "by": "marvinborner",
    "timeISO": "2025-08-15T13:35:13.000Z",
    "textPlain": "I think emiT [1] comes quite close!A time paradox from [2]:  create x = 10;\n  time point;\n  print x; //prints 10 in first timeline, and 20 in the next\n\n  create traveler = 20;\n  traveler warps point{\n      x = traveler;\n      traveler kills traveler;\n  };\n\n[1] https://esolangs.org/wiki/EmiT, https://github.com/nimrag-b/emiT-C[2] https://www.reddit.com/r/ProgrammingLanguages/comments/1golf...",
    "parent": 44911984,
    "depth": 2
  },
  {
    "id": 44912362,
    "by": "soulofmischief",
    "timeISO": "2025-08-15T13:46:35.000Z",
    "textPlain": "It's worth mentioning Orca[0] by Hundredrabbits, a 2-dimensional esolang which does incorporate time (and thus distance) and so is really 3-dimensional.It's also worth checking out Extempore[1] by Andrew Sorensen and Ben Swift, which grants you have incredibly precise timing semantics at the sample level.\"Each extempore process has a scheduling engine built-in, allowing tasks to be scheduled for execution at a precise time in the future. Unlike threading constructs such as sleep() or wait(), which don’t provide strong guarantees about temporal accuracy (i.e. the time they’ll sleep/wait for), Extempore's scheduling engine is guaranteed to execute its tasks at the requested time (the number of audio samples since Extempore was started). This temporal guarantee is significant for time critical domains such as audio and graphic, and real-time systems programming.\"What's cool about this is that you're able to modify the program while it's running, and only update sections of it at a time, using the editor as a scratchpad, and it supports networking so you can precisely synchronize a herd of non-local devices and do things you'd have an extremely hard time doing in other languages. The applications extend far beyond just audio and visual programming.What both of these languages have in common is that they are designed for live coding, or as Sorensen says, cyberphysical programming. I am very interested in the marriage of these technologies and recent transformer models.[0] https://100r.co/site/orca.html[1] https://extemporelang.github.io/docs/overview/time/",
    "parent": 44911984,
    "depth": 2
  },
  {
    "id": 44913647,
    "by": "omoikane",
    "timeISO": "2025-08-15T15:33:37.000Z",
    "textPlain": "> No languages captures time as a dimension, yet.Maybe not exactly, but there was one task[1] in ICFPc 2024[2] where you create programs that are laid out in 2D, and there is a special operator that causes the control flow to travel back in time.  It was super fun.[1] https://github.com/icfpcontest2024/icfpc2024/blob/main/stati...[2] https://icfpcontest2024.github.io/",
    "parent": 44911984,
    "depth": 2
  },
  {
    "id": 44913873,
    "by": "entaloneralie",
    "timeISO": "2025-08-15T15:50:25.000Z",
    "textPlain": "Besides Orca, Befunge, etc.. the McCulloch-Pitts Neuron is a graphical language with a discrete timestep, it solves some of the shortcomings of Orca and Recto where the evaluation has to do a lot of walking to traverse space.https://www.i-programmer.info/babbages-bag/325-mcculloch-pit...It does so by creating instant connection between events across large distances.Its inerrant parallalelism makes it also possible to do pretty complex evaluation on large canvases.",
    "parent": 44911984,
    "depth": 2
  },
  {
    "id": 44913503,
    "by": "mlajtos",
    "timeISO": "2025-08-15T15:19:30.000Z",
    "textPlain": "I thought the name was intentional. :)",
    "parent": 44912557,
    "depth": 2
  },
  {
    "id": 44913495,
    "by": "nymiro",
    "timeISO": "2025-08-15T15:18:25.000Z",
    "textPlain": "My thoughts exactly lol",
    "parent": 44912557,
    "depth": 2
  },
  {
    "id": 44912657,
    "by": "fnordlord",
    "timeISO": "2025-08-15T14:11:26.000Z",
    "textPlain": "I started to think the same thing when it got down to the for-loop example.  Is Python 2-d because it uses indentation for blocks?",
    "parent": 44912478,
    "depth": 2
  },
  {
    "id": 44885676,
    "by": "pontifier",
    "timeISO": "2025-08-13T07:47:16.000Z",
    "textPlain": "I started thinking about Ven diagrams too and how that might be a useful flow control mechanism. It feels like there is a disconnect somewhere, and im not sure what it is.",
    "parent": 44883173,
    "depth": 2
  },
  {
    "id": 44913582,
    "by": "Mithriil",
    "timeISO": "2025-08-15T15:27:38.000Z",
    "textPlain": "Three cheers for the language that naturally requires a VR headset to visualize 5D tensor logic.",
    "parent": 44912128,
    "depth": 2
  },
  {
    "id": 44913538,
    "by": "mlajtos",
    "timeISO": "2025-08-15T15:22:49.000Z",
    "textPlain": "Yes, we should store text in string tensors.",
    "parent": 44912128,
    "depth": 2
  }
]