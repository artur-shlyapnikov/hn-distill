[
  {
    "id": 44919343,
    "by": "jsight",
    "timeISO": "2025-08-16T01:47:06.000Z",
    "textPlain": "I once wrote a little generalized yaml templating processor in Python by using an LLM for assistance. It was working pretty well and passing a lot of the tests that I was throwing at it!Then I noticed that some of the tests that failed were failing in really odd ways. Upon closer inspection, the generated processor had made lots of crazy assumptions about what it should be doing based upon specific values in yaml keys that were obviously unrelated to instructions.Yeah, I agree with the author. This stuff can be incredibly useful, but it definitely isn't anything like an AGI in its current form.",
    "parent": 44914040,
    "depth": 1
  },
  {
    "id": 44914430,
    "by": "flax",
    "timeISO": "2025-08-15T16:33:14.000Z",
    "textPlain": "\"it mostly worked\" is just a more nuanced way of saying \"it didn't work\".\nApparently the author did eventually get something working, but it is false to say that the LLMs produced a working project.",
    "parent": 44914040,
    "depth": 1
  },
  {
    "id": 44915397,
    "by": "drumnerd",
    "timeISO": "2025-08-15T17:50:51.000Z",
    "textPlain": "I would never ever let an LLM anywhere near C code. If you need help from LLM to write a NIF that performs basic C calls to the OS, you probably can’t check if it’s safe. I mean, it needs at least to pass valgrind.",
    "parent": 44914040,
    "depth": 1
  },
  {
    "id": 44915563,
    "by": "lawik",
    "timeISO": "2025-08-15T18:04:20.000Z",
    "textPlain": "I've done this. The NIF worked as in that it ran and was a correct enough NIF. It did not work in terms of solving what I needed it to do. Iteration was a bit painful because it was tangled with a nasty library that needed to be cross-compiled. So when I made a change it seg faulted and I bailed.I essentially ran out of patience and tried another approach. It involved an LLM running C code so I could check the library output compared to my implementation to make sure it was byte-for-byte.The C will never ship. I don't have practice writing C so I am very inefficient at it. I read it okay. LLMs are pretty decent help for this type of scrap code.",
    "parent": 44914040,
    "depth": 1
  },
  {
    "id": 44914754,
    "by": "simonw",
    "timeISO": "2025-08-15T16:59:47.000Z",
    "textPlain": "For anyone wondering, the article clarifies that \"A NIF is a function that is implemented in C instead of Erlang\".I had a bunch of fun getting ChatGPT Code Interpreter to write (and compile and test) C extensions for SQLite last year: https://simonwillison.net/2024/Mar/23/building-c-extensions-...",
    "parent": 44914040,
    "depth": 1
  },
  {
    "id": 44915024,
    "by": "cultofmetatron",
    "timeISO": "2025-08-15T17:20:35.000Z",
    "textPlain": "built my startup in elixir. love it but nifs are one of the few ways you can crash the VM. I don't trust myseld to write a nif in production. no way I'd do it with AI in c. Thank god theres projects like rustler which can catch panics before it crashes the main VM.",
    "parent": 44914040,
    "depth": 1
  },
  {
    "id": 44914489,
    "by": "bcardarella",
    "timeISO": "2025-08-15T16:37:44.000Z",
    "textPlain": "I tried to do this a few weeks ago, I tried to build a NIF around an existing C lib. I was using Claude Opus and burned over $300 (I didn't have Pro) on tokens with no usable results.",
    "parent": 44914040,
    "depth": 1
  },
  {
    "id": 44917107,
    "by": "SweetSoftPillow",
    "timeISO": "2025-08-15T20:51:58.000Z",
    "textPlain": "It's interesting why the author used weaker models (like Grok 3 when 4 is available, and Gemini 2.5 Flash when Pro is), since the difference in coding quality between these models is significant, and results could be much better.",
    "parent": 44914040,
    "depth": 1
  },
  {
    "id": 44915030,
    "by": "weatherlight",
    "timeISO": "2025-08-15T17:21:20.000Z",
    "textPlain": "Why C instead of Rust or Zig? Rustler and Zigler exist.\nI feel like a Vibecoded NIF in C is the absolute last thing I would want to expose the BEAM to.",
    "parent": 44914040,
    "depth": 1
  },
  {
    "id": 44916826,
    "by": "wordofx",
    "timeISO": "2025-08-15T20:13:48.000Z",
    "textPlain": "This was built copy pasting results from chats? Not using an ide or cli like Claude Code or Amp? Why such a manual process. This isn’t 2023…",
    "parent": 44914040,
    "depth": 1
  },
  {
    "id": 44916730,
    "by": "overbring_labs",
    "timeISO": "2025-08-15T20:00:45.000Z",
    "textPlain": "What is your definition of \"a working project\"? It does what it says on the tin (actually it probably does more, because splint throws some warnings...)",
    "parent": 44914430,
    "depth": 2
  },
  {
    "id": 44914874,
    "by": "jgalt212",
    "timeISO": "2025-08-15T17:08:28.000Z",
    "textPlain": "I dunno. Depending on the writer and their particularly axe to grind the definition can vary widely. I would like it to mean, \"any fixes I needed to make were minimal and not time intensive.\"",
    "parent": 44914430,
    "depth": 2
  },
  {
    "id": 44916627,
    "by": "brokencode",
    "timeISO": "2025-08-15T19:46:17.000Z",
    "textPlain": "Ok. But what are you even reacting to? Who is saying that it produced a working product?As you said, the very title of the article acknowledged that it didn’t produce a working product.This is just outrage for the sake of outrage.",
    "parent": 44914430,
    "depth": 2
  },
  {
    "id": 44916877,
    "by": "simonw",
    "timeISO": "2025-08-15T20:18:47.000Z",
    "textPlain": "You can use something like Claude Code or Codex CLI and tell it to run valgrind as part of iterating on the code.",
    "parent": 44915397,
    "depth": 2
  },
  {
    "id": 44915728,
    "by": "true_religion",
    "timeISO": "2025-08-15T18:18:23.000Z",
    "textPlain": "Security is a spectrum. If you totally control the input going into a program, it can be safe even if you didn't test it for memory leaks. The only errors that occur will be truly erroneous, not malicious and for many solutions that's fine.At the very least, it's fine for personal projects which is something I'm getting into more and more: remembering that computers were meant to create convenience, so writing small programs to make life easier.",
    "parent": 44915397,
    "depth": 2
  },
  {
    "id": 44916682,
    "by": "overbring_labs",
    "timeISO": "2025-08-15T19:55:06.000Z",
    "textPlain": "I mean, you aren't wrong. I'm looking into converting it into Rust with Rustler right now.",
    "parent": 44915397,
    "depth": 2
  },
  {
    "id": 44915035,
    "by": "victorbjorklund",
    "timeISO": "2025-08-15T17:21:42.000Z",
    "textPlain": "Not only C. Can be done in any compiled language (C, Rust, Zig, etc). Not sure if can be done with GC language.",
    "parent": 44914754,
    "depth": 2
  },
  {
    "id": 44914560,
    "by": "cpursley",
    "timeISO": "2025-08-15T16:42:39.000Z",
    "textPlain": "Get Pro, 4 is quite good at Elixir now but you have to stay on it. 3.5 was not, so I imagine next version of Claude will be able to handle the more esoteric things like NIFs, etc.",
    "parent": 44914489,
    "depth": 2
  },
  {
    "id": 44917235,
    "by": "overbring_labs",
    "timeISO": "2025-08-15T21:04:57.000Z",
    "textPlain": "It's just that Grok 3 is faster than 4, so I've set it by default. But point taken, I'll try out the newer ones now that I'm converting it to Rust.",
    "parent": 44917107,
    "depth": 2
  },
  {
    "id": 44917486,
    "by": "overbring_labs",
    "timeISO": "2025-08-15T21:30:18.000Z",
    "textPlain": "Holy moly, you weren't kidding. Grok 4 is so much better. Thanks!",
    "parent": 44917107,
    "depth": 2
  },
  {
    "id": 44917310,
    "by": "overbring_labs",
    "timeISO": "2025-08-15T21:11:53.000Z",
    "textPlain": "Given the amount of issues the code had when I ran splint on the C file, I agree. The question was for me whether I can get something working to get over the \"speed bump\" of lacking such a function for the API client I'm writing.I'm now re-vibe-coding it into Rust with the same process, but also using Grok 4 to get better results. It now builds and passes the tests on Elixir 1.14 to 1.18 on macOS and Ubuntu, but I'm still trying to get Grok 3 and 4 to fix the Windows-specific parts of the Rust code.",
    "parent": 44915030,
    "depth": 2
  },
  {
    "id": 44916314,
    "by": "qualeed",
    "timeISO": "2025-08-15T19:08:32.000Z",
    "textPlain": "Why does every post that mentions something other than Rust or Zig get a comment saying \"Why not Rust or Zig\"?",
    "parent": 44915030,
    "depth": 2
  },
  {
    "id": 44916511,
    "by": "ch4s3",
    "timeISO": "2025-08-15T19:31:10.000Z",
    "textPlain": "The author was trying to learn about https://github.com/elixir-sqlite/exqlite which uses C.",
    "parent": 44915030,
    "depth": 2
  },
  {
    "id": 44916221,
    "by": "leansensei",
    "timeISO": "2025-08-15T19:00:31.000Z",
    "textPlain": "Why not C? It made no difference, we're talking about a few function calls.",
    "parent": 44915030,
    "depth": 2
  },
  {
    "id": 44917209,
    "by": "overbring_labs",
    "timeISO": "2025-08-15T21:02:06.000Z",
    "textPlain": "Because what difference would it make, given the bad quality of code?Also, is Claude Code free to use?The manual process has the upside that you get to see how the sausage is (badly) made. Otherwise, just YOLO it and put your trust in GenAI completely.Furthermore, if there is the interim step of pushing to GitHub to trigger the build & test workflow and see if it works on something other than Linux, is the choice of Vibe-Coding IDE really the limiting factor in the entire process?",
    "parent": 44916826,
    "depth": 2
  }
]