[
  {
    "id": 44897913,
    "by": "brainless",
    "timeISO": "2025-08-14T07:59:48.000Z",
    "textPlain": "I have thought of this issue quite a few times. I use Claude Code, Gemini CLI, etc. for all my new projects. Each of the typical CLAUDE.md/GEMINI.md file exists. I do not use MCPs. I ask agents to use `gh` command, all my work happens around Git/GitHub.But text is just that, while scripts are easier to rely on. I can prompt and document all mechanisms to, say, check code format. But once I add something, say a pre-commit hook, it becomes reliable.I am looking for a human readable (maybe renderable) way to codify patterns.",
    "parent": 44897098,
    "depth": 1
  },
  {
    "id": 44897781,
    "by": "khalic",
    "timeISO": "2025-08-14T07:39:59.000Z",
    "textPlain": "Cool concept that brings a little structure to prompts. I wouldn't use the semantic part that much, English is fine for this, but there is a real need for machine instructions. There is no need for an LLM guess if \"main\" is a function or a file for exemple.",
    "parent": 44897098,
    "depth": 1
  },
  {
    "id": 44897863,
    "by": "trehans",
    "timeISO": "2025-08-14T07:51:25.000Z",
    "textPlain": "I'm not sure what this is about, would anyone mind ELI5?",
    "parent": 44897098,
    "depth": 1
  },
  {
    "id": 44897422,
    "by": "Disposal8433",
    "timeISO": "2025-08-14T06:44:05.000Z",
    "textPlain": "The new COBOL. The next step is obviously to add syntax when you need to specify the type of the variables: put the type first, then the name and its value, and finish with a semicolon because it's fun, like \"int n = 0;\"",
    "parent": 44897098,
    "depth": 1
  },
  {
    "id": 44897142,
    "by": "benswerd",
    "timeISO": "2025-08-14T05:51:11.000Z",
    "textPlain": "How do you think about remote configurability?Stuff like a lot of this needing to be A/B tested, models hot swapped, and versioned in a way thats accessible to non technical people?How do you think about this in relation to tools like BAML?",
    "parent": 44897098,
    "depth": 1
  },
  {
    "id": 44897833,
    "by": "dmundhra",
    "timeISO": "2025-08-14T07:47:09.000Z",
    "textPlain": "How is it different than DSPy?",
    "parent": 44897098,
    "depth": 1
  },
  {
    "id": 44897282,
    "by": "machiaweliczny",
    "timeISO": "2025-08-14T06:20:01.000Z",
    "textPlain": "Why not library?",
    "parent": 44897098,
    "depth": 1
  },
  {
    "id": 44897391,
    "by": "mrs6969",
    "timeISO": "2025-08-14T06:39:10.000Z",
    "textPlain": "Nice try. We will eventually get there, but I think this can and need to get better.",
    "parent": 44897098,
    "depth": 1
  },
  {
    "id": 44897143,
    "by": "yewenjie",
    "timeISO": "2025-08-14T05:51:16.000Z",
    "textPlain": "What is a motivating use case that this solves?",
    "parent": 44897098,
    "depth": 1
  },
  {
    "id": 44897283,
    "by": "croes",
    "timeISO": "2025-08-14T06:20:09.000Z",
    "textPlain": "Next step, an LLM that writes convo-lang programs to programs with an LLM",
    "parent": 44897098,
    "depth": 1
  },
  {
    "id": 44897473,
    "by": "devops000",
    "timeISO": "2025-08-14T06:53:29.000Z",
    "textPlain": "Why not as a library in Ruby or Python?",
    "parent": 44897098,
    "depth": 1
  },
  {
    "id": 44897270,
    "by": "bn-l",
    "timeISO": "2025-08-14T06:18:29.000Z",
    "textPlain": "It’s a noisy / busy syntax. Just my own opinion.",
    "parent": 44897098,
    "depth": 1
  },
  {
    "id": 44897296,
    "by": "gnubee",
    "timeISO": "2025-08-14T06:21:55.000Z",
    "textPlain": "This looks a lot like another effective way of interacting with LLMs: english-lang. Some of english-lang 's features are that it can be used to convey meaning, and it's largely accepted (network effect!). I'm excited to see what convo brings to the table /s",
    "parent": 44897098,
    "depth": 1
  },
  {
    "id": 44897295,
    "by": "otabdeveloper4",
    "timeISO": "2025-08-14T06:21:43.000Z",
    "textPlain": "Riding the LLM hype train to its exhaustion.",
    "parent": 44897143,
    "depth": 2
  }
]