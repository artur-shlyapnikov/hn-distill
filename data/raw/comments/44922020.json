[
  {
    "id": 44925391,
    "by": "mdaniel",
    "timeISO": "2025-08-16T17:34:53.000Z",
    "textPlain": "> A method that returns Optional<T> may return null.projects that do this drive me bananasIf I had the emotional energy, I'd open a JEP for a new @java.lang.NonNullReference and any type annotated with it would be a compiler error to assign null to it  public interface Alpha {}\n  @java.lang.NonNullReference\n  public interface Beta {}\n\n  Alpha a = null; // ok\n  Beta b = null; // compiler error\n\njavac will tolerate this  Beta b;\n  if (Random.randBoolean()) {\n    b = getBeta();\n  } else {\n    b = newBeta();\n  }\n\nbut I would need to squint at the language specification to see if dead code elimination is a nicety or a formality  Beta b;\n  if (true) {\n    b = getBeta();\n  } else {\n    b = null; // I believe this will be elided and thus technically legal\n  }",
    "parent": 44922020,
    "depth": 1
  },
  {
    "id": 44924418,
    "by": "Someone",
    "timeISO": "2025-08-16T15:43:16.000Z",
    "textPlain": "> Java, C# and JS use UTF-16-like encoding for in-memory stringThat’s incorrect for Java, possibly also for C# and JS.In any language where strings are opaque enough types [1], the in-memory representation is an implementation detail. Java has been such a language since release 9 (https://openjdk.org/jeps/254)[1] The ‘enough’ is because some languages have fully opaque types, but specify efficiency of some operations and through it, effectively proscribe implementation details. Having a foreign function interface also often means implementation details cannot be changed because doing that would break backwards compatibility.> JS use floating point for all numbers. The max accurate integer is 2⁵³−1That is incorrect. Much larger integers can be represented exactly, for example 2¹⁰⁰.What is true is that 2⁵³−1 is the largest integer n such that n-1, n, and n+1 can be represented exactly in an IEEE double. That, in turn, means n == n-1 and n == n+1 both will evaluate to false, as expected in ‘normal’ arithmetic.",
    "parent": 44922020,
    "depth": 1
  },
  {
    "id": 44925527,
    "by": "OptionOfT",
    "timeISO": "2025-08-16T17:53:05.000Z",
    "textPlain": "> Some routers and firewall silently kill idle TCP connections without telling application. Some code (like HTTP client libraries, database clients) keep a pool of TCP connections for reuse, which can be silently invalidated. To solve it you can configure system TCP keepalive. For HTTP you can use Connection: keep-alive Keep-Alive: timeout=30, max=1000 header.Once a TCP connection has been established there is no state on routers in between the 2 ends of the connection. The issue here is firewalls / NAT entries timing out. And indeed, no RSTs are sent.We had the issue in K8s with the conntrack module set too low.Now, you can try to put in an HTTP Keep-Alive, but that will not help you. The HTTP Keep-Alive is merely for connection re-use at the HTTP level, i.e. it doesn't close the connection: https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/...An HTTP Keep-Alive does not generate any packages, it merely postpones the close.A TCP Keep-Alive generates packages which resets the timers.",
    "parent": 44922020,
    "depth": 1
  },
  {
    "id": 44924575,
    "by": "jmull",
    "timeISO": "2025-08-16T16:00:38.000Z",
    "textPlain": "This looks like not so much traps, but a list of things the author has learned.Much of it would only apply in certain relatively narrow contexts, but the contexts aren't necessarily mentioned.Some of it appears to be just wrong.I guess I'm saying: I would not take this literally, but as something almost like a stream-of-consciousness.",
    "parent": 44922020,
    "depth": 1
  },
  {
    "id": 44922705,
    "by": "andunie",
    "timeISO": "2025-08-16T12:28:40.000Z",
    "textPlain": "That's a nice compendium of tips and useful information.I wonder if anyone can learn from this. I feel like I only understood what I already knew, or at least was very close to knowing. That's the same thing that happens with teaching manuals about any topic: they're organized in a way that makes sense and it's easy for people who already know the topics, but often very bad at teaching the same topics to an audience that doesn't know anything.",
    "parent": 44922020,
    "depth": 1
  },
  {
    "id": 44925922,
    "by": "nayuki",
    "timeISO": "2025-08-16T18:45:05.000Z",
    "textPlain": "Largely a good listicle. Some feedback:> Unicode unification. Different characters in different language use the same code point. Different languages' font variants render the same code point differently. 語This isn't a trap. The given example character means the same thing in Chinese and Japanese, and the Japanese version was imported from China. People from both languages recognize both font variants as the same conceptual character.The author is making it sound like the letter 'A' in English should have a different code point than an 'A' in French. Or that a lowercase 'a' with the top tail should be a different character than a lowercase 'a' without the top tail.Anyway, this is discussed at length in https://en.wikipedia.org/wiki/Han_unification> There is a negative zero -0.0 which is different to normal zero. The negative zero equals zero when using floating point comparision. Normal zero is treated as \"positive zero\".And there are two ways to distinguish negative zero from normal zero: By their integer bit patterns, or by the fact that 1.0/-0.0 == -Inf vs. 1.0/0.0 == +Inf.> It's recommended to configure the server's time zone as UTC.Big yes. I use UTC for servers, logs, photos, and anything that is worth archiving and timestamping properly. Local time is only for colloquial use.> For integer (low + high) / 2 may overflow. A safer way is low + (high - low) / 2Yes, but if low and high could be negative numbers, then you've just shifted the overflow to a different range. This matters for general binary search over an integer range, as opposed to unsigned binary search over an array.> C/C++I'm going to throw in one of my lists of pitfalls - just using integer types and arithmetic correctly in C/C++ is a massive developer trap. That's like the most basic thing in programming. https://www.nayuki.io/page/summary-of-c-cpp-integer-rules> Rebase can rewrite history\"Can\" is a weasel word; rebase does nothing but rewrite history.",
    "parent": 44922020,
    "depth": 1
  },
  {
    "id": 44922938,
    "by": "skobes",
    "timeISO": "2025-08-16T12:52:35.000Z",
    "textPlain": "The first \"trap\" on the page says \"min-width: auto makes min width determined by content\", but this is false outside of flex/grid.From MDN: \"For block boxes, inline boxes, inline blocks, and all table layout boxes auto resolves to 0.\"https://developer.mozilla.org/en-US/docs/Web/CSS/min-width",
    "parent": 44922020,
    "depth": 1
  },
  {
    "id": 44923495,
    "by": "FFFXXX",
    "timeISO": "2025-08-16T13:57:39.000Z",
    "textPlain": "The part about C# volatile accesses using release-acquire ordering seems to be wrong if I read the C# docs correctly.\"There is no guarantee of a single total ordering of volatile writes as seen from all threads of execution\"https://learn.microsoft.com/en-us/dotnet/csharp/language-ref...",
    "parent": 44922020,
    "depth": 1
  },
  {
    "id": 44922737,
    "by": "ngruhn",
    "timeISO": "2025-08-16T12:33:10.000Z",
    "textPlain": "A recent trap for me:Regex semantics is subtly different across languages. E.g. a{,3} matches between 0 and 3 \"a\" characters in Python. In JavaScript it matches the literal string \"a{,3}\".",
    "parent": 44922020,
    "depth": 1
  },
  {
    "id": 44925170,
    "by": "koromak",
    "timeISO": "2025-08-16T17:06:13.000Z",
    "textPlain": "Does anyone truly understand all the little edge cases with CSS?I've write tons and tons of CSS, have done for a decade. I don't sit and think about the exact interactions, I just know a couple things that might work if I'm getting something unexpected.I don't really see it possible to commit that to memory, unless I literally start working on an interpreter myself.",
    "parent": 44922020,
    "depth": 1
  },
  {
    "id": 44925424,
    "by": "upghost",
    "timeISO": "2025-08-16T17:40:22.000Z",
    "textPlain": "> Unset variables. If DIR is unset, rm -rf $DIR/ becomes rm -rf /. Using set -u can make bash error when encountering unset variable.sweet mercy :OSomeone call the Inquisition",
    "parent": 44922020,
    "depth": 1
  },
  {
    "id": 44922803,
    "by": "QuadmasterXLII",
    "timeISO": "2025-08-16T12:39:53.000Z",
    "textPlain": "CSS and C++ both have the “pick a subset and enforce that, or suffer” nature. On my to-do list: make a github action that requires manual override to merge any pull request with a css attribute not already present",
    "parent": 44922020,
    "depth": 1
  },
  {
    "id": 44924558,
    "by": "bradfitz",
    "timeISO": "2025-08-16T15:58:23.000Z",
    "textPlain": "> Golang use UTF-8 for in-memory string.Nope. It’s just bytes with no encoding.https://go.dev/blog/strings",
    "parent": 44922020,
    "depth": 1
  },
  {
    "id": 44924997,
    "by": "semperMade",
    "timeISO": "2025-08-16T16:44:35.000Z",
    "textPlain": "[dead]",
    "parent": 44922020,
    "depth": 1
  },
  {
    "id": 44925625,
    "by": "Spivak",
    "timeISO": "2025-08-16T18:02:52.000Z",
    "textPlain": "I question the wisdom of even having Optional<T> in a language with nulls. It would raise some eyebrows if a function in Python returned an Optional type object rather than T | None. You have to do a check either way unless you're doing some cute monad-y stuff.",
    "parent": 44925391,
    "depth": 2
  },
  {
    "id": 44924698,
    "by": "debugnik",
    "timeISO": "2025-08-16T16:13:31.000Z",
    "textPlain": "> possibly also for C# and JSThe representation for C# is very much fixed, as it allows, and very commonly uses, direct access into the string buffer as a ReadOnlySpan<char> or a raw char pointer, where char is the type of UTF-16 codepoints.JS could maybe get away with it.",
    "parent": 44924418,
    "depth": 2
  },
  {
    "id": 44925924,
    "by": "seangrogg",
    "timeISO": "2025-08-16T18:45:25.000Z",
    "textPlain": "Yeah, I think they didn't mean max \"accurate\" integer and rather meant max \"safe\" integer.",
    "parent": 44924418,
    "depth": 2
  },
  {
    "id": 44926223,
    "by": "mikojan",
    "timeISO": "2025-08-16T19:22:24.000Z",
    "textPlain": "> > Java, C# and JS use UTF-16-like encoding for in-memory string>> That’s incorrect for Java,Maybe so, technically, but if you Base64 encode a string in a language that uses UTF-8 (or another UTF-16 with another endian) and decode it in Java, Java's UTF-16 representation will be the problem you will be dealing with.",
    "parent": 44924418,
    "depth": 2
  },
  {
    "id": 44924891,
    "by": "scarface_74",
    "timeISO": "2025-08-16T16:34:08.000Z",
    "textPlain": "I started to say something about C# strings and then I remembered the clusterfuck when it came to Windows development and strings and  depending on which API you call, a string is represented by one of a dozen different ways.https://stackoverflow.com/questions/689211/interop-sending-s...",
    "parent": 44924418,
    "depth": 2
  },
  {
    "id": 44922777,
    "by": "skydhash",
    "timeISO": "2025-08-16T12:37:12.000Z",
    "textPlain": "> with teaching manuals about any topic: they're organized in a way that makes sense and it's easy for people who already know the topicI think that the reason for a manual existence. To have a written record so we don't have to trust our memory. This is what most unix manuals are. You already know what the software can do, you just need to remember the specificity on how to get something done.> often very bad at teaching the same topics to an audience that doesn't know anything.What you need then is a tutorial (beginner seeking to learn) or a guide (beginner/intermediate seeking to do). Manuals in this case only serve to have better questions (Now you know what you don't know).",
    "parent": 44922705,
    "depth": 2
  },
  {
    "id": 44923744,
    "by": "jfengel",
    "timeISO": "2025-08-16T14:27:58.000Z",
    "textPlain": "CSS cascade for text properties more or less makes sense.I have been unable to comprehend CSS layout from any perspective: page designer, implementer, user, anything. It must have someone in mind but I have no idea who I that is.",
    "parent": 44922938,
    "depth": 2
  },
  {
    "id": 44923030,
    "by": "diggan",
    "timeISO": "2025-08-16T13:04:22.000Z",
    "textPlain": "I guess the first trap should really be: \"You cannot read any CSS property in isolation, as just like what the name implies, defaults and what values end up doing cascades through all the rules your document ends up using\"",
    "parent": 44922938,
    "depth": 2
  },
  {
    "id": 44923584,
    "by": "charleslmunger",
    "timeISO": "2025-08-16T14:08:38.000Z",
    "textPlain": ">A volatile write operation prevents earlier memory operations on the thread from being reordered to occur after the volatile write. A volatile read operation prevents later memory operations on the thread from being reordered to occur before the volatile readLooks like release/acquire to me? A total ordering would be sequential consistency.",
    "parent": 44923495,
    "depth": 2
  },
  {
    "id": 44923895,
    "by": "dataflow",
    "timeISO": "2025-08-16T14:43:59.000Z",
    "textPlain": "Somewhat off topic, but what is a realistic example of where you need atomics with sequential consistency? Like, what useful data structure or pattern requires it? I feel like I've seen every other ordering except that one (and consume) in real world code.",
    "parent": 44923495,
    "depth": 2
  },
  {
    "id": 44922820,
    "by": "skydhash",
    "timeISO": "2025-08-16T12:41:18.000Z",
    "textPlain": "Regex is more a technique than an actual specification. It would be best to find the time to go and read an introductory book about Theory of Computation where they explain the underlying mechanism.",
    "parent": 44922737,
    "depth": 2
  },
  {
    "id": 44922933,
    "by": "danhau",
    "timeISO": "2025-08-16T12:51:54.000Z",
    "textPlain": "I always use regex101 to develop my regexes. It allows you to switch between different engines.",
    "parent": 44922737,
    "depth": 2
  },
  {
    "id": 44923066,
    "by": "PhilipRoman",
    "timeISO": "2025-08-16T13:08:15.000Z",
    "textPlain": "Honorable mention to [a-z], gotta be my favorite trap",
    "parent": 44922737,
    "depth": 2
  },
  {
    "id": 44925363,
    "by": "yurishimo",
    "timeISO": "2025-08-16T17:29:32.000Z",
    "textPlain": "I think there can be a different way to think about CSS that can help with that feeling of never understanding it all. Recently I’ve heard people influential in the CSS world describe it as a “suggestion” to the browser. The browser has its own styles, the user might have some custom stylesheet on top of the browser’s version, extensions, etc etc and at some point CSS is really more a long list of “suggestions” about how the site should look.If you embrace that idea to the fullest, you can create some interesting designs/patterns that can be more resilient. The “downside” is that this way of writing css will likely made the pixel perfect head of the marketing department hate you unless they also write code.I think it’s also okay to say that some ways of writing css just aren’t relevant anymore. A good parallel in mind is building construction and general carpentry. These days, a quick 2x4 stud wall or insulated concrete forms is fast, cheap, and standardized around the world. However, many craftspeople still exist that will create beautiful joinery for what is ultimately a simple thing, but we can appreciate that art standalone. With CSS, I don’t suspect we will ever need to go back to floats or crazy background images or whatever but it’s nice that those tools are still there for not only the sake of back compat, but also as a way to tinker and “craft” something bespoke for a special project or just because you like it. Education will eventually catch up and grid and flexbox will keep gaining popularity until we decide that it’s too complicated and come up with some new algorithm. That can all be true though and you can bring value as a developer without knowing every single aspect to the public API.",
    "parent": 44925170,
    "depth": 2
  },
  {
    "id": 44925774,
    "by": "AnimalMuppet",
    "timeISO": "2025-08-16T18:26:13.000Z",
    "textPlain": "Instead, say rm -rf $DIR\n\nThat is, skip the trailing slash.  Then if $DIR is not set, it becomes an invalid command, because no file names were supplied.",
    "parent": 44925424,
    "depth": 2
  },
  {
    "id": 44925455,
    "by": "dschuessler",
    "timeISO": "2025-08-16T17:43:41.000Z",
    "textPlain": "I am unsure how this is supposed to work for CSS. To my knowledge, most CSS properties cannot be substituted for each other. If the subset to be enforced is \"CSS properties already present\", what is a developer supposed to do if their CSS property is not already present? Change the design?",
    "parent": 44922803,
    "depth": 2
  },
  {
    "id": 44925152,
    "by": "ivanjermakov",
    "timeISO": "2025-08-16T17:04:30.000Z",
    "textPlain": "There is no such thing as \"just bytes\" when it comes to Unicode. UTF-8 is a way to represent Unicode codepoints in binary.But I agree that author's statement is wrong. Go stings are equivalent to byte slices.",
    "parent": 44924558,
    "depth": 2
  }
]