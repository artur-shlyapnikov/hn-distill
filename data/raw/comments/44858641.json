[
  {
    "id": 44859028,
    "by": "rikafurude21",
    "timeISO": "2025-08-10T22:52:29.000Z",
    "textPlain": "He freely admits that the LLM did his job way faster than he could, but then claims that he doesnt believe it could make him 10x more productive. He decides that he will not use his new \"superpower\" because the second prompt he sent revealed that the code had security issues, which the LLM presumably also fixed after finding them. The fact that the LLM didnt consider those issues when writing his code puts his mind at rest about the possibility of being replaced by the LLM. Did he consider that the LLM wouldve done it the right way after the first message if prompted correctly? Considering his \"personal stance on ai\" I think he was going into this experience expecting exactly the result he got to reinforce his beliefs. Unironically enough thats exactly the type of person who would get replaced, because as a developer if youre not using these tools youre staying behind",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44859224,
    "by": "1024core",
    "timeISO": "2025-08-10T23:12:09.000Z",
    "textPlain": "I have been using LLMs for coding for the past few months.After initial hesitation and fighting the the LLMs, I slowly changed my mode from adversarial to \"it's a useful tool\". And now I find that I spend less time thinking about the low-level stuff (shared pointers, move semantics, etc. etc.) and more time thinking about the higher-level details. It's been a bit liberating, to be honest.I like it now.  It is a tool, use it like a tool. Don't think of \"super intelligence\", blah blah. Just use it as a tool.",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44859104,
    "by": "cogman10",
    "timeISO": "2025-08-10T22:59:46.000Z",
    "textPlain": "A problem I'm seeing more and more in my code reviews is velocity being favored over correctness.I recently had a team member submit code done primarily by an LLM that was clearly wrong.  Rather than verifying that the change was correct, they rapid fired a cr and left it up to the team to spot problems.They've since pushed multiple changes to fix the initial garbage of the LLM because they've adopted \"move fast and break things\".  The appearance of progress without the substance.",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44859291,
    "by": "hirvi74",
    "timeISO": "2025-08-10T23:19:45.000Z",
    "textPlain": "I'm already lazy and getting progressively stupider over time, so LLMs can't make me any worse.I also think it's a matter of how one uses them. I do not use any of the LLMs via their direct APIs. I do not want LLMs in any of my editors. So, when I go to ask questions in with web app, it takes a bit more friction. I'm honestly an average at best programmer, and I do not really need LLMs for much. I mainly use LLMs to just ask trivial questions that I could have googled. However, LLMs are not rife with SEO ads and click-bait articles (yet).",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44859126,
    "by": "shinycode",
    "timeISO": "2025-08-10T23:01:55.000Z",
    "textPlain": "A lot of people is using the tool in a wrong way. It’s massively powerful, there’s a lot of promisses but it’s not magic. The tool works on words and statistics. Better be really thoughtful and precise beforehand. \nNo one notices that Cursor or Claude code is not asking questions to clarify. It’s just diving right in. We humans ask ourselves a lot of questions before diving in so when we do it’s really precise. \n When we use CC with a really great level of precision on a well defined context the probability of answering right goes up. That’s the new job we have with this tool.",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44859086,
    "by": "arrowsmith",
    "timeISO": "2025-08-10T22:58:00.000Z",
    "textPlain": "Congratulations, you tried AI and you immediately noticed all the same problems that everyone else notices. No-one is claiming the technology's perfect.How many more times is someone going to write this same article?",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44858990,
    "by": "TheCleric",
    "timeISO": "2025-08-10T22:47:27.000Z",
    "textPlain": "I am so glad someone else has this same experience as me because everyone else seems all in and I feel like I’m staring at an emperor without clothes.",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44859239,
    "by": "mockingloris",
    "timeISO": "2025-08-10T23:13:56.000Z",
    "textPlain": "AI can churn out usable code faster than it takes for my cup garri to soak(2-3 mins) doesn't mean it should be used that way.Software and technology takes mastery; imagine the string manipulation syntax for different programming languages. There are many ways to achieve a business objective. Choosing the right language/coding style for the specific use case and expected outcome takes iterations and planning.AI still in infancy yet it has replaced and disrupted whole niche markets and it's just the beginning. The best any dev can do in this context is sharpen their use of it and that becomes a superpower; well defined context and one's own good grasp of the tech stack being worked on.Context: \nI still lookup rust docs and even prompt for summaries and bullet point facts about rust idioms/concepts that I am yet to internalize. JS is what I primarily write code in but, currently learning rust as I work on a passion project.└── Dey well",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44859099,
    "by": "xwowsersx",
    "timeISO": "2025-08-10T22:58:52.000Z",
    "textPlain": "I think one of the reasons \"coding with AI\" conversations can feel so unproductive, or at least vague, to me, is that people aren't talking about the same thing. For some, it means \"vibe coding\" ... tossing quick prompts into something like Cursor, banging out snippets, and hoping it runs. For others, it's using AI like a rubber duck: explaining problems, asking clarifying questions, maybe pasting in a few snippets. And then there's the more involved mode, where you're having a sustained back-and-forth with multiple iterations and refinements. Without recognizing those distinctions, the debate tends to talk past itself.For me, anything that feels like anything remotely resembling a \"superpower\" with AI starts with doing a lot of heavy lifting upfront. I spend significant time preparing the right context, feeding it to the model with care, and asking very targeted questions. I'll bounce ideas back and forth until we've landed on a clear approach. Then I'll tell the model exactly how I want the code structured, and use it to extend that pattern into new functionality. In that mode, I'm still the one initializing the design and owning the understanding...AI just accelerates the repetitive work.In the end, I think the most productive mindset is to treat your prompt as the main artifact of value, the same way source code is the real asset and a compiled binary is just a byproduct. A prompt that works reliably requires a high degree of rigor and precision -- the kind of thinking we should be doing anyway, even without AI. Measure twice, cut once.If you start lazy, yes...AI will only make you lazier. If you start with discipline and clarity, it can amplify you. Which I think are traits that you want to have when you're doing software development even if you're not using AI.Just my experience and my 2c.",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44859227,
    "by": "Havoc",
    "timeISO": "2025-08-10T23:12:31.000Z",
    "textPlain": "I’d definitely be wary of vibe coding anything that is internet facing. But at same time there has to be some middle ground here too - bit of productivity gains without any significant tangible downside. Even if that middle ground is just glorified auto complete",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44859214,
    "by": "sampton",
    "timeISO": "2025-08-10T23:11:09.000Z",
    "textPlain": "In the past few months I have used AI to read more open source projects than I ever had. Tackled projects in Rust that I was too intermediated to start. AI doesn't make you lazy.",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44859270,
    "by": "slowdog",
    "timeISO": "2025-08-10T23:17:02.000Z",
    "textPlain": "It's a reasonable take from the author, but the argument that you shouldn't use a tool you don't understand cuts both ways. Avoiding powerful tools can be just as much of a trap as using them blindly.Like any tool, there's a right and wrong time to use an LLM. The best approach is to use it to go faster at things you already understand and use it as an aid to learn things you don't but don't blindly trust it. You still need to review the code carefully because you're ultimately responsible for it, your name is forever on it. You can't blame an LLM when your code took down production, you shipped it.It’s a double-edged sword: you can get things done faster, but it's easy to become over-reliant, lazy, and overestimate your skills. That's how you get left behind.The old advice has never been more relevant: \"stay hungry.\"",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44859123,
    "by": "ronreiter",
    "timeISO": "2025-08-10T23:01:39.000Z",
    "textPlain": "AI will cause senior developers to become 10 times more effective.\nAI will cause junior developers to become 10 times less effective. And that's when taking into account the lost productivity of the senior developers who need to review their code.Unfortunately for the writer, he will probably get fired because of AI. But not because AI will replace him - because seniors will.",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44859096,
    "by": "kamens",
    "timeISO": "2025-08-10T22:58:36.000Z",
    "textPlain": "The hard way solves this for me / I still get to vibe as much as I want: https://kamens.com/blog/code-with-ai-the-hard-way",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44859217,
    "by": "Jcampuzano2",
    "timeISO": "2025-08-10T23:11:24.000Z",
    "textPlain": "I find it interesting how many people complain that AI produces code that mostly works but overlooks something, or that it was able to generate something workable but wasn't perfect and didn't catch every single thing on it's first try.For fucks sake it probably got you to the same first draft you would have gotten to yourself in 10x less time. In fact there plenty of times where it probably writes a better first draft than you would have. Then you can iterate from there, review and scrutinize it just as much as you should be doing with your own code.Last I checked the majority of us don't one shot the code we write either. We write it once, then iterate on things we might have missed. As you get better you prompt instinctively to include those same edge cases you would have missed when you were less experienced.Everybody has this delusion that your productivity comes from the AI writing perfect code from step 1. No, do the same software process you normally should be doing, but get to the in between steps many times faster.",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44859057,
    "by": "cryptoz",
    "timeISO": "2025-08-10T22:55:26.000Z",
    "textPlain": "I really think people are approaching LLMs wrong when it comes to code. Just directing an agent to make you something you’re unfamiliar with is always going to end up with this. It’s much better to have a few hours chat with the LLM and learn some about the topic, multiple times over many days, and then start.And ask questions and read all the code and modify it yourself; and read the compile errors and try to fix then yourself; etc. Come back to the LLM when you’re stuck.Having the machine just build you something from a two sentence prompt is lazy and you’ll feel lazy and bad.Learn with it and improve with it. You’ll end up with more knowledge and a code base for a project that you do (at least somewhat) understand, and you’ll have a project that you wouldn’t have attempted otherwise.",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44859054,
    "by": "hazek112",
    "timeISO": "2025-08-10T22:55:06.000Z",
    "textPlain": "Haha I encountered thisBut maybe AI is just better than I ever was at front end and reactMaybe I should do something else",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44859171,
    "by": "fennec-posix",
    "timeISO": "2025-08-10T23:06:15.000Z",
    "textPlain": "I see LLMs as a force multiplier. It's not going to write entire projects for me, but it'll assist with \"how do i do x with y\" kind of problems. At the end of the day I still understand the codebase and know where its faults lie.",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44858919,
    "by": "j45",
    "timeISO": "2025-08-10T22:38:55.000Z",
    "textPlain": "> \"When I tried to fix the security issues, I quickly realized how this whole thing was a trap. Since I didn't wrote it, I didn't have a good bird's eye view of the code and what it did. I couldn't make changes quickly, which started to frustrated me. The easiest route was asking the LLM to do the fixes for me, so I did. More code was changed and added. It worked, but again I could not tell if it was good or not.\"Maintaining your own list of issues to look for and how to resolve them, or prevent them outright is almost mandatory, and also doubles as a handy field reference guide for what gaps exist in applying LLM's to your particular use when someone higher up asks.",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44859069,
    "by": "robotbikes",
    "timeISO": "2025-08-10T22:56:25.000Z",
    "textPlain": "X you e you were",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44859081,
    "by": "ants_everywhere",
    "timeISO": "2025-08-10T22:57:39.000Z",
    "textPlain": "Unfortunately the author is competing with 100% of other devs who are using AI and the vast majority of whom are not becoming lazy or stupid.",
    "parent": 44858641,
    "depth": 1
  },
  {
    "id": 44859206,
    "by": "avidiax",
    "timeISO": "2025-08-10T23:10:38.000Z",
    "textPlain": "> Did he consider that the LLM would've done it the right way after the first message if prompted correctly?This is an argument used constantly by AI advocates, and it's really not as strong as they seem to think.*Yes, there exists some prompt that produces the desired output. Reductio ad absurdum, you can just prompt the desired code and tell it to change nothing.Maybe there is some boilerplate prompt that will tell the LLM to look for security, usability, accessibility, legal, style, etc. issues and fix them. But you still have to review the code to be sure that it followed everything and made the correct tradeoff, and that means that you, the human, has to understand the code and have the discernment to identify flaws and adjust the prompt or rework the code in steps.It's precisely that discernment that the author lacks for certain areas and which no \"better\" prompting will obviate. Unless you can be sure that LLMs always produce the best output for a given prompt, and the given prompt is the best it can be, you will still need a discerning human reviewer.* Followed closely by: \"Oh, that prompt produced bad results 2 weeks ago? AI moves fast, I'm sure it's already much better now, try again! The newest models are much more capable.\"",
    "parent": 44859028,
    "depth": 2
  },
  {
    "id": 44859089,
    "by": "stavros",
    "timeISO": "2025-08-10T22:58:07.000Z",
    "textPlain": "Eeeh, the LLM wouldn't have done it correctly, though. I use LLMs exclusively for programming these days, and you really need to tell them the architecture and how to implement the features, and then review the output, otherwise it'll be wrong.They are like an overeager junior, they know how to write the code but they don't know how to architect the systems or to avoid bugs. Just today I suspected something, asked the LLM to critique its own code, paying attention to X Y Z things, and it found a bunch of unused code and other brittleness. It fixed it, with my guidance, but yeah, you can't let your guard down.Of course, as you say, these are the tools of the trade now, and we'll have to adapt, but they aren't a silver bullet.",
    "parent": 44859028,
    "depth": 2
  },
  {
    "id": 44859102,
    "by": "only-one1701",
    "timeISO": "2025-08-10T22:59:42.000Z",
    "textPlain": "I use (and like) AI, but “you failed the AI by not prompting correctly” strikes me as silly every time I hear it. It reminds me of the meme about programming drones where the conditional statement “if (aboutToCrash)” is followed by the block “dont()”.",
    "parent": 44859028,
    "depth": 2
  },
  {
    "id": 44859167,
    "by": "0xsn3k",
    "timeISO": "2025-08-10T23:05:36.000Z",
    "textPlain": "> Did he consider that the LLM wouldve done it the right way after the first message if prompted correctly?I think the article is implicitly saying that an LLM that's skilled enough to write good code should have done it \"the right way\" without extra prompting. If LLMs can't write good code without human architects guiding it, then I doubt we'll ever reach the \"10x productivity\" claims of LLM proponents.I've also fell into the same trap of the author in assuming that because an LLM works well when guided to do some specific task, that it will also do well writing a whole system from scratch or doing some large reorganization of a codebase. It never goes well, and I end up wasting hours arguing with an LLM instead of actually thinking about a good solution and then implementing it.",
    "parent": 44859028,
    "depth": 2
  },
  {
    "id": 44859161,
    "by": "girvo",
    "timeISO": "2025-08-10T23:05:07.000Z",
    "textPlain": "> which the LLM presumably also fixed after finding themIn my experience: not always, and my juniors aren't experienced enough to catch it, and the LLM at this point doesn't \"learn\" from our usage properly (and we've not managed to engineer a prompt good enough to solve it yet), so its a recurring problem.> if prompted correctlyAt some point this becomes \"draw the rest of the owl\" for me, this is a non-trivial task at scale and with the quality bar required, at least with the latest tools. Perhaps it will change.We're still using them, they still have value.",
    "parent": 44859028,
    "depth": 2
  },
  {
    "id": 44859208,
    "by": "jimbokun",
    "timeISO": "2025-08-10T23:10:48.000Z",
    "textPlain": "Show me your data.The only study I’ve seen so far on LLMs and productivity, showed that developers using an LLM were LESS productive than those who didn’t use them.",
    "parent": 44859028,
    "depth": 2
  },
  {
    "id": 44859246,
    "by": "bravesoul2",
    "timeISO": "2025-08-10T23:14:43.000Z",
    "textPlain": "He made the cardinal AI mistake: getting AI to get a job you cant do yourself. AI is great to speed you up, but you cant trust it to think for you.",
    "parent": 44859028,
    "depth": 2
  },
  {
    "id": 44859132,
    "by": "pavel_lishin",
    "timeISO": "2025-08-10T23:02:25.000Z",
    "textPlain": "> the second prompt he sent revealed that the code had security issues, which the LLM presumably also fixed after finding them.Maybe. Or maybe a third prompt would have found more. And more on the fourth. And none on the fifth, despite some existing.",
    "parent": 44859028,
    "depth": 2
  },
  {
    "id": 44859296,
    "by": "fzeroracer",
    "timeISO": "2025-08-10T23:20:13.000Z",
    "textPlain": "> Did he consider that the LLM wouldve done it the right way after the first message if prompted correctly?And how do you know if it did it the right way?",
    "parent": 44859028,
    "depth": 2
  },
  {
    "id": 44859055,
    "by": "mockingloris",
    "timeISO": "2025-08-10T22:55:19.000Z",
    "textPlain": "Your last sentence exactly! With a bit of tonic.",
    "parent": 44859028,
    "depth": 2
  },
  {
    "id": 44859056,
    "by": "sieabahlpark",
    "timeISO": "2025-08-10T22:55:25.000Z",
    "textPlain": "[dead]",
    "parent": 44859028,
    "depth": 2
  },
  {
    "id": 44859305,
    "by": "skirmish",
    "timeISO": "2025-08-10T23:21:52.000Z",
    "textPlain": "Likely driven by management who count number of PRs per quarter and number of lines changed and consider him a 10x engineer (soon to be promoted).",
    "parent": 44859104,
    "depth": 2
  },
  {
    "id": 44859244,
    "by": "anon7725",
    "timeISO": "2025-08-10T23:14:36.000Z",
    "textPlain": "> The appearance of progress without the substance.This is highly rewarded in many (most?) corporate environments, so that’s not surprising.When’s the last time you heard “when will it be done?”When’s the last time you heard “can you demonstrate that it’s right|robust|reliable|fast enough|etc?”",
    "parent": 44859104,
    "depth": 2
  },
  {
    "id": 44859279,
    "by": "bravesoul2",
    "timeISO": "2025-08-10T23:18:05.000Z",
    "textPlain": "Yes that is how the code base turns to poop and the good people leave.",
    "parent": 44859104,
    "depth": 2
  },
  {
    "id": 44859221,
    "by": "exasperaited",
    "timeISO": "2025-08-10T23:12:02.000Z",
    "textPlain": "Move fast and fire them?",
    "parent": 44859104,
    "depth": 2
  },
  {
    "id": 44859139,
    "by": "loloquwowndueo",
    "timeISO": "2025-08-10T23:03:02.000Z",
    "textPlain": "As many times as “if you’re not using AI your developer career is over” articles come out as well.",
    "parent": 44859086,
    "depth": 2
  },
  {
    "id": 44859121,
    "by": "z3c0",
    "timeISO": "2025-08-10T23:01:36.000Z",
    "textPlain": "How many more times is someone going to write this same comment?",
    "parent": 44859086,
    "depth": 2
  },
  {
    "id": 44859077,
    "by": "verdverm",
    "timeISO": "2025-08-10T22:57:13.000Z",
    "textPlain": "The truth often lies somewhere in betweenMy personal experience indicates this, AI enhances me but cannot replace meBeen doing something closer to pair programming to see what \"vibe\" coding is all about (they are not up to being left unattended)See recent commits to this repohttps://github.com/blebbit/at-mirror/commits/main/",
    "parent": 44858990,
    "depth": 2
  },
  {
    "id": 44859072,
    "by": "CharlesW",
    "timeISO": "2025-08-10T22:56:41.000Z",
    "textPlain": "What were you using? Did you use it for a real project? I ask because you're going to have a vastly different experience with Cursor than with Claude Code, for example.",
    "parent": 44858990,
    "depth": 2
  },
  {
    "id": 44859168,
    "by": "ath3nd",
    "timeISO": "2025-08-10T23:05:42.000Z",
    "textPlain": "You are not alone. There are plenty of us, see here:- Claude Code is a Slot Machine https://news.ycombinator.com/item?id=44702046- GPTs and Feeling Left Behind: https://news.ycombinator.com/item?id=44851214- I also used the Emperor/clothes metaphor: https://news.ycombinator.com/item?id=44854649And just so we are clear, in the only current actual study measuring productivity of experienced developers so far, it actually led to 19% decline in productivity. https://metr.org/blog/2025-07-10-early-2025-ai-experienced-o...So, if the study showed experienced developers had a decline in productivity, and some developers claim gains in theirs, there is high chance that the people reporting the gains are...less experienced developers.See, some claim that we are not using LLMs right (skills issue on our part) and that's why we are not getting the gains they do, but maybe it's the other way around: they are getting gains from LLMs because they are not experienced developers (skills issue on their part).",
    "parent": 44858990,
    "depth": 2
  },
  {
    "id": 44859289,
    "by": "ath3nd",
    "timeISO": "2025-08-10T23:19:44.000Z",
    "textPlain": "> AI will cause senior developers to become 10 times more effectiveBold statement! In the real world, senior developers were actually 19% less effective by using LLMs in the only study up to date.https://metr.org/blog/2025-07-10-early-2025-ai-experienced-o...Very brave to have an edgy opinion based on vibes though.> Unfortunately for the writer, he will probably get fired because of AI. But not because AI will replace him - because seniors willHere is another prediction for you. In the current real world LLMs create mountains of barely working slop on a clean project, and slowly pollute it with trash feature after feature. The LGTM senior developers will just keep merging and merging until the project becomes such a tangled mess that the LLM takes billion tokens to fix it or it outright can't, and these so called senior developers had their skills deteriorate to such an extent that they'd need to call the author of the article to save them from the mess they created with their fancy autocomplete.",
    "parent": 44859123,
    "depth": 2
  },
  {
    "id": 44859129,
    "by": "CjHuber",
    "timeISO": "2025-08-10T23:02:12.000Z",
    "textPlain": "The problem is not in making something you're unfamiliar with. The problem is doing something that your familiar with, trying out an LLM to see if it can assist you, then you are kind of impressed for the first few prompts so you let it off the leash and suddently you find yourself in a convoluted codebase you would never write that way with so many weird often nonsensical things different to how you normally approach them (or any sane person would) so that you can basically throw it all in the trash. The only way this can be avoided is by diligently checking every single diff the LLM makes. but let's be honest, its just so damn inviting to let it off the leash for a moment.I think the LLM accounting benchmark is a good analogy. The first few prompts are like the first month in accounting. the books are correct before so the LLM has a good start. in the accounting benchmark then the miscalculations compound as do the terrible practices in the codebase.",
    "parent": 44859057,
    "depth": 2
  },
  {
    "id": 44859074,
    "by": "zackify",
    "timeISO": "2025-08-10T22:57:02.000Z",
    "textPlain": "Completely agree",
    "parent": 44859057,
    "depth": 2
  },
  {
    "id": 44859131,
    "by": "mockingloris",
    "timeISO": "2025-08-10T23:02:18.000Z",
    "textPlain": "Very well said. Just because AI can churn out a usable code project as fast as it takes for my cup garri to soak(3 mins) doesn't mean it should be used that way.It takes mastery, just like with actual programming syntax. There are many ways to achieve a business objective. Choosing the right one for the specific use case and expected outcome takes iterations.AI HAS replaced whole niche markets and it's just the beginning. The best any dev can do in this context is sharpen their use of it. That becomes a superpower; well defined context and one's own good grasp of the tech stack being worked on.Context: I still lookup rust docs and even prompt for summaries and bullet point facts about rust idioms for better understanding of the code. I identify as a JS dev first but, currently learning rust as I work on a passion project.└── Dey well",
    "parent": 44858919,
    "depth": 2
  }
]