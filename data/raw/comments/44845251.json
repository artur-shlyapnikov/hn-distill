[
  {
    "id": 44845820,
    "by": "shahbaby",
    "timeISO": "2025-08-09T11:54:06.000Z",
    "textPlain": "As much as I dislike leetcode style interviews, if I fail one of those, I learn what I can and move on.Failing a take-home is an entirely different thing. It's a huge loss in time and mental energy.I've only done 3 of those in my career and only because the projects sounded interesting. 1 of those 3 resulted in a job offer which I can now confidently say in hindsight was the worst job in my career (...so far!).I'm now leaning towards just filtering out companies that do take-homes because it signals to me that they don't care about their candidate's time and how a company treats its candidates is usually a good indicator of how they treat their employees.",
    "parent": 44845251,
    "depth": 1
  },
  {
    "id": 44845826,
    "by": "donatj",
    "timeISO": "2025-08-09T11:55:57.000Z",
    "textPlain": "At my first employer circa 2005 we had a simple 1-2 hour interview and a 90 day probationary period. Respected people's time, gave everyone a fair chance to prove themselves. I don't know why it's not more common in the industry.Part of what lead to it I think is we hired largely straight out of college and doing a 9-hour interview with someone with little experience is a waste of time.It worked great. In my five years there we only had a couple people not make it past the probationary period.",
    "parent": 44845251,
    "depth": 1
  },
  {
    "id": 44845520,
    "by": "erehweb",
    "timeISO": "2025-08-09T10:58:02.000Z",
    "textPlain": "The OP thinks that candidates spending a lot of time on applications is OK, as long as the company shows respect by spending a lot of time themselves. I think this is mistaken - I care about how much time I have to spend, and am a lot less concerned about how much time the company takes.There's a trade-off: if a company spends more time / requires more effort on an interview process, they can get a better signal on the candidate's abilities, but then they'll lose out on candidates who are unwilling / unable to commit this time. This might just be a hard trade-off in recruiting.",
    "parent": 44845251,
    "depth": 1
  },
  {
    "id": 44845455,
    "by": "0x264",
    "timeISO": "2025-08-09T10:41:14.000Z",
    "textPlain": "The situation is not going to improve as long as business stakeholders and engineering managers (some closer to MBAs than actual engineers) think of software engineers as construction workers. They think we are fungible, they don't understand the craft of programming etc, and have very short term mindsets. Took me a while but then I realised that I needed to interview my prospective employers as much as they were interviewing me, and to just ignore those not worth working for.",
    "parent": 44845251,
    "depth": 1
  },
  {
    "id": 44845581,
    "by": "austin-cheney",
    "timeISO": "2025-08-09T11:10:14.000Z",
    "textPlain": "The primary problem with hiring is that developers are a single status with not performance benchmark. The solution is to segment need by capability.Let’s face the reality that most developers will never be able to write original software and just put text to screen using a tool or framework. Don’t call these people engineers. These people are the assembly line of software. Measure them according to desired patterns. They are copy/paste but smarter than data entry and understand some of the restrictions in place. Expectations are low and compatibility and replacement are the key business values.Next are the people who test software, the QA. We expect more from these people and then work them harder for less money at a lower level of reputation.Next are the people who evaluate software. These people are closer to engineers. These people include accessibility, security, and performance experts. These people are more like a combination of QA and senior developers. Evaluate these people on these criteria: written essay, technical knowledge, force them to measure things in real time and see how they perform.Next are the people who actually write software applications. Let’s call these people solution delivery. These people are similar to junior architects and actually build things. These people should be evaluated only on the basis of organizational capabilities above that of the engineers that measure things.Finally are the software owners. These people resemble a combination of project management and junior architects. They must have the experience to know how to build original software, like the junior architects, but also a planning vision to push though demands from competing stakeholders. There is busy savvy to this comes from a solid engineering planning vision plus superior communication skills most lesser software people never honed. Think of these people as senior principals with real authority. Evaluate these people on their delivery experience, using numbers,",
    "parent": 44845251,
    "depth": 1
  },
  {
    "id": 44845843,
    "by": "roland35",
    "timeISO": "2025-08-09T11:59:22.000Z",
    "textPlain": "I don't mean to be harsh, but as an engineer you owe it to yourself to try and get better at interviewing.  Does it suck?  Yeah absolutely.  Is it an annoying process?  Definitely.  But even if you have an easy and stable job things can change quickly at any company.  You're only closing doors on yourself.If you get nervous, the main thing you can do is more interviews.  My personal anxiety peaks right before the start time, luckily my bathroom is next door to my office!  But after doing dozens of interviews I settle in once it gets rolling.If you hate leetcode, well just get good at it.  Yeah it is kinda dumb but it is straightforward to practice.  And there is a lot more to a leetcode interview than knowing tricks - you need to communicate well.Take homes?  Yeah they are time consuming.  If you really need a job do them, otherwise pass on the company!Overall as a candidate you really need to try and go one level up on selling yourself - not just why you are a great candidate (which you are of course!), but why you would succeed at this role in particular.",
    "parent": 44845251,
    "depth": 1
  },
  {
    "id": 44845786,
    "by": "zdw",
    "timeISO": "2025-08-09T11:48:18.000Z",
    "textPlain": "Duplicate: https://news.ycombinator.com/item?id=44843256",
    "parent": 44845251,
    "depth": 1
  },
  {
    "id": 44846193,
    "by": "paulcole",
    "timeISO": "2025-08-09T13:07:17.000Z",
    "textPlain": "> select for applicants who will be good employees for years to comeWhy would you do this given the expected average tenure is probably like 18 months to 2 years?",
    "parent": 44845251,
    "depth": 1
  },
  {
    "id": 44845770,
    "by": "dijit",
    "timeISO": "2025-08-09T11:45:41.000Z",
    "textPlain": "I don't want to give away my secrets, because this has actually worked really well for me and I'm afraid that I'll lose my edge as an employer - however I have a very small neck of the woods and HN seems very US-centric so I think I'll be ok.What has worked for me, honestly, is being directly involved with my hiring pipeline and having conversations.It seems like common sense, but there's a lot of reasons not to do this and people will make good arguments to prevent it. \"What about bias\", \"your time is more important\" etc;However, bias is an unfortunate consequence of selecting for value fit anyway and I can't think of a more important task than selecting the members that will be the future of the company.I've had some positions that were open for a weekend where I got 400 applicants, and yes, it was daunting to go through and give each of them an honest shot, but you know: I had to do it. What's the alternative? I might miss a fantastic candidate because someone didn't understand what I actually need.Evaluating programmers and \"devops\" people is just insanely hard, technologies are mostly fungible. If you can write one C-like language you can learn the others in about a month, but what can't be taught is what your values are, if you think in a systemic way, if you're easy to work with and respect others.So, my solution is to have a conversation, challenge what they know, see how they react when challenged, see how they react when they reach the end of their knowledge and see what they're most proud of and if they get excited by it.No gotchas, no esoteric internal handshake, just: are you defensive? Are you curious? Are you passionate? Can you communicate effectively and are you intelligent.If you hit those, you can do anything.\"How do you even know who to interview?\"This is a hard question, for me there's not a lot of candidates that are physically located in my region, so those go through as long as they have something on the CV that looks relevant. For others it'",
    "parent": 44845251,
    "depth": 1
  },
  {
    "id": 44845567,
    "by": "Esophagus4",
    "timeISO": "2025-08-09T11:06:58.000Z",
    "textPlain": "> most interview questions have very little to do with day-to-day responsibilities. all good software engineers are generalist and live coding does not select for generalistsIf I had a dollar for every time I heard this (flawed) argument, I’d be rich and would no longer have to sell ads on my Hacker News comments. I’m going to get hate for this unpopular opinion but here we go.So often, “But Leetcode isn’t like REAL programming” is the siren song of the programmer who probably overestimates their coding skills and experience.Yes, I hate to say it - live coding is actually one of the best signals you can get on a candidate’s seniority and ability to program  a computer (and more importantly, their core computer science skills). A good interviewer is trained to know how to probe your CS knowledge during this, and will watch how you structure code, break down problems, debug, and think about testing. They will even ask you to make changes to see how coachable you are and what you might be like to work with. It’s not about inverting a binary tree while sharing your screen, it’s about showing me how you solve a problem, then translate what’s in your head to code.Take home exercises provide  little to no signal, and screen out people who have families (who wouldn’t bother with a 4 hour take home exercise after work). I don’t want to see how you Google, I want to see how you think.These candidates always want some version of, “But trust me, bro! Hire me: I’m a senior engineer, I don’t remember how to Leetcode! I’m good, I promise!” But what they won’t admit to themselves is that a good senior engineer is able to do all the things a junior can do PLUS all the things a senior can do.It’s not perfect, but I won’t hire anyone that can’t pass a live coding round.This comment brought to you by Poppi. Poppi: it’s soda for people who are silly enough to believe soda can be healthy.",
    "parent": 44845251,
    "depth": 1
  },
  {
    "id": 44846277,
    "by": "bryanrasmussen",
    "timeISO": "2025-08-09T13:24:55.000Z",
    "textPlain": "I don't get it, every job I have interviewed for since 2013 has had a take home. A couple of them waived it in my case but otherwise they all had take homes. Where are these jobs where people don't get given take homes?",
    "parent": 44845820,
    "depth": 2
  },
  {
    "id": 44846315,
    "by": "apwell23",
    "timeISO": "2025-08-09T13:31:19.000Z",
    "textPlain": "Agree. leetcode is the greatest thing that happened to tech interviews.Get good at it and you can do hundreds of interviews with no prep.Take homes are a proxy for hiring most desperate ppl who can spend most time on it.",
    "parent": 44845820,
    "depth": 2
  },
  {
    "id": 44845888,
    "by": "ghaff",
    "timeISO": "2025-08-09T12:07:11.000Z",
    "textPlain": "Well, historically, taking a new job often meant relocating which is a big expense for the employer (who typically paid relo for engineering jobs) and is hugely disruptive for the employee. Definitely not just a shrug for everyone concerned if things don't work out after a bit.Less true in hotbeds for a given industry. But I've had relocation paid twice in my career and it was just a given.",
    "parent": 44845826,
    "depth": 2
  },
  {
    "id": 44846308,
    "by": "bryanrasmussen",
    "timeISO": "2025-08-09T13:30:23.000Z",
    "textPlain": ">The OP thinks that candidates spending a lot of time on applications is OK, as long as the company shows respect by spending a lot of time themselvesif I spend 6 hours and the company has 1000 employees does that mean they spend 6000 hours? If so I might consider it a reasonable line of argument, but I guess they don't spend anywhere near that.",
    "parent": 44845520,
    "depth": 2
  },
  {
    "id": 44845587,
    "by": "Esophagus4",
    "timeISO": "2025-08-09T11:11:34.000Z",
    "textPlain": "Excellent point. And for anyone who’s been a hiring manager / recruiter, you know how many candidates you will have to sort through. And you want to waste as little of your engineers’ time making them do interviews if possible.Internet applications have made it so easy to apply to a position, companies have to find (usually arbitrary) ways of filtering the pipeline.It’s a very difficult problem to solve - Coinbase had 500k applications for 500 positions.Edit: I’m very concerned about AI tools flooding the pipelines even more by sending out tons of automated applications. This is going to cause an arms race where the companies have to use more arbitrary methods to sort through candidates, and it will only make it harder to find good ones.",
    "parent": 44845520,
    "depth": 2
  },
  {
    "id": 44845959,
    "by": "lsdforme",
    "timeISO": "2025-08-09T12:22:00.000Z",
    "textPlain": "> I realised that I needed to interview my prospective employers as much as they were interviewing meThis is so important, and most of the “fit” problems working I’ve experienced are because I didn’t weigh something heavily enough in the interview.If you are even the slightest bit concerned with an employer, that is a red flag in your long-term prospects there.For example:- If your future boss seems even a little clueless about the job itself, you may be lucky to find adequate structure or information available to do your job well.- If your future boss seems guarded, they may be hiding something; they may not be equipped for the job or could be a psychopath.- If they have greater than average benefits or the recruiter calls you a rockstar, it may be some form of hell, and you won’t find that out until a few weeks in.- If more than one person seemed like they were afraid to say something during the interview and were very quiet, either the environment there will be weird or it may be a serious hell and/or there is no chance to be able to fill the shoes of the person that left.- If you sense that they overestimated your ability or you overstate something accidentally in the interview, you may not overcome that as much as you want to believe in yourself. No, you can’t make up for years of experience with hard work. Your LinkedIn profile description must be essentially you, with the burrs removed and buffed up a little; It’s not just to get past a machine or recruiter.- If anyone you interview with is an arse, even if they work in a different team, that’s not a good sign.- If you are ___, and no one else there is, that may be a serious problem. This is age, sex, religion, politics, number of kids and ages, pets, what they do/don’t do socially, emotion, humor, tech stack, clothing, what vehicles they drive, style of workplace, and everything else that either you won’t like or they won’t like about you. Diversity is a sham if you’re the only one different, though I know t",
    "parent": 44845455,
    "depth": 2
  },
  {
    "id": 44845722,
    "by": "j1elo",
    "timeISO": "2025-08-09T11:38:37.000Z",
    "textPlain": "Now the issue is to identify them. All those types of workers will present themselves as Software Developers (or Software Engineers), so the interview process is not only an entry filter, but a classification filter too. You (as a company, or as an interviewer) need to discern which are the strengths of a candidate, and also the skill level within each of those categories.",
    "parent": 44845581,
    "depth": 2
  },
  {
    "id": 44846233,
    "by": "reactordev",
    "timeISO": "2025-08-09T13:16:06.000Z",
    "textPlain": "They think everyone wants to work for ping pong. It’s delusional. All it takes is one bad decision to send everyone running. Leaders are so high on their own egos that they think no one would ever want to leave, but we do.The issue I see is lots of companies put strategy into hiring from colleges and then are left with the low performers after 3-5 years. A good company will mix college recruiting with job fairs and LinkedIn/indeed ads to get good candidates and won’t pretend to be “a family” or enter cult phrase to try to attract talent.",
    "parent": 44846193,
    "depth": 2
  },
  {
    "id": 44845657,
    "by": "ghaff",
    "timeISO": "2025-08-09T11:25:22.000Z",
    "textPlain": ">Take home exercises provide little to no signal, and screen out people who have families (who wouldn’t bother with a 4 hour take home exercise after work). I don’t want to see how you Google, I want to see how you think.I tend to think that's very possibly true of developers (especially if they haven't worked in open source) but I wouldn't generalize that some combination of pointing to samples of past work and/or a take home isn't valid for a late-stage interview/demo in general. Jobs that involve a lot of writing or presenting, for example, probably require some demonstration of ability whether pre-existing or created for the purpose.I'd also say that one mistake along this line was taking one such sample and assuming that it was close enough and could be upleveled with a bit of work.",
    "parent": 44845567,
    "depth": 2
  },
  {
    "id": 44845577,
    "by": "megatron2009",
    "timeISO": "2025-08-09T11:09:39.000Z",
    "textPlain": "There's a difference between live coding round and leetcode rounds where you need to perfectly write code for as medium or hard leetcode question in 20 minutes.",
    "parent": 44845567,
    "depth": 2
  },
  {
    "id": 44845604,
    "by": "0x20cowboy",
    "timeISO": "2025-08-09T11:13:59.000Z",
    "textPlain": "> I won’t hire anyone that can’t pass a live coding round.Excellent - please be sure to mention this in the job description so I can know to never apply to where you work.",
    "parent": 44845567,
    "depth": 2
  },
  {
    "id": 44845850,
    "by": "sys_64738",
    "timeISO": "2025-08-09T12:00:08.000Z",
    "textPlain": "> Yes, I hate to say it - live coding is actually one of the best signals you can get on a candidate’s seniority and ability to program a computer (and more importantly, their core computer science skills). A good interviewer is trained to know how to probe your CS knowledge during this, and will watch how you structure code, break down problems, debug, and think about testing. They will even ask you to make changes to see how coachable you are and what you might be like to work with. It’s not about inverting a binary tree while sharing your screen, it’s about showing me how you solve a problem, then translate what’s in your head to code.I don't know if the the above was in jest as I wouldn't be able to see that from your oversized ego.",
    "parent": 44845567,
    "depth": 2
  }
]