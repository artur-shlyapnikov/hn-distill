[
  {
    "id": 44832403,
    "by": "simpaticoder",
    "timeISO": "2025-08-08T01:26:52.000Z",
    "textPlain": "I loved this the moment I saw it. After looking at an example commit[1], I love it even more. The cursed knowledge entry is committed alongside the fix needed to address it. My first instinct is that every project should have a similar facility. The log is not just cathartic, but turns each frustrating speedbump into a positive learning experience. By making it public, it becomes both a tool for both commiseration and prevention.1 - https://github.com/savely-krasovsky/immich/commit/aeb5368602...",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44832952,
    "by": "qdw",
    "timeISO": "2025-08-08T03:01:05.000Z",
    "textPlain": "One of their line items complains about being unable to bind 65k PostgreSQL placeholders (the linked post calls them \"parameters\") in a single query. This is a cursed idea to begin with, so I can't fully blame PostgreSQL.From the linked GitHub issue comments, it looks like they adopted the sensible approach of refactoring their ORM so that it splits the big query into several smaller queries. Anecdotally, I've found 3,000 to 5,000 rows per write query to be a good ratio.Someone else suggested first loading the data into a temp table and then joining against that, which would have further improved performance, especially if they wrote it as a COPY … FROM. But the idea was scrapped (also sensibly) for requiring too many app code changes.Overall, this was quite an illuminating tome of cursed knowledge, all good warnings to have. Nicely done!",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44831811,
    "by": "treve",
    "timeISO": "2025-08-07T23:49:27.000Z",
    "textPlain": "The '50 extra packages' one is wild. The author of those packages has racked up a fuckload of downloads. What a waste of total bandwidth and disk space everywhere. I wonder if it's for clout.",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44832562,
    "by": "burnt-resistor",
    "timeISO": "2025-08-08T01:51:33.000Z",
    "textPlain": "- Windows' NTFS Alternate Data Streams (ADS) allows hiding an unlimited number of files in already existing files- macOS data forks, xattrs, and Spotlight (md) indexing every single removable volume by default adds tons of hidden files and junk to files on said removable volumes. Solution: mdutil -X /Volumes/path/to/vol- Everything with opt-out telemetry: go, yarn, meilisearch, homebrew, vcpkg, dotnet, Windows, VS Code, Claude Code, macOS, Docker, Splunk, OpenShift, Firefox, Chrome, flutter, and zillions of other corporate abominations",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44832451,
    "by": "thorum",
    "timeISO": "2025-08-08T01:35:58.000Z",
    "textPlain": "> npm scripts make a http call to the npm registry each time they run, which means they are a terrible way to execute a health check.Is this true? I couldn’t find another source discussing it. That would be insane behavior for a package manager.",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44832885,
    "by": "godelski",
    "timeISO": "2025-08-08T02:46:59.000Z",
    "textPlain": "Looks like they're missing one. I'm pretty sure the discussion goes further back[0,1] but this one has been on going for years and seems to be the main one[2]  05/26/23(?) Datetimes in EXIF metadata are cursed\n\n[0] https://github.com/immich-app/immich/discussions/2581[1] https://github.com/immich-app/immich/issues/6623[2] https://github.com/immich-app/immich/discussions/12292",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44834105,
    "by": "maxbond",
    "timeISO": "2025-08-08T06:26:02.000Z",
    "textPlain": "> Fetch requests in Cloudflare Workers use http by default, even if you explicitly specify https, which can often cause redirect loops.This is whack as hell but doesn't seem to be the default? This issue was caused by the \"Flexible\" mode, but the docs say \"Automatic\" is the default? (Maybe it was the default at the time?)> Automatic SSL/TLS (default)https://developers.cloudflare.com/ssl/origin-configuration/s...",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44834406,
    "by": "egruy",
    "timeISO": "2025-08-08T07:16:38.000Z",
    "textPlain": "Reminds me a lot of phenomenal Hadoop and Kerberos: Madness beyond the gates[1], which coincidentally saved me many times from madness. Thanks Steve, I can't fathom what you had to go through to get the cursed knowledge!1 - https://steveloughran.gitbooks.io/kerberos_and_hadoop/conten...",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44832966,
    "by": "joshdavham",
    "timeISO": "2025-08-08T03:03:26.000Z",
    "textPlain": "This is awesome! Does anyone else wanna share some of the cursed knowledge they've picked up?For me, MacOS file names are cursed:1. Filenames in MacOS are case-INsensitive, meaning file.txt and FILE.txt are equivalent2. Filenames in MacOS, when saved in NFC, may be converted to NFD",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44835834,
    "by": "physicles",
    "timeISO": "2025-08-08T11:33:49.000Z",
    "textPlain": "Back in 2011, I wasted an entire afternoon on some string handling code that was behaving very strangely (I don’t remember exactly what the code was).It wasn’t until I loaded the content into a hex editor that I learned about U+00A0, the non-breaking space. Looks like a space, but isn’t.",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44833024,
    "by": "binary132",
    "timeISO": "2025-08-08T03:17:05.000Z",
    "textPlain": "This would be a fun github repo.  Kind of like Awesome X, but Cursed.",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44834041,
    "by": "tonyhart7",
    "timeISO": "2025-08-08T06:17:39.000Z",
    "textPlain": "ok but this one is not cursed tho (https://github.com/immich-app/immich/discussions/11268)its valid privacy and security on how mobile OS handle permission",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44832051,
    "by": "bigyabai",
    "timeISO": "2025-08-08T00:28:07.000Z",
    "textPlain": "> Some phones will silently strip GPS data from images when apps without location permission try to access them.That's no curse, it's a protection hex!",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44835647,
    "by": "hiAndrewQuinn",
    "timeISO": "2025-08-08T11:06:37.000Z",
    "textPlain": ">The bcrypt implementation only uses the first 72 bytes of a string. Any characters after that are ignored.Is there any good reason for this one in particular?",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44834813,
    "by": "qbane",
    "timeISO": "2025-08-08T08:32:56.000Z",
    "textPlain": "Love to see this concept condensed! This kind of knowledge will only emerge only after you dive in your project and surprisingly find things do not work as thought (inevitable if the project is niche enough). Will keep a list like that for every future project.",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44833258,
    "by": "csours",
    "timeISO": "2025-08-08T04:02:09.000Z",
    "textPlain": "You can load Java Classes into Oracle DB and run them natively inside the server.Those classes can call stored procedures or functions.Those classes can be called BY stored procedures or functions.You can call stored procedures and functions from server-side Java code.So you can have a java app call a stored proc call a java class call a stored proc ...Yes. Yes, this is why they call it Legacy.",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44832207,
    "by": "LeoPanthera",
    "timeISO": "2025-08-08T00:55:08.000Z",
    "textPlain": "\"Some phones will silently strip GPS data from images when apps without location permission try to access them.\"Uh... good?",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44834967,
    "by": "Havoc",
    "timeISO": "2025-08-08T09:04:48.000Z",
    "textPlain": "One can really sense the pain just reading the headingsAlso a crypto library that limits passwords to 72 bytes? That’s wild",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44835177,
    "by": "burnt-resistor",
    "timeISO": "2025-08-08T09:40:07.000Z",
    "textPlain": "Install an SP3 or TR4 socketed CPU in a dusty, dirty room without ESD precautions and crank the torque on the top plate and heat sink like truck lug nuts until creaking and cracking noises of the PCB delaminating are noticeable. Also be sure to sneeze on the socket's chip contacts and clean it violently with an oily and dusty microfiber cloth to bend every pin.c. 2004 and random crap on eBay: DL380 G3 standard NICs plus Cisco switches with auto speed negotiation on both sides have built-in chaos monkey duplex flapping.Google's/Nest mesh Wi-Fi gear really, really enjoys being close together so much that it offers slower speeds than simply 1 device. Not even half speed, like dial-up before 56K on random devices randomly.",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44835520,
    "by": "stogot",
    "timeISO": "2025-08-08T10:43:58.000Z",
    "textPlain": "This is the best thing I’ve read on hacker news all year",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44834888,
    "by": "Ygg2",
    "timeISO": "2025-08-08T08:48:14.000Z",
    "textPlain": "Why is the YAML part cursed? They serialize to same string, no? Both [1] and [2] serialize to identical strings. This seems like the ancient YAML 1.1 parser curse strikes again.[1]      https://play.yaml.io/main/parser?input=ICAgICAgdGVzdDogPi0KI...[2]https://play.yaml.io/main/parser?input=ICAgICAgdGVzdDogPi0KI...",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44832154,
    "by": "worik",
    "timeISO": "2025-08-08T00:43:54.000Z",
    "textPlain": "dd/mm/yyyy date formats are cursed....Perhaps it is mm/dd/yyyy (really?!?) that is cursed....",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44832123,
    "by": "g8oz",
    "timeISO": "2025-08-08T00:38:58.000Z",
    "textPlain": "This is awesome. Disappointing to hear about the Cloudflare fetch issue.",
    "parent": 44831704,
    "depth": 1
  },
  {
    "id": 44835168,
    "by": "delusional",
    "timeISO": "2025-08-08T09:37:18.000Z",
    "textPlain": "I agree, I usually put this sort of information in the commit message itself. That way it's right there if anybody ever comes across the line and wonders \"why did he write this terrible code, can't you just ___\".",
    "parent": 44832403,
    "depth": 2
  },
  {
    "id": 44835283,
    "by": "motorest",
    "timeISO": "2025-08-08T10:02:37.000Z",
    "textPlain": "> This is a cursed idea to begin with, so I can't fully blame PostgreSQL.After going through the list, I was left with the impression that the \"cursed\" list doesn't really refers to gotchas per se but to lessons learned by the developers who committed them. Clearly a couple of lessons are incomplete or still in progress, though. This doesn't take away from their value of significance, but it helps frame the \"curses\" as persona observations in an engineering log instead of statements of fact.",
    "parent": 44832952,
    "depth": 2
  },
  {
    "id": 44833354,
    "by": "e1g",
    "timeISO": "2025-08-08T04:14:55.000Z",
    "textPlain": "Another strategy is to pass your values as an array param (e.g., text[] or int[] etc) - PG is perfectly happy to handle those. Using ANY() is marginally slower than IN(), but you have a single param with many IDs inside it. Maybe their ORM didn’t support that.",
    "parent": 44832952,
    "depth": 2
  },
  {
    "id": 44836250,
    "by": "Aeolun",
    "timeISO": "2025-08-08T12:31:51.000Z",
    "textPlain": "I don’t think that makes intuitive sense. Whether I send 50k rows or 10x5k rows should make no difference to the database. But somehow it does. It’s especially annoying with PG, where you just cannot commit a whole lot of small values fast due to this weird limit.",
    "parent": 44832952,
    "depth": 2
  },
  {
    "id": 44833416,
    "by": "fdr",
    "timeISO": "2025-08-08T04:27:42.000Z",
    "textPlain": "that also popped out at me: binding that many parameters is cursed. You really gotta use COPY (in most cases).I'll give you a real cursed Postgres one: prepared statement names are silently truncated to NAMEDATALEN-1. NAMEDATALEN is 64. This goes back to 2001...or rather, that's when NAMEDATALEN was increased in size from 32. The truncation behavior itself is older still. It's something ORMs need to know about it -- few humans are preparing statement names of sixty-plus characters.",
    "parent": 44832952,
    "depth": 2
  },
  {
    "id": 44835123,
    "by": "Terr_",
    "timeISO": "2025-08-08T09:30:41.000Z",
    "textPlain": "> One of their line items complains about being unable to bind 65k PostgreSQL placeholders (the linked post calls them \"parameters\") in a single query.I've actually encountered this one, it involved an ORM upserting lots of records, and how some tables had SQL array-of-T types, where each item being inserted consumes one bind placeholder.That made it an intermittent/unreliable error, since even though two runs might try to touch the same number of rows and columns, you the number of bind-variables needed for the array stuff fluctuated.",
    "parent": 44832952,
    "depth": 2
  },
  {
    "id": 44835213,
    "by": "burnt-resistor",
    "timeISO": "2025-08-08T09:47:45.000Z",
    "textPlain": "Or people who try to send every filename on a system through xargs in a single command process invocation as arguments (argv) without NUL-terminated strings. Just hope there are no odd or corrupt filenames, and plenty of memory. Oopsie. find -print0 with parallel -0/xargs -0 are usually your friends.Also, sed and grep without LC_ALL=C can result in the fun \"invalid multibyte sequence\".",
    "parent": 44832952,
    "depth": 2
  },
  {
    "id": 44832354,
    "by": "bikeshaving",
    "timeISO": "2025-08-08T01:19:24.000Z",
    "textPlain": "The maintainer who this piece of “cursed knowledge” is referencing is a member of TC39, and has fought and died on many hills in many popular JavaScript projects, consistently providing some of the worst takes on JavaScript and software development imaginable. For this specific polyfill controversy, some people alleged a pecuniary motivation, I think maybe related to GitHub sponsors or Tidelift, but I never verified that claim, and given how little these sources pay I’m more inclined to believe he just really believes in backwards compatibility. I dare not speak his name, lest I incur the wrath of various influential JavaScript figures who are friends with him, and possibly keep him around like that guy who was trained wrong as a joke in Kung Pow: Enter the Fist. In 2025, I’ve moderated my opinion of him; he does do important maintenance work, and it’s nice to have someone who seems to be consistently wrong in the community, I guess.",
    "parent": 44831811,
    "depth": 2
  },
  {
    "id": 44831934,
    "by": "Centigonal",
    "timeISO": "2025-08-08T00:07:21.000Z",
    "textPlain": "It's probably a clout thing, or just a weird guy (Hanlon's Razor), but a particularly paranoid interpretation is that this person is setting up for a massive, multi-pronged software supplychain attack.",
    "parent": 44831811,
    "depth": 2
  },
  {
    "id": 44832316,
    "by": "fastball",
    "timeISO": "2025-08-08T01:10:25.000Z",
    "textPlain": "The author is almost certainly ljharb.",
    "parent": 44831811,
    "depth": 2
  },
  {
    "id": 44831978,
    "by": "smitty1e",
    "timeISO": "2025-08-08T00:16:02.000Z",
    "textPlain": "It does raise the idea of managed backward compatibility.Especially if you could control at install time just how far back to go, that might be interesting.Also an immediately ridiculous graph problem for all but trivial cases.",
    "parent": 44831811,
    "depth": 2
  },
  {
    "id": 44833402,
    "by": "kirici",
    "timeISO": "2025-08-08T04:23:45.000Z",
    "textPlain": ">opt-out telemetry: goBy default, telemetry data is kept only on the local computer, but users may opt in to uploading an approved subset of telemetry data to https://telemetry.go.dev.To opt in to uploading telemetry data to the Go team, run:    go telemetry on\n\nTo completely disable telemetry, including local collection, run:    go telemetry off\n\nhttps://go.dev/doc/telemetry",
    "parent": 44832562,
    "depth": 2
  },
  {
    "id": 44834941,
    "by": "TheBicPen",
    "timeISO": "2025-08-08T08:57:41.000Z",
    "textPlain": "Opt-out telemetry is the only useful kind of telemetry",
    "parent": 44832562,
    "depth": 2
  },
  {
    "id": 44836629,
    "by": "jrasm91",
    "timeISO": "2025-08-08T13:19:39.000Z",
    "textPlain": "https://docs.npmjs.com/cli/v6/using-npm/config#update-notifi...https://github.com/npm/cli/blob/5d82d0b4a4bd1424031fb68b4df7...",
    "parent": 44832451,
    "depth": 2
  },
  {
    "id": 44834154,
    "by": "dgoldstein0",
    "timeISO": "2025-08-08T06:34:31.000Z",
    "textPlain": "It might be referring to the check if whether npm is up to date so it can prompt you to update if it isn't?",
    "parent": 44832451,
    "depth": 2
  },
  {
    "id": 44834652,
    "by": "skacekamen",
    "timeISO": "2025-08-08T08:01:16.000Z",
    "textPlain": "probably an update check? It definitely sometimes shows an update banner",
    "parent": 44832451,
    "depth": 2
  },
  {
    "id": 44834839,
    "by": "qingcharles",
    "timeISO": "2025-08-08T08:39:15.000Z",
    "textPlain": "I created one of the first CDDBs in 1995 when Windows 95 was in beta. It came with a file, IIRC, cdplayer.ini, that contained all the track names you'd typed in from your CDs.I put out requests across the Net, mostly Usenet at the time, and people sent me their track listings and I would put out a new file every day with the new additions.Until I hit 64KB which is the max size of an .ini file under Windows, I guess. And that was the end of that project.",
    "parent": 44832966,
    "depth": 2
  }
]