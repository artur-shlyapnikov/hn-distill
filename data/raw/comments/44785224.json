[
  {
    "id": 44791893,
    "by": "npalli",
    "timeISO": "2025-08-04T22:09:22.000Z",
    "textPlain": "Strange to read this article and find no mention of Julia (but APL, Mojo, MLIR BQN etc.. which are not exactly widely used languages). It checks many of the boxesUser-Extensible Rank Polymorphism is just beautiful with the broadcast dot syntax. I don't think any other language has this clean and flexible implementation.Others -- GPU programing, parallelism, etc. are pretty good with Julia. Real shame it hasn't taken off.",
    "parent": 44785224,
    "depth": 1
  },
  {
    "id": 44786581,
    "by": "adregan",
    "timeISO": "2025-08-04T14:48:26.000Z",
    "textPlain": "The author of this post was the guest on the most recent episode of the podcast The Array Casthttps://www.arraycast.com/episodes/episode111-ideal-array-la...",
    "parent": 44785224,
    "depth": 1
  },
  {
    "id": 44785967,
    "by": "abcd_f",
    "timeISO": "2025-08-04T14:06:35.000Z",
    "textPlain": "> User-Extensible Rank Polymorphism> IMO this is what makes something an array language.Great to hear. So what is it?",
    "parent": 44785224,
    "depth": 1
  },
  {
    "id": 44792571,
    "by": "pklausler",
    "timeISO": "2025-08-04T23:33:05.000Z",
    "textPlain": "My ideal array language is one in which array operations are function compositions, since arrays are functions.  A functional view of array expressions naturally minimizes needless temporaries in most cases.See https://github.com/llvm/llvm-project/blob/main/flang/docs/Ar....",
    "parent": 44785224,
    "depth": 1
  },
  {
    "id": 44788994,
    "by": "goldenCeasar",
    "timeISO": "2025-08-04T17:34:02.000Z",
    "textPlain": "Funny, on another totally unrelated domain (business logic/rules engines) I was building something very very related - array broadcasting with semantic preservation through arbitrary \n  nesting levels",
    "parent": 44785224,
    "depth": 1
  },
  {
    "id": 44787995,
    "by": "rramadass",
    "timeISO": "2025-08-04T16:22:45.000Z",
    "textPlain": "A previous relevant discussion since there is so little on Array Languages - https://news.ycombinator.com/item?id=38981639",
    "parent": 44785224,
    "depth": 1
  },
  {
    "id": 44789100,
    "by": "hinkley",
    "timeISO": "2025-08-04T17:43:05.000Z",
    "textPlain": "You explain the evolution of CPUs but then don’t explain Rank Polymorphism.",
    "parent": 44785224,
    "depth": 1
  },
  {
    "id": 44787110,
    "by": "nromiun",
    "timeISO": "2025-08-04T15:23:10.000Z",
    "textPlain": "⊢×0≠∧˝˘∧⌜∧˝           # Marshall & Dzaima (tacit!)\n  (≠⥊∧´)˘{×(⌾⍉∧)0≠} # Dzaima & Rampoina\n  {×(∧˝˘∧≢⥊∧˝)0≠}     # Dzaima\n\nCall me old fashioned and stuck in C style syntax but I can't imagine anyone describing this as beautiful art.",
    "parent": 44785224,
    "depth": 1
  },
  {
    "id": 44786680,
    "by": "teleforce",
    "timeISO": "2025-08-04T14:55:05.000Z",
    "textPlain": "Dlang does not has rank polymorphism and it handle array just fine with crazy speed in both compilation and execution.It can be faster than Fortran based library that is still being used by Matlab, Rust and Julia [1].It will be interesting to compare Mojo moblas BLAS library with GLAS library performance in D.[1] Numeric age for D: Mir GLAS is faster than OpenBLAS and Eigen (2016):http://blog.mir.dlang.io/glas/benchmark/openblas/2016/09/23/...",
    "parent": 44785224,
    "depth": 1
  }
]