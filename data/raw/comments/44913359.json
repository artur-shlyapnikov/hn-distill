[
  {
    "id": 44916170,
    "by": "xwowsersx",
    "timeISO": "2025-08-15T18:54:46.000Z",
    "textPlain": "Something I heard recently on some podcast which really resonated was (paraphrasing): \"Inertia is the biggest issue for a startup. The world doesn't like you, doesn't think it needs you... and you've got to invert that. You have to create momentum by scratch and the most important thing a founder does, by an order of magnitude, is invert inertia. Literally, in a physical sense. Like the world stays at rest and you've got to create momentum.\" With that in mind, it makes sense to do things that don't scale... because in the beginning, you're not trying to optimize a machine that's already running. You're trying to get the engine to turn over at all. PG's point is that scalable growth comes later; first, you have to manually crank the thing into motion. You do manual stuff not because it's efficient, but because it's the only way to get traction when no one's looking for you in the first place. And that's how you learn what actually works, how you build momentum one user at a time, and how you prove there's something worth scaling at all.",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44919231,
    "by": "adidoit",
    "timeISO": "2025-08-16T01:29:44.000Z",
    "textPlain": "Of course there's survivor bias.But the point he makes is completely valid that you have to start by doing things yourself and not automating. I think the biggest value of that is you actually build a more granular mental model of how things work that simply can't be captured by slides and memos.You also build what the cool kids now call taste. It's what does good look like and why? And often it means having a strong perspective on decisions people would be either ambivalent to or not even recognize that a decision is needed.AI means many will skip and try to automate prematurely.At www.socratify.com We build our pedagogical content manually. Even though everyone tells us that we should use AI, we want to curate a set of context that's high quality because it's what our users interact withI'm sure we'll semi-automate on the validation side pretty quickly, but it's hard to replace raw human brainpower even with the smartest models and we learn a lot quickly.",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44914777,
    "by": "cjs_ac",
    "timeISO": "2025-08-15T17:02:03.000Z",
    "textPlain": "My theory is that there are three regimes: Not Scaling, Scaling, and Antiscaling.Not Scaling is about crossing and shoring up your moat. Scaling is when your app has enough hype around it that your customers recruit new customers, and all you have to do is add new machines or shard the database or whatever to handle increased demand.Antiscaling is when you turn into the thing that everyone hates about the modern web. Antiscaling is when intelligence agencies want to talk to you about how your chat app is used by terrorists, when cities want to licence access to your ridesharing or takeaway delivery app, when pieces of legislation are passed that are specifically designed to target your company, when you're sufficiently well-known as the founder of an app that people are making memes about you and tracking your personal movements.You don't have to take over the world, you just have to make money. People who try to change the world often change it for the worse; just try to make something useful, and maybe the world will like it.",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44916550,
    "by": "jlundberg",
    "timeISO": "2025-08-15T19:35:41.000Z",
    "textPlain": "A recommended read for all early stage founders and for employees too if you are one of the earlier team members.One thing we do and still do even at 15+ people is we call each and every new signup on the phone.We do it for these reasons:1) How did you find us?2) Do you need help starting?3) (Implicit: we care)It probably works because what we have it’s a B2B platform.However, our target group is software developers and maybe surprisngly these phone calls are really really nice.. once you get over the ”no, I am noy calling you to sell anything”-phase :)",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44914815,
    "by": "dang",
    "timeISO": "2025-08-15T17:04:17.000Z",
    "textPlain": "Related. Others?Ask HN: PG's 'Do Things That Don't Scale' manual examples? - https://news.ycombinator.com/item?id=38010992 - Oct 2023 (316 comments)Do Things that Don't Scale (2013) - https://news.ycombinator.com/item?id=26086196 - Feb 2021 (31 comments)PG: “Do Things that Don't Scale” – What are some examples? - https://news.ycombinator.com/item?id=25898671 - Jan 2021 (2 comments)Ask HN: How did you 'do things that don't scale' for your B2B startup? - https://news.ycombinator.com/item?id=15290433 - Sept 2017 (9 comments)Do Things That Don’t Scale (2013) - https://news.ycombinator.com/item?id=14957007 - Aug 2017 (37 comments)Do Things that Don't Scale - https://news.ycombinator.com/item?id=6041765 - July 2013 (207 comments)",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44914346,
    "by": "shin_lao",
    "timeISO": "2025-08-15T16:28:17.000Z",
    "textPlain": "Seeing a lot of people shit on Paul, which I guess, why not, but it's not super useful or positive.I think this is a fairly good essay which can be boiled down to \"don't do premature optimization\" or \"don't try to behave like companies much bigger than you\".There are three advantages to this:1/As a founder, get your hands dirty, even if in the grand scheme of things it's inefficient. You'll get first hand experience and feedback.\n 2/Avoid the upfront cost of \"something that scales\", and thus get quicker feedback.\n 3/Makes you different, very important in the beginning.\"Do things that don't scale\" is a way to drive the point home and must not be taken literally...",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44914835,
    "by": "paulpauper",
    "timeISO": "2025-08-15T17:05:28.000Z",
    "textPlain": "Stripe is one of the most successful startups we've funded, and the problem they solved was an urgent one. If anyone could have sat back and waited for users, it was Stripe. But in fact they're famous within YC for aggressive early user acquisition.This was 12 years ago. Even he couldn't have imagined how successful it would still become. I wish there were I way I could have invested in it.",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44917234,
    "by": "tombert",
    "timeISO": "2025-08-15T21:04:54.000Z",
    "textPlain": "I don't think pg is wrong on this at all, and I don't run a business so this is largely me just bloviating, but a large part of the fun of a project for me is figuring out how it's going to scale.Obviously there's software scaling, which of course on this forum doesn't need much explanation; making code maintainable and making it work with lots of users is just something I find really interesting and fun.But it's not just software; there's also other projects that I work on that to me the fun part is figuring out \"if I had to do this a million times how could I make this easier?\"Stuff like figuring out ways of batch-cooking food so that I could handle dozens of people, for example, is something I find pretty enjoyable, even if I will never have a situation where I need to feed dozens of people.  Figuring out how to get mass production of 3D printed parts using OctoFarm is fun even if I never really need more than one part at a time. Buying industrial-sized CO2 containers and kegs for my soda habit makes me feel cool.I dunno, I guess to me it sort of sucks the fun out of things to have to do things in the non-scalable way, but I guess that's sort of pg's point.",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44914084,
    "by": "anonyonoor",
    "timeISO": "2025-08-15T16:05:10.000Z",
    "textPlain": "This was the very first post I saw on Hacker News.Glad to see it reposted every now and then. Makes me nostalgic.",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44918877,
    "by": "throwmeaway222",
    "timeISO": "2025-08-16T00:37:53.000Z",
    "textPlain": "I think everything you do has to be something that CAN be scaled.I mean if your company makes boats that can ONLY be made by 1 person and that's you - then even if \"making boats\" is something that CAN scale - your company specifically can't. Which means you'll only ever have customers that are hard to get, and each time you finish you can eat and pay rent again for a week or two - then start over at finding a customer (unless you have a waiting list, but that's magical thinking)The nice thing however, is that making boats CAN SCALE. Because you can teach someone else how to make the sails, etc... So while PG is trying to write an edgy headline, he doesn't mean it - he would never advocate for you to always make the boat yourself for the rest of time.",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44915844,
    "by": "nicodjimenez",
    "timeISO": "2025-08-15T18:26:50.000Z",
    "textPlain": "The most important piece ever written about startups, probably. Applicable to doing anything new.For startups, the devil's in the details though. The goal is to scale but you get there by doing things that don't scale successively.",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44916981,
    "by": "monkeyelite",
    "timeISO": "2025-08-15T20:35:01.000Z",
    "textPlain": "I don’t know how people are thinking this is about scaling web application capacity unless you are responding to the title.",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44915841,
    "by": "Jormundir",
    "timeISO": "2025-08-15T18:26:40.000Z",
    "textPlain": "-",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44913640,
    "by": "srameshc",
    "timeISO": "2025-08-15T15:33:06.000Z",
    "textPlain": "I wonder if Paul has a take about the same in this era of AI",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44914311,
    "by": "pinkmuffinere",
    "timeISO": "2025-08-15T16:25:03.000Z",
    "textPlain": "This is a great article! My cofounders and I read it when we were first starting our business, and it significantly impacted the decisions we make, usually for the better. But don’t forget to scale at some point!! For example, we’re still doing our own bookkeeping and tax filing. When we started it was simple and it was a “thing that doesn’t scale” which we could still do. But at this point it’s a waste of time. We’re finally outsourcing it, probably a year later than we should have. I think we overindexed on Paul’s advice a bit. Which, to be clear, is still really really good advice, just don’t take it too far.Edit: business is mydragonskin.com",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44915777,
    "by": "sdotdev",
    "timeISO": "2025-08-15T18:21:44.000Z",
    "textPlain": "I really agree with this.I used to live with the mindset and if I didn't elevate far in a week I would just give up.Things really take time.",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44913882,
    "by": "kreutz",
    "timeISO": "2025-08-15T15:51:11.000Z",
    "textPlain": "Relevant discussion thread https://news.ycombinator.com/item?id=38010992",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44915928,
    "by": "tennisflyi",
    "timeISO": "2025-08-15T18:33:14.000Z",
    "textPlain": "So like moderation?",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44916525,
    "by": "hinkley",
    "timeISO": "2025-08-15T19:32:07.000Z",
    "textPlain": "This is advice that has always sounded good to me on paper but not quite right in practice.Scaffolding is great, until it isn't. It needs to be replaced with something resembling a Real Solution before the Last Responsible Moment comes and goes. But due to Hofstadter's Law as well as Queuing Theory, we can never get the timing right.And so a lot of the devs you encounter who fight this have found themselves spending a lot of time throwing good money after bad, keeping a broken system working just enough that the customers don't defect, while trying to also find the time to replace the broken system, which is also always being made more difficult by the changes being made to keep the busted shit kinda working.And so at some point they just say Enough. I'm not going to lie to myself and my coworkers by saying \"We'll fix that later\" because \"later\" never comes, only \"too late\" comes.There are ways to spin this however. If the customer trusts that you know what you're doing and that you will eventually get to all of their problems, they'll stay put while you work on them. But you have to telegraph competence and then deliver on it. There's a needle you can thread there where you use not shipping systems that Don't Scale... ridiculously badly, you can tell the users to expect quality.I will say this, as a compromise: It is almost always better to ship systems that scale too expensively than ones that don't scale at all - as long as that scaling leads directly to revenue. You're only shortening your runway by decreasing margins or taking them narrow. But if your customer base plateaus because you just can't onboard them anymore, what investor is going to float you more money to extend that runway?I have always found it easier to negotiate priority on feature and story work that's attached to a new revenue stream (eg, new account) than ones that only reduce our OPEX. When the checks clear, a small but statistically significant amount of 'generosity' flows. You have to be r",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44916911,
    "by": "thedudeabides5",
    "timeISO": "2025-08-15T20:23:35.000Z",
    "textPlain": "one of the greatest startup articles every written, thanks pg",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44914516,
    "by": "laserlight",
    "timeISO": "2025-08-15T16:39:15.000Z",
    "textPlain": "I had a friend who read this essay and understood it as “Don't do things that scale.”",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44914586,
    "by": "andrewmcwatters",
    "timeISO": "2025-08-15T16:45:05.000Z",
    "textPlain": "It is entirely possible to do these manual things, acquiring users one or two at a time, and never having achieved escape velocity where your product does not garner enough attention such that its users recommend the product to others, and it grows by word of mouth itself.I've built at least two of these that became the most popular solution in their space for a given problem, and if you don't have the constraints of a VC investor wanting their returns and eventually shutting you down, then you can realistically go for years without significant enough growth to even get past par with your direct competitors.Or you realize that your competitors were never even big enough to meaningfully compete with in the first place because you didn't aim high enough.",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44915070,
    "by": "pbardea",
    "timeISO": "2025-08-15T17:25:32.000Z",
    "textPlain": "It's easier to figure out a way to scale something that is working than trying to fix a scalable approach that's falling flat.",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44914822,
    "by": "jillesvangurp",
    "timeISO": "2025-08-15T17:04:43.000Z",
    "textPlain": "If you are going to be VC funded. Yes, absolutely. All you need is smoke and mirrors. And the ability to project confidence about what is otherwise an absolute fantasy that doesn't yet exist. Which is what many startups are until they get their house in order (with VC funding). Sometimes VCs get it right and they'll bore you endlessly about their successes. But the 95% that fail that they also invested in and probably shouldn't have is what they generally don't talk about a lot other than in terms of vague hints about acquihires, mergers, and other tried and proven strategies to make a bad investment look like a good one. The unremarkable airbnb clone, the tinder for X, Y, and Z that never panned out. The too good to be true yet-another market place that amounted to little. All of those.If you are bootstrapping with revenue instead of money, customers won't be lining up for a product that won't work. They won't be interested in your self serving story about how you built the thing with duct-tape and mud while surviving on ramen noodles without sleeping for five months. That would scare them away probably. You actually need to build something that they would 1) buy and then 2) be happy about buying. And you won't have any VC donated cash to wow/lure/distract them with marketing either. You actually need to sell on product merit rather than founder reputation instead of using your reputation to separate VCs from their cash just so you can get the resources you need to not fake the product. Once the product has proven itself, the VC is redundant.It's a very different game. Most of the things that work with VCs won't work with customers. And vice versa (you are going to slow, you should be focusing on X instead of Y, and all the other nonsense).But the good news is, you won't need to scale for a while because bootstrapping isn't a fast process. The bad news is that you might not have a lot of time to fix your scaling issues when you do encounter them and they can and wi",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44913925,
    "by": "pyrale",
    "timeISO": "2025-08-15T15:54:05.000Z",
    "textPlain": "(2013)",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44916341,
    "by": "b0a04gl",
    "timeISO": "2025-08-15T19:11:42.000Z",
    "textPlain": "[dead]",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44914229,
    "by": "belter",
    "timeISO": "2025-08-15T16:18:15.000Z",
    "textPlain": "Cherry-picks winners: Uses only successful examples like Stripe or Airbnb while ignoring thousands of failed startups that tried identical manual tactics.False choices: Presents manual work vs. scalable strategy as either/or when most successful companies do both simultaneously.Has a One size fits all: Claims all startups must recruit manually, ignoring that enterprise products need fundamentally different approaches.Instead, do the following...- Interview failed founders, not successful ones: They will tell you why things actually break (co-founder fights, cash flow, timing) instead of survivorship bias fairy tales.- Optimize for \"no,\" not \"yes\": Ruthlessly eliminate wrong customers instead of trying to delight everyone. False positives kill more startups than missed opportunities.- Plan your failure modes first: Map exactly how you could die (regulation, key person risk, moats) and build defenses. Most founders only plan for unicorn outcomes.- Copy boring businesses, because that is the secret of sucess. Dont copy sexy startups: Uber is just taxis with an app, Airbnb is hotels with no real estate, Netflix is just video rental with better logistics. The biggest \"innovative\" companies are doing boring businesses better, not inventing new categories.",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44914306,
    "by": "scoofy",
    "timeISO": "2025-08-15T16:24:35.000Z",
    "textPlain": "Graham reads Taleb",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44913787,
    "by": "updatepriors",
    "timeISO": "2025-08-15T15:43:33.000Z",
    "textPlain": "[flagged]",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44915262,
    "by": "fHr",
    "timeISO": "2025-08-15T17:41:37.000Z",
    "textPlain": "[flagged]",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44915258,
    "by": "fHr",
    "timeISO": "2025-08-15T17:41:29.000Z",
    "textPlain": "[flagged]",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44914006,
    "by": "positron26",
    "timeISO": "2025-08-15T15:59:58.000Z",
    "textPlain": "[flagged]",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44915264,
    "by": "fHr",
    "timeISO": "2025-08-15T17:41:57.000Z",
    "textPlain": "[flagged]",
    "parent": 44913359,
    "depth": 1
  },
  {
    "id": 44916270,
    "by": "epolanski",
    "timeISO": "2025-08-15T19:03:50.000Z",
    "textPlain": "I also think that the biggest value in doing things manually is that you actually learn.One of my clients used to make a nice curated list of the important financial and stock market news of the week, it was a niche part of a niche product but people loved it.At some point he thought about automating everything, it became less curated, more spammy, it lost any value and in the end so did the product. Sure there was more news, but it was less curated, edited and the signal to noise ratio got worse.In fact what they did manually was more valuable even if the scope was smaller.Many companies don't understand that and rush into premature optimization.I'll have another example: one of my clients wanted a scraper to automate something his company needed to do manually: check competitors prices on their ecommerces.I built it, way simpler than they wanted (they thought they wanted an app with a proper front end, turns out it was better for both to produce an excel spreadsheet with the data) and they were happy.Then after some time they understood that they were missing part of the experience: navigating their competitors manually allowed them to see new approaches to show the catalogue, new trends and products, they were actually learning from the competition.Eventually they realized and got back to doing it, and left my scraper just for price analysis.But the overwhelming majority of my clients keep putting automation before the product and problem and misses important learning opportunities.",
    "parent": 44916170,
    "depth": 2
  },
  {
    "id": 44917028,
    "by": "bayindirh",
    "timeISO": "2025-08-15T20:40:48.000Z",
    "textPlain": "> you just have to make money.When a measure (e.g. profit) becomes a target, it ceases to be a good measure.-- Goodhart's Law.",
    "parent": 44914777,
    "depth": 2
  },
  {
    "id": 44918324,
    "by": "molf",
    "timeISO": "2025-08-15T23:10:40.000Z",
    "textPlain": "I feel this is an insanely distorted take.How about extreme and utter irrelevance (such as after building a thing nobody wants)?Or how about this, arguably the most common: slightly successful; nobody hates it but nobody loves it either. Something people feel mildly positive about, but there is zero “hype” and also no “moat” and nobody cares enough to hate it.",
    "parent": 44914777,
    "depth": 2
  },
  {
    "id": 44917384,
    "by": "NaOH",
    "timeISO": "2025-08-15T21:19:39.000Z",
    "textPlain": "Show HN: A directory of startups that did things that don't scale - https://news.ycombinator.com/item?id=41490865 - Sept 2024 (12 comments)Ask HN: What are some hacks of real founders who did things that don't scale? - https://news.ycombinator.com/item?id=18400020 - Nov 2018 (267 comments)Why we're doing things that don't scale - https://news.ycombinator.com/item?id=6102285 - July 2013 (34 comments)",
    "parent": 44914815,
    "depth": 2
  },
  {
    "id": 44917731,
    "by": "wdaher",
    "timeISO": "2025-08-15T21:58:33.000Z",
    "textPlain": "Scalability is overrated - https://news.ycombinator.com/item?id=34656776 - Feb 2023 (232 comments)",
    "parent": 44914815,
    "depth": 2
  },
  {
    "id": 44915204,
    "by": "nine_k",
    "timeISO": "2025-08-15T17:37:55.000Z",
    "textPlain": "Many people are concerned with becoming an overnight success and being unable to withstand the load, and losing the momentum. So they build highly scalable things before the slightest need for horizontal scaling even arises.I think that vertical scaling is underappreciated. Just throwing more resources at your monolithic backend can buy you quite enough time to understand how to best scale your product. More importantly, it may give you the time to reconsider what are the key strengths of your product that the users are for, and thus to understand what needs scaling.Also, when users really love your product, they will excuse you for its spotty performance. Early Twitter was built on a hugely inadequate architecture (a Rails app), and kept melting and crashing; remember the \"fail whale\"? Despite that, users were coming to it in droves, because it did the key things right.To my mind, the early stage is all about easy iteration and finding out what makes users happy and enthusiastic. Ignore scaling; experiment, listen to the users, talk to the users. When it clicks, you can consider scaling. It may happen at a point you did not anticipate, and could not optimize for.Technology is a tool, an instrument. It's great to have a Stradivarius, but you need some good music first.",
    "parent": 44914346,
    "depth": 2
  },
  {
    "id": 44914775,
    "by": "al_borland",
    "timeISO": "2025-08-15T17:02:00.000Z",
    "textPlain": "It’s also important to realize that not every successful or worthwhile business has millions or billions of users that requires extreme optimization and scalability.I work on internal tools at my company. We know how big our environment is, there isn’t much sensitivity to performance, and we don’t see random spikes that we don’t cause ourselves. Yet I had someone on my team who was obsessed with optimizing everything, to the point of changing his entire code base to a new language that only he knew, so he could save a few milliseconds on paper. Aside from him, no one noticed, no one cared. His optimizations just introduced risk, as he was the only one who could support what he built. When he left, we threw the whole thing away at management’s demand. Had it been a little more simple and slow, someone else probably could have taken it over without as much effort.",
    "parent": 44914346,
    "depth": 2
  },
  {
    "id": 44915098,
    "by": "nonethewiser",
    "timeISO": "2025-08-15T17:28:13.000Z",
    "textPlain": "There is a key difference from \"don't do premature optimization.\" \"Premature optimization\" suggests the scaled version is optimal. It might not be worth the resource cost to achieve it, but disregarding that, its the best.Whereas \"Do things that Dont Scale\" is suggesting the non-scaled process may be the optimal one. For example (and this sort of thing is in the article IIRC), giving direct contact details to the CEO instead of a generic form that get's sent to some shared customer service/sales inbox. Way better process for selling your product. The inquiry form scales but its in no way a premature \"optimization.\"Another way of putting it is that SCALING IS BAD. Or to be a bit more nuanced, it's a necessary evil. It's complex. It's resource intensive. It creates distance between you and your customer. Of course business goals and environment may dictate it, but that doesn't mean none of the processes are degrading in quality. So its more like dont do \"premature process degradation\" than \"premature optimization\" I think.",
    "parent": 44914346,
    "depth": 2
  },
  {
    "id": 44917717,
    "by": "chairmansteve",
    "timeISO": "2025-08-15T21:57:33.000Z",
    "textPlain": "Or boiled down to \"don't solve problems you don't have\".",
    "parent": 44914346,
    "depth": 2
  },
  {
    "id": 44915224,
    "by": "sneak",
    "timeISO": "2025-08-15T17:39:19.000Z",
    "textPlain": "> \"don't try to behave like companies much bigger than you\"This is such good advice for organizations at all stages.  As a consultant I spend a lot of time talking startups and small companies out of hobbling themselves by adopting policies they think they have to simply because they're a corporation, when those policies only make sense when you have at a minimum hundreds of people involved in the org.Everything from k8s to nosql to overly restrictive security policies.  The Netflix employee handbook/guide really drove this point home to me.  When you're small, and you're hiring well, you can afford to actually delegate real responsibility to your staff and let them use their judgement.  Not everything needs to be a hard and fast rule until and unless there's an unacceptable level of risk or a demonstrated problem at hand.",
    "parent": 44914346,
    "depth": 2
  },
  {
    "id": 44915182,
    "by": "paulddraper",
    "timeISO": "2025-08-15T17:36:08.000Z",
    "textPlain": "A lot of people have not built a successful company either.",
    "parent": 44914346,
    "depth": 2
  },
  {
    "id": 44915130,
    "by": "begueradj",
    "timeISO": "2025-08-15T17:30:59.000Z",
    "textPlain": "> \"don't try to behave like companies much bigger than you\"That's a good point.",
    "parent": 44914346,
    "depth": 2
  },
  {
    "id": 44914485,
    "by": "qualeed",
    "timeISO": "2025-08-15T16:37:24.000Z",
    "textPlain": ">Seeing a lot of people shit on PaulHardly \"a lot\". There's like three negative comments and one of them is strictly criticizing the article itself and not paul. I thought it brought up some good points.",
    "parent": 44914346,
    "depth": 2
  },
  {
    "id": 44918817,
    "by": "bravesoul2",
    "timeISO": "2025-08-16T00:29:44.000Z",
    "textPlain": "I volunteered at a food for homeless place and batch cooked. It was fun. Also I weirdly enjoy cooking a kilo of rice more than 100g, knowing future me can just grab some rice later in the week no hassles.",
    "parent": 44917234,
    "depth": 2
  },
  {
    "id": 44918834,
    "by": "bravesoul2",
    "timeISO": "2025-08-16T00:31:44.000Z",
    "textPlain": "Even so its true there too. Just use postgres with monolith, monorepo on a single VM (yes!) until you need more. Do have DR of course and security posture from day 1.Feel the pain badly that microservices or aurora or k8s solve before using them!Also pets not cattle. A $100/m hetzner dedi with a CDN on top is probably a tardis for most startups and can scale you up to a lot of traffic. With a setup like that yes you can install the Web server and the database on the same damn machine, and find it ridiculously overprovisioned while costing less than your incorporation.",
    "parent": 44916981,
    "depth": 2
  },
  {
    "id": 44916188,
    "by": "yibg",
    "timeISO": "2025-08-15T18:56:33.000Z",
    "textPlain": "Scale in this case isn't just about software scalability though, in the sense of RPS it can handle. It's:- Don't build some automated support system until you get enough customers- Don't build a fully automated provisioning system until it becomes a problem- Don't build some fancy multi-region failover setup- Don't worry about designing for some future feature that may or may not be neededThis doesn't mean write bad code though.",
    "parent": 44915841,
    "depth": 2
  },
  {
    "id": 44916077,
    "by": "wouldbecouldbe",
    "timeISO": "2025-08-15T18:45:49.000Z",
    "textPlain": "Cloud is only a very limited and literal part of scalability",
    "parent": 44915841,
    "depth": 2
  }
]