[
  {
    "id": 44893239,
    "by": "m_kos",
    "timeISO": "2025-08-13T20:10:22.000Z",
    "textPlain": "> Why is it so hard to install PyTorch, or CUDA, or libraries like FlashAttention or DeepSpeed that build against PyTorch and CUDA?This is so true! On Windows (and WSL) it is also exacerbated by some packages requiring the use of compilers bundled with outdated Visual Studio versions, some of which are only available by manually crafting download paths. I can't wait for a better dev experience.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892314,
    "by": "notatallshaw",
    "timeISO": "2025-08-13T18:52:01.000Z",
    "textPlain": "Probably the more useful blog post: https://astral.sh/blog/introducing-pyx",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892499,
    "by": "monster_truck",
    "timeISO": "2025-08-13T19:07:59.000Z",
    "textPlain": "I've been burned too many times by embracing open source products like this.We've been fed promises like these before. They will inevitably get acquired. Years of documentation, issues, and pull requests will be deleted with little-to-no notice. An exclusively commercial replacement will materialize from the new company that is inexplicably missing the features you relied on in the first place.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44893113,
    "by": "m4r71n",
    "timeISO": "2025-08-13T20:01:08.000Z",
    "textPlain": "What does GPU-aware mean in terms of a registry? Will `uv` inspect my local GPU spec and decide what the best set of packages would be to pull from Pyx?Since this is a private, paid-for registry aimed at corporate clients, will there be an option to expose those registries externally as a public instance, but paid for by the company? That is, can I as a vendor pay for a Pyx registry for my own set of packages, and then provide that registry as an entrypoint for my customers?",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892881,
    "by": "_verandaguy",
    "timeISO": "2025-08-13T19:41:35.000Z",
    "textPlain": "Soon: there are 14 competing Python packaging standards.This is a joke, obviously. We've had more than 14 for years.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892578,
    "by": "simonw",
    "timeISO": "2025-08-13T19:14:28.000Z",
    "textPlain": "This is effectively what Charlie said they were going to build last September when quizzed about their intended business model on Mastodon: https://hachyderm.io/@charliermarsh/113103564055291456",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892454,
    "by": "ctoth",
    "timeISO": "2025-08-13T19:03:56.000Z",
    "textPlain": "As I said a couple weeks ago, they're gonna have to cash out at some point. The move won't be around Uv -- it'll be a protected private PyPi or something.https://news.ycombinator.com/item?id=44712558Now what do we have here?",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892468,
    "by": "Myrmornis",
    "timeISO": "2025-08-13T19:05:17.000Z",
    "textPlain": "I wonder whether it will have a flat namespace that everyone competes over or whether the top-level keys will be user/project identifiers of some sort. I hope the latter.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44893202,
    "by": "dakiol",
    "timeISO": "2025-08-13T20:07:46.000Z",
    "textPlain": "I'm brushing up with Python for a new job, and boy what a ride. Not because of the language itself but the tooling around packages. I'm coming from Go and TS/JS and while these two ecosystems have their own pros and cons, at least they are more or less straightforward to get onboarded (there are 1 or 2 tools you need to know about). In Python there are dozens of tools/concepts related to packaging: pip, easy_install, setuptools, setup.py, pypy, poetry, uv, venv, virtualenv, pipenv, wheels, ...\nThere's even an entire website dedicated to this topic: https://packaging.python.orgDon't understand how a private company like Astral is leading here. Why is that hard for the Python community to come up with a single tool to rule them all? (I know https://xkcd.com/927/). Like, you could even copy what Go or Node are doing, and make it Python-aware; no shame on that. Instead we have these who-knows-how-long-they-will-last tools every now and then.They should remove the \"There should be one-- and preferably only one --obvious way to do it.\" from the Python Zen.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892319,
    "by": "wiseowise",
    "timeISO": "2025-08-13T18:52:13.000Z",
    "textPlain": "Honey wake up, new Astral project just dropped.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892884,
    "by": "cpeterso",
    "timeISO": "2025-08-13T19:42:05.000Z",
    "textPlain": "How do you pronounce \"pyx\"? Pikes, picks, pie-ex?",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892340,
    "by": "ddavis",
    "timeISO": "2025-08-13T18:54:09.000Z",
    "textPlain": "Been waiting to see what Astral would do first (with regards to product). Seems like a mix of artifactory and conda? artifactory providing a package server and conda trying to fix the difficulty that comes from Python packages with compiled components or dependencies, mostly solved by wheels, but of course PyTorch wheels requiring specific CUDA can still be a mess that conda fixes",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892399,
    "by": "TheChaplain",
    "timeISO": "2025-08-13T18:59:17.000Z",
    "textPlain": "Pyx is just a registry, just like Pypi, or did I misunderstood it?",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892334,
    "by": "PaulHoule",
    "timeISO": "2025-08-13T18:53:46.000Z",
    "textPlain": "Been waiting for something like this to make it easier to manage multi-package projects.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892806,
    "by": "shining7526",
    "timeISO": "2025-08-13T19:35:00.000Z",
    "textPlain": "[dead]",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892776,
    "by": "metalliqaz",
    "timeISO": "2025-08-13T19:32:48.000Z",
    "textPlain": "> Waitlist> Private registryouch.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44893301,
    "by": "giancarlostoro",
    "timeISO": "2025-08-13T20:16:15.000Z",
    "textPlain": "Stuff like that led me fully away from Ruby (due to Rails), which is a shame, I see videos of people chugging along with Ruby and loving it, and it looks like a fun language, but when the only way I can get a dev environment setup for Rails is using DigitalOcean droplets, I've lost all interest. It would always fail at compiling something for Rails. I would have loved to partake in the Rails hype back in 2012, but over the years the install / setup process was always a nightmare.I went with Python because I never had this issue. Now with any AI / CUDA stuff its a bit of a nightmare to the point where you use someone's setup shell script instead of trying to use pip at all.",
    "parent": 44893239,
    "depth": 2
  },
  {
    "id": 44892741,
    "by": "woodruffw",
    "timeISO": "2025-08-13T19:30:02.000Z",
    "textPlain": "For what it's worth, I understand this concern. However, I want to emphasize that pyx is intentionally distinct from Astral's tools. From the announcement post:> Beyond the product itself, pyx is also an instantiation of our strategy: our tools remain free, open source, and permissively licensed — forever. Nothing changes there. Instead, we'll offer paid, hosted services that represent the \"natural next thing you need\" when you're already using our tools: the Astral platform.Basically, we're hoping to address this concern by building a separate sustainable commercial product rather than monetizing our open source tools.",
    "parent": 44892499,
    "depth": 2
  },
  {
    "id": 44892948,
    "by": "woodruffw",
    "timeISO": "2025-08-13T19:47:45.000Z",
    "textPlain": "Python packaging has a lot of standards, but I would say most of them (especially in the last decade) don't really compete with each other. They lean more towards the \"slow accretion of generally considered useful features\" style.This itself is IMO a product of Python having a relatively healthy consensus-driven standardization process for packaging, rather than an authoritative one. If Python had more of an authoritative approach, I don't think the language would have done as well as it has.(Source: I've written at least 5 PEPs.)",
    "parent": 44892881,
    "depth": 2
  },
  {
    "id": 44892719,
    "by": "kinow",
    "timeISO": "2025-08-13T19:28:10.000Z",
    "textPlain": "I haven't adopted uv yet watching to see what will be their move. We recently had to review our use of Anaconda tools due to their changes, then review Qt changes in license. Not looking forward to another license ordeal.",
    "parent": 44892454,
    "depth": 2
  },
  {
    "id": 44892924,
    "by": "snooniverse",
    "timeISO": "2025-08-13T19:46:03.000Z",
    "textPlain": "Not sure what you're trying to get at here. Charlie Marsh has literally said this himself; see e.g. this post he made last September:> \"An example of what this might look like (we may not do this, but it's helpful to have a concrete example of the strategy) would be something like an enterprise-focused private package registry.\"https://hachyderm.io/@charliermarsh/113103605702842937Astral has been very transparent about their business model.",
    "parent": 44892454,
    "depth": 2
  },
  {
    "id": 44892508,
    "by": "tmvphil",
    "timeISO": "2025-08-13T19:08:27.000Z",
    "textPlain": "Fundamentally we still have the flat namespace of top level python imports, which is the same as the package name for ~95% of projects, so I'm not sure how they \ncould really change that.",
    "parent": 44892468,
    "depth": 2
  },
  {
    "id": 44892777,
    "by": "cr125rider",
    "timeISO": "2025-08-13T19:32:50.000Z",
    "textPlain": "Once we learn to namespace things it’s gonna be so nice. Seems we keep re-learning that lesson…",
    "parent": 44892468,
    "depth": 2
  },
  {
    "id": 44893345,
    "by": "notatallshaw",
    "timeISO": "2025-08-13T20:19:54.000Z",
    "textPlain": "> easy_installI don't know what guides you're reading but I haven't touched easy_install in at least a decade. It's successor, pip, had effectively replaced all use cases for it by around 2010.",
    "parent": 44893202,
    "depth": 2
  },
  {
    "id": 44893282,
    "by": "formerly_proven",
    "timeISO": "2025-08-13T20:14:18.000Z",
    "textPlain": "> Don't understand how a private company like Astral is leading here. Why is that hard for the Python community to come up with a single tool to rule them all? (I know https://xkcd.com/927/). Like, you could even copy what Go or Node are doing, and make it Python-aware; no shame on that. Instead we have these who-knows-how-long-they-will-last tools every now and then.Python packaging is (largely) solving problems that Go and Node packaging are not even trying to address.",
    "parent": 44893202,
    "depth": 2
  },
  {
    "id": 44893056,
    "by": "woodruffw",
    "timeISO": "2025-08-13T19:56:05.000Z",
    "textPlain": "We've been pronouncing it pea-why-ecks, like uv (you-vee) and ty (tee-why). But I wouldn't say that's permanent yet.",
    "parent": 44892884,
    "depth": 2
  },
  {
    "id": 44892401,
    "by": "notatallshaw",
    "timeISO": "2025-08-13T18:59:49.000Z",
    "textPlain": "Given Astral's heavy involvement in the wheelnext project I suspect this index is an early adopter of Wheel Variants which are an attempt to solve the problems of CUDA (and that entire class of problems not just CUDA specifically) in a more automated way than even conda: https://wheelnext.dev/proposals/pepxxx_wheel_variant_support...",
    "parent": 44892340,
    "depth": 2
  },
  {
    "id": 44892544,
    "by": "woodruffw",
    "timeISO": "2025-08-13T19:11:48.000Z",
    "textPlain": "Not exactly -- part of pyx is a registry (and that part speaks the same standards as PyPI), but the bigger picture is that pyx part of a larger effort to make Python packaging faster and more cohesive for developers.To be precise: pyx isn't intended to be a public registry or a free service; it's something Astral will be selling. It'll support private packages and corporate use cases that are (reasonably IMO) beyond PyPI's scope.(FD: I work on pyx.)",
    "parent": 44892399,
    "depth": 2
  },
  {
    "id": 44892528,
    "by": "bitpush",
    "timeISO": "2025-08-13T19:10:11.000Z",
    "textPlain": "Sounds like it. Also ..>  pyx is also an instantiation of our strategy: our tools remain free, open source, and permissively licensed — forever.",
    "parent": 44892399,
    "depth": 2
  },
  {
    "id": 44892857,
    "by": "yoavm",
    "timeISO": "2025-08-13T19:39:11.000Z",
    "textPlain": "I actually think this is great. If Astral can figure out a way to make money using a private registry (something that is used mainly by companies), then they'll have to resources to keep building their amazing open-source projects — Ruff and uv. That's a huge win for Python.",
    "parent": 44892776,
    "depth": 2
  }
]