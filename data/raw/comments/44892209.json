[
  {
    "id": 44898093,
    "by": "rmonvfer",
    "timeISO": "2025-08-14T08:24:19.000Z",
    "textPlain": "To be honest, this was just a matter of time. As a long time Python developer, I just can’t wrap my head around the lack of something like this. GitHub was going to get hosted packages for Python but never did because it “didn’t align with their strategy objectives and a reallocation of resources” [1] (or some other similar corpospeak)\n Astral is a great company and I think we can’t question what they’ve achieved and provided to the Python community. uv is a game changer and solves one of the core issues with Python by providing a unified tool that’s also fast, reliable and easy to use. In fact, after using uv for the first time (coming from a combination of pyenv + poetry) I never wanted to go back and this is something all of my peers have experienced too.\nI’m glad it’s Astral who is doing this, and of course they will have to make money one way or another (which is perfectly fine and I don’t think anyone on this forum can be against that, as long as they are actually providing real value) but I was honestly tired of the paralysis on this matter. I did try to build a registry (pyhub.net) but being just one person with almost no resources and having another full time business made it impossible.\nAnyway, congrats to the team for the effort!\n[1] https://github.com/orgs/community/discussions/8542",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892499,
    "by": "monster_truck",
    "timeISO": "2025-08-13T19:07:59.000Z",
    "textPlain": "I've been burned too many times by embracing open source products like this.We've been fed promises like these before. They will inevitably get acquired. Years of documentation, issues, and pull requests will be deleted with little-to-no notice. An exclusively commercial replacement will materialize from the new company that is inexplicably missing the features you relied on in the first place.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44894063,
    "by": "runningmike",
    "timeISO": "2025-08-13T21:27:04.000Z",
    "textPlain": "All python packaging challenges are solved. Lesson learned is that there is not a single solution for all problems. getting more strings attached with VC funded companies and leaning on their infrastructure is a high risk for any FOSS community.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44898100,
    "by": "alexshagov",
    "timeISO": "2025-08-14T08:25:21.000Z",
    "textPlain": "I personally use Nixpkgs to fully isolate python installation on per project basis. And inside this isolated env, once python is built, usually using pip is enough and works wellThis way, !each of my repositories has its own nix file defining the list of dependencies and it can easily be built per system as well",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44893239,
    "by": "m_kos",
    "timeISO": "2025-08-13T20:10:22.000Z",
    "textPlain": "> Why is it so hard to install PyTorch, or CUDA, or libraries like FlashAttention or DeepSpeed that build against PyTorch and CUDA?This is so true! On Windows (and WSL) it is also exacerbated by some packages requiring the use of compilers bundled with outdated Visual Studio versions, some of which are only available by manually crafting download paths. I can't wait for a better dev experience.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892578,
    "by": "simonw",
    "timeISO": "2025-08-13T19:14:28.000Z",
    "textPlain": "This is effectively what Charlie said they were going to build last September when quizzed about their intended business model on Mastodon: https://hachyderm.io/@charliermarsh/113103564055291456",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892881,
    "by": "_verandaguy",
    "timeISO": "2025-08-13T19:41:35.000Z",
    "textPlain": "Soon: there are 14 competing Python packaging standards.This is a joke, obviously. We've had more than 14 for years.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44896240,
    "by": "twarge",
    "timeISO": "2025-08-14T02:44:53.000Z",
    "textPlain": "The real pyx is an absolutely wonderful graphing package. It's like Tex in that everything looks wonderful and publication-quality.https://pyx-project.org/gallery/graph/index.html",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892454,
    "by": "ctoth",
    "timeISO": "2025-08-13T19:03:56.000Z",
    "textPlain": "As I said a couple weeks ago, they're gonna have to cash out at some point. The move won't be around Uv -- it'll be a protected private PyPi or something.https://news.ycombinator.com/item?id=44712558Now what do we have here?",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44893113,
    "by": "m4r71n",
    "timeISO": "2025-08-13T20:01:08.000Z",
    "textPlain": "What does GPU-aware mean in terms of a registry? Will `uv` inspect my local GPU spec and decide what the best set of packages would be to pull from Pyx?Since this is a private, paid-for registry aimed at corporate clients, will there be an option to expose those registries externally as a public instance, but paid for by the company? That is, can I as a vendor pay for a Pyx registry for my own set of packages, and then provide that registry as an entrypoint for my customers?",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44895007,
    "by": "jsmeaton",
    "timeISO": "2025-08-13T23:14:55.000Z",
    "textPlain": "Astral folks that are around - there seems to be a bit of confusion in the product page that the blog post makes a little more clear.> The next step in Python packagingThe headline is the confusing bit I think - \"oh no, another tool already?\"IMO you should lean into stating this is going to be a paid product (answering how you plan to make money and become sustainable), and highlight that this will help solve private packaging problems.I'm excited by this announcement by the way. Setting up scalable private python registries is a huge pain. Looking forward to it!",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44897109,
    "by": "rcleveng",
    "timeISO": "2025-08-14T05:43:16.000Z",
    "textPlain": "Just try using ux with Google Artifact Registry and AWS CodeArtifact.  You need the username in the URL with GAR and you need it in the environment variable with AWS.  I'm not sure who's causing the pain with using uv with private repositories (but I'd bet it's uv), but they are selling a solution to that pain.Full disclosure, uv rocks and is way better than poetry, setuptools and whatever complicated and non-zen way packaging python has had in the past.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44893498,
    "by": "rob",
    "timeISO": "2025-08-13T20:31:39.000Z",
    "textPlain": "Is there a big enough commercial market for private Python package registries to support an entire company and its staff? Looks like they're hiring for $250k engineers, starting a $26k/year OSS fund, etc. Expenses seem a bit high if this is their first project unless they plan on being acquired?",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44893202,
    "by": "dakiol",
    "timeISO": "2025-08-13T20:07:46.000Z",
    "textPlain": "I'm brushing up with Python for a new job, and boy what a ride. Not because of the language itself but the tooling around packages. I'm coming from Go and TS/JS and while these two ecosystems have their own pros and cons, at least they are more or less straightforward to get onboarded (there are 1 or 2 tools you need to know about). In Python there are dozens of tools/concepts related to packaging: pip, easy_install, setuptools, setup.py, pypy, poetry, uv, venv, virtualenv, pipenv, wheels, ...\nThere's even an entire website dedicated to this topic: https://packaging.python.orgDon't understand how a private company like Astral is leading here. Why is that hard for the Python community to come up with a single tool to rule them all? (I know https://xkcd.com/927/). Like, you could even copy what Go or Node are doing, and make it Python-aware; no shame on that. Instead we have these who-knows-how-long-they-will-last tools every now and then.They should remove the \"There should be one-- and preferably only one --obvious way to do it.\" from the Python Zen.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44893646,
    "by": "JackYoustra",
    "timeISO": "2025-08-13T20:46:45.000Z",
    "textPlain": "The real thing that I hope someone is able to solve is downloading such huge amounts of unnecessary code. As I understand, the bulk of the torch binary is just a huge nvfatbin compiled for every SM under the sun when you usually just want it to run on whatever accelerators you have on hand. Even just making narrow builds of like `pytorch-sm120a` (with stuff like cuBLAS thin binaries paired with it too) as part of a handy uv extra or something like that would make it much quicker and easier.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44894287,
    "by": "jacques_chester",
    "timeISO": "2025-08-13T21:52:17.000Z",
    "textPlain": "Interesting watching this part of the landscape heating up. For repos you've got stalwarts like Artifactory and Nexus, with upstart Cloudsmith. For libraries you've got the OG ActiveState, Chainguard Libraries and, until someone is distracted by a shiny next week, Google Assured Open Source.Sounds like Pyx is trying to do a bit of both.Disclosure: I have interacted a bunch with folks from all of these things. Never worked for or been paid by, though.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44894322,
    "by": "lvl155",
    "timeISO": "2025-08-13T21:55:15.000Z",
    "textPlain": "I don’t know how I feel about one company dominating this space. I love what they do but what happens 5 years down the road?",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44893508,
    "by": "fph",
    "timeISO": "2025-08-13T20:32:34.000Z",
    "textPlain": "I lost track of how many different ways to install a Python library there are at the moment.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892340,
    "by": "ddavis",
    "timeISO": "2025-08-13T18:54:09.000Z",
    "textPlain": "Been waiting to see what Astral would do first (with regards to product). Seems like a mix of artifactory and conda? artifactory providing a package server and conda trying to fix the difficulty that comes from Python packages with compiled components or dependencies, mostly solved by wheels, but of course PyTorch wheels requiring specific CUDA can still be a mess that conda fixes",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892468,
    "by": "Myrmornis",
    "timeISO": "2025-08-13T19:05:17.000Z",
    "textPlain": "I wonder whether it will have a flat namespace that everyone competes over or whether the top-level keys will be user/project identifiers of some sort. I hope the latter.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44897404,
    "by": "dirkc",
    "timeISO": "2025-08-14T06:41:05.000Z",
    "textPlain": "My 2c when it comes to python packaging:1. do dev in an isolated environment like docker2. install deps from config - ie. build a new image when adding a dep",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44898004,
    "by": "nprateem",
    "timeISO": "2025-08-14T08:12:23.000Z",
    "textPlain": "An amazing number of words that basically say nothing",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44898109,
    "by": "jones89176",
    "timeISO": "2025-08-14T08:26:18.000Z",
    "textPlain": "Obligatory xkcd: https://xkcd.com/1987/(I've seen https://xkcd.com/927/ in the comments a few times, but apparently I'm the first one who had this one in mind)",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44897513,
    "by": "pjmlp",
    "timeISO": "2025-08-14T06:58:29.000Z",
    "textPlain": "How many Python packaging solutions do we need?Thankfully I only use it for OS and application scripting and keep myself to the standard library and application exposed APIs as much as possible, even if there are marvelous alternatives outside the standard library.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44897364,
    "by": "renewiltord",
    "timeISO": "2025-08-14T06:34:44.000Z",
    "textPlain": "`uv` is incredible software and I love it. I am willing to try anything from this team.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44894933,
    "by": "nixpulvis",
    "timeISO": "2025-08-13T23:05:36.000Z",
    "textPlain": "Can I ask a dumb question. Why does Ruby (for example) not have this problem, but python still can't ship a standard solution which isn't constantly changing and rolled up in some corporate offering?",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44895744,
    "by": "sdotdev",
    "timeISO": "2025-08-14T01:14:59.000Z",
    "textPlain": "When this releases it will be crazy, Ive always wondered why something like this didn't already exist.Really useful concept especially for school.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44894194,
    "by": "rtpg",
    "timeISO": "2025-08-13T21:41:10.000Z",
    "textPlain": "I really want to pay someone money to run package repo mirrors for me, but my problems have been more with npm than with Pypi. Astral, if you're listening.... maybe tackle JS packaging too?",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44894580,
    "by": "NeutralForest",
    "timeISO": "2025-08-13T22:22:08.000Z",
    "textPlain": "Cool idea! I think I could benefit from this at my job if they're able to eat Anaconda's lunch and provide secure, self-hosted artifacts.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44894321,
    "by": "hommes-r",
    "timeISO": "2025-08-13T21:55:08.000Z",
    "textPlain": "Only thing that is unclear to me is to which extend this setup depends on the package publisher. PyPi might be terrible at least it just works when you want to publish that it leads to more complexity for the ones that are looking to use this piece of free software is not for the maintainer.Maybe they are only targeting dev tooling companies as a way to simplify how they distribute. Especially in the accelerated compute era.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44897165,
    "by": "enmyj",
    "timeISO": "2025-08-14T05:55:04.000Z",
    "textPlain": "using mypy regularly on a large project is pretty slow and painful, so I personally welcome any improvements no matter the origin!!",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44896618,
    "by": "megamix",
    "timeISO": "2025-08-14T04:01:50.000Z",
    "textPlain": "No Thanks. For majority of my use case pip is just fine. I’m not here to chase time just to live life",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892399,
    "by": "TheChaplain",
    "timeISO": "2025-08-13T18:59:17.000Z",
    "textPlain": "Pyx is just a registry, just like Pypi, or did I misunderstood it?",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44894231,
    "by": "kristoff_it",
    "timeISO": "2025-08-13T21:44:46.000Z",
    "textPlain": "Is this going to solve the combinatorial explosion of pre-building native dependencies for every possible target?Python should get rid of its training wheels :^)https://kristoff.it/blog/python-training-wheels/",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44894458,
    "by": "no_wizard",
    "timeISO": "2025-08-13T22:09:19.000Z",
    "textPlain": "Good on you guys!I wanted to start a business exactly like this years ago, when I actually worked in Python. I ended up not doing so, because at the time (circa 2014-2015) I was told it would never take off, no way to get funding.I'm glad you're able to do what ultimately I was not!",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44895515,
    "by": "kccqzy",
    "timeISO": "2025-08-14T00:32:26.000Z",
    "textPlain": "I hate that they are using the pyx name; it's the extension for Cython files. It's going to cause at least a moment of confusion for people. They could have easily checked for name collision in the Python ecosystem but they chose not to do that; that's like a middle finger gesture to the community.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44894042,
    "by": "FergusArgyll",
    "timeISO": "2025-08-13T21:24:32.000Z",
    "textPlain": "Astral is the coolest startup",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44897067,
    "by": "gnubee",
    "timeISO": "2025-08-14T05:35:35.000Z",
    "textPlain": "Isn't all of this solved with containers (or virtual machines)? Just lxc/lxd/docker a new container, and no more worries about virtual environments or conda or whatever other bandaids. A container per project. A container per version of a project. Heck, a container per package in a project!",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892334,
    "by": "PaulHoule",
    "timeISO": "2025-08-13T18:53:46.000Z",
    "textPlain": "Been waiting for something like this to make it easier to manage multi-package projects.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44897235,
    "by": "kergonath",
    "timeISO": "2025-08-14T06:10:45.000Z",
    "textPlain": "Sweet. Yet another Python packaging silver bullet. I can’t wait to ignore this one while I am waiting for next month’s.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892884,
    "by": "cpeterso",
    "timeISO": "2025-08-13T19:42:05.000Z",
    "textPlain": "How do you pronounce \"pyx\"? Pikes, picks, pie-ex?",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44897400,
    "by": "chickenzzzzu",
    "timeISO": "2025-08-14T06:40:37.000Z",
    "textPlain": "This industry is fucking doomed.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44895411,
    "by": "zeckalpha",
    "timeISO": "2025-08-14T00:12:51.000Z",
    "textPlain": "> There should be one-- and preferably only one --obvious way to do it.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44893962,
    "by": "nilslindemann",
    "timeISO": "2025-08-13T21:17:32.000Z",
    "textPlain": "I do not trust Astral.Much ad language.They do not explain what an installation of their software does to my system.They use the word \"platform\".",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44895477,
    "by": "safetytrick",
    "timeISO": "2025-08-14T00:27:02.000Z",
    "textPlain": "Python packaging is the least zen of python thing about python.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892806,
    "by": "shining7526",
    "timeISO": "2025-08-13T19:35:00.000Z",
    "textPlain": "If uv can install a Python version in 32ms (a time that I saw and confirmed just this morning), then sign me up.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44896979,
    "by": "__loam",
    "timeISO": "2025-08-14T05:20:37.000Z",
    "textPlain": "Python devs need to find God",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44895969,
    "by": "CivBase",
    "timeISO": "2025-08-14T01:58:13.000Z",
    "textPlain": "I feel like I must be the crazy one for never having a problem with just vanilla pip, PyPi, and venv (or virtualenv for old Python 2 stuff). Maybe it's just my use case?",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44893728,
    "by": "forrestthewoods",
    "timeISO": "2025-08-13T20:56:09.000Z",
    "textPlain": "Neat. uv is spectacular.But I don’t get it. How does it work? Why is it able to solve the Python runtime dependency problem? I thought uv had kinda already solved that? Why is a new thingy majig needed?",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44894264,
    "by": "pshirshov",
    "timeISO": "2025-08-13T21:49:39.000Z",
    "textPlain": "Again! ezsetup, setuptools, conda, poetry, uv, now this.",
    "parent": 44892209,
    "depth": 1
  }
]