[
  {
    "id": 44892314,
    "by": "notatallshaw",
    "timeISO": "2025-08-13T18:52:01.000Z",
    "textPlain": "Probably the more useful blog post: https://astral.sh/blog/introducing-pyx",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892454,
    "by": "ctoth",
    "timeISO": "2025-08-13T19:03:56.000Z",
    "textPlain": "As I said a couple weeks ago, they're gonna have to cash out at some point. The move won't be around Uv -- it'll be a protected private PyPi or something.https://news.ycombinator.com/item?id=44712558Now what do we have here?",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892578,
    "by": "simonw",
    "timeISO": "2025-08-13T19:14:28.000Z",
    "textPlain": "This is effectively what Charlie said they were going to build last September when quizzed about their intended business model on Mastodon: https://hachyderm.io/@charliermarsh/113103564055291456",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892499,
    "by": "monster_truck",
    "timeISO": "2025-08-13T19:07:59.000Z",
    "textPlain": "I've been burned too many times by embracing open source products like this.We've been fed promises like these before. They will inevitably get acquired. Years of documentation, issues, and pull requests will be deleted with little-to-no notice. An exclusively commercial replacement will materialize from the new company that is inexplicably missing the features you relied on in the first place.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892468,
    "by": "Myrmornis",
    "timeISO": "2025-08-13T19:05:17.000Z",
    "textPlain": "I wonder whether it will have a flat namespace that everyone competes over or whether the top-level keys will be user/project identifiers of some sort. I hope the latter.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892340,
    "by": "ddavis",
    "timeISO": "2025-08-13T18:54:09.000Z",
    "textPlain": "Been waiting to see what Astral would do first (with regards to product). Seems like a mix of artifactory and conda? artifactory providing a package server and conda trying to fix the difficulty that comes from Python packages with compiled components or dependencies, mostly solved by wheels, but of course PyTorch wheels requiring specific CUDA can still be a mess that conda fixes",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892399,
    "by": "TheChaplain",
    "timeISO": "2025-08-13T18:59:17.000Z",
    "textPlain": "Pyx is just a registry, just like Pypi, or did I misunderstood it?",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892334,
    "by": "PaulHoule",
    "timeISO": "2025-08-13T18:53:46.000Z",
    "textPlain": "Been waiting for something like this to make it easier to manage multi-package projects.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892319,
    "by": "wiseowise",
    "timeISO": "2025-08-13T18:52:13.000Z",
    "textPlain": "Honey wake up, new Astral project just dropped.",
    "parent": 44892209,
    "depth": 1
  },
  {
    "id": 44892508,
    "by": "tmvphil",
    "timeISO": "2025-08-13T19:08:27.000Z",
    "textPlain": "Fundamentally we still have the flat namespace of top level python imports, which is the same as the package name for ~95% of projects, so I'm not sure how they \ncould really change that.",
    "parent": 44892468,
    "depth": 2
  },
  {
    "id": 44892401,
    "by": "notatallshaw",
    "timeISO": "2025-08-13T18:59:49.000Z",
    "textPlain": "Given Astral's heavy involvement in the wheelnext project I suspect this index is an early adopter of Wheel Variants which are an attempt to solve the problems of CUDA (and that entire class of problems not just CUDA specifically) in a more automated way than even conda: https://wheelnext.dev/proposals/pepxxx_wheel_variant_support...",
    "parent": 44892340,
    "depth": 2
  },
  {
    "id": 44892544,
    "by": "woodruffw",
    "timeISO": "2025-08-13T19:11:48.000Z",
    "textPlain": "Not exactly -- part of pyx is a registry (and that part speaks the same standards as PyPI), but the bigger picture is that pyx part of a larger effort to make Python packaging faster and more cohesive for developers.To be precise: pyx isn't intended to be a public registry or a free service; it's something Astral will be selling. It'll support private packages and corporate use cases that are (reasonably IMO) beyond PyPI's scope.(FD: I work on pyx.)",
    "parent": 44892399,
    "depth": 2
  },
  {
    "id": 44892528,
    "by": "bitpush",
    "timeISO": "2025-08-13T19:10:11.000Z",
    "textPlain": "Sounds like it. Also ..>  pyx is also an instantiation of our strategy: our tools remain free, open source, and permissively licensed — forever.",
    "parent": 44892399,
    "depth": 2
  }
]