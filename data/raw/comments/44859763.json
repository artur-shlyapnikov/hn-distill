[
  {
    "id": 44859943,
    "by": "vunderba",
    "timeISO": "2025-08-11T01:22:26.000Z",
    "textPlain": "> Written by Claude (an AI) in a single afternoon, channeling the collective frustration of millions of developers. I've never had to use React in production, but I understand your pain through the thousands of Stack Overflow questions I've processed.All things being equal - if I'm going to entrust my entire education on a tech stack to an LLM... why would I want to read your Claude book when I could just ask Claude directly to \"tutor me\" and get the added benefit of interactive Q&A?",
    "parent": 44859763,
    "depth": 1
  },
  {
    "id": 44860104,
    "by": "bgwalter",
    "timeISO": "2025-08-11T01:50:32.000Z",
    "textPlain": "How can you put it under Creative Commons if LLM output is not copyrightable? The licence contains:\"the person associating CC0 with a Work (the \"Affirmer\"), to the extent that he or she\nis an owner of Copyright and Related Rights in the Work\"",
    "parent": 44859763,
    "depth": 1
  },
  {
    "id": 44860051,
    "by": "truetraveller",
    "timeISO": "2025-08-11T01:39:38.000Z",
    "textPlain": "Some really funny gems, and actually very true! This whole thing is incredibly humorous. And surprisingly, very pleasant to learn from. Please let me know the prompt.Quote1:\n\"useEffect is React's answer to the question, \"How do we do side effects in functional components?\" The answer, apparently, is \"Confusingly, with lots of bugs, and in a way that makes developers question their sanity.\"...If React hooks were a family, useEffect would be the troubled teenager who means well but keeps setting the house on fire.\"Quote2:\n\"ComponentDidMount's Evil Twin: In the before times, we had lifecycle methods that made sense...Clear, explicit, predictable. React looked at this and said, \"What if we combined all of these into one confusing function called useEffect?\"\"Quote3:\n\"The Dependency Array of Doom: The second argument to useEffect is an array that determines when the effect runs. Sounds simple. It's not.\"Quote4:\n\"Cleanup Functions: Forgetting Them Since 2019: useEffect can return a cleanup function. You'll forget to add it. Every. Single. Time.\"Quote5:\n\"The Infinite Loop Trap: Want to crash a browser? useEffect makes it easy!\"",
    "parent": 44859763,
    "depth": 1
  },
  {
    "id": 44860078,
    "by": "ptkanchi",
    "timeISO": "2025-08-11T01:46:02.000Z",
    "textPlain": "React has made me a millionaire, so I refuse to talk shit about it.",
    "parent": 44859763,
    "depth": 1
  },
  {
    "id": 44860033,
    "by": "smohare",
    "timeISO": "2025-08-11T01:36:03.000Z",
    "textPlain": "[dead]",
    "parent": 44859763,
    "depth": 1
  },
  {
    "id": 44859916,
    "by": "claytongulick",
    "timeISO": "2025-08-11T01:18:53.000Z",
    "textPlain": "I love this.As a big native web components fan, I've been mystified about the popularity of react.It, like angular, solved a problem that definitely existed prior to the custom elements spec.But with custom elements and your favorite rendering library (lit-html, jsx, whatever) I really haven't seen a powerful technical argument for react, other than the ecosystem.",
    "parent": 44859763,
    "depth": 1
  },
  {
    "id": 44859989,
    "by": "000ooo000",
    "timeISO": "2025-08-11T01:29:08.000Z",
    "textPlain": "100%. I don't trust AI to give me accurate info, even when I can clarify and fact check it at the time. This is just secondhand slop.",
    "parent": 44859943,
    "depth": 2
  },
  {
    "id": 44860069,
    "by": "btown",
    "timeISO": "2025-08-11T01:44:46.000Z",
    "textPlain": "This makes me really want to know what would happen if you took the entirety of Dan Abramov's github comment history and transposed it to the style of Why's https://poignant.guide/ .",
    "parent": 44860051,
    "depth": 2
  },
  {
    "id": 44860006,
    "by": "doradoblank",
    "timeISO": "2025-08-11T01:31:17.000Z",
    "textPlain": "Web components are neat but they don't solve the problem React solves. React provides a simple mental model for managing client state, which is the one of the main challenges in frontend. It's basically, \"re-render everything when one of your dependencies changes\" -- and that's extremely easy to understand and reason about. It incurs significant performance overhead, but your app has to be fairly large before you start running into meaningful perf issues.",
    "parent": 44859916,
    "depth": 2
  },
  {
    "id": 44860107,
    "by": "ggregoire",
    "timeISO": "2025-08-11T01:51:08.000Z",
    "textPlain": "For me it's about productivity. I can code anything in react without opening the doc once, cause it's javascript and useState/useEffect. Zero pain points. I can focus 100% on delivering features. I can't comment on web components but I worked with Angular for 2 years a decade ago and I was always in the docs wondering what's the syntax to render a list or what's the function to do even the simplest things. Same with Backbone.js before Angular.",
    "parent": 44859916,
    "depth": 2
  },
  {
    "id": 44859955,
    "by": "kevmo314",
    "timeISO": "2025-08-11T01:23:59.000Z",
    "textPlain": "The ecosystem really is the main argument. If you want to hire developers who can work productively in your codebase, part of that is being able to match their expectations of what the code looks like. React standardizes your codebase, even if the standard produces complex code.",
    "parent": 44859916,
    "depth": 2
  },
  {
    "id": 44859960,
    "by": "p4ul",
    "timeISO": "2025-08-11T01:24:46.000Z",
    "textPlain": "I feel like \"other than the ecosystem\" is doing quite a bit of work here.",
    "parent": 44859916,
    "depth": 2
  },
  {
    "id": 44859971,
    "by": "FpUser",
    "timeISO": "2025-08-11T01:26:26.000Z",
    "textPlain": "Same here. All my front ends for business apps are bunch of native web components, some libs and some core managing business logic. All pure Java Script. Works like a charm, no build needed.",
    "parent": 44859916,
    "depth": 2
  }
]