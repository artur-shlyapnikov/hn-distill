[
  {
    "id": 44786449,
    "by": "linkage",
    "timeISO": "2025-08-04T14:39:28.000Z",
    "textPlain": "Java is more akin to the Corolla. Utterly insipid (by design), lacking in refinements compared to competitors like the Mazda3, and made for people who just see it as a way to get from point A to point B.PHP is the Hyundai Elantra of programming. It used to be popular because of low adoption costs but was the butt of jokes for a long time because of its questionable design and poor reliability. But like the Elantra, it has come a long way and is actually decent these days.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44787226,
    "by": "iainctduncan",
    "timeISO": "2025-08-04T15:30:53.000Z",
    "textPlain": "PHP did well for ONE reason: it was really, really, really easy to deploy. This was, of course, underestimated by programmers in the know, but I remember first getting into web dev, and I could start putting real programs (!!!) on the web, in minutes!I would say it was more like the bicycle. Cheap, no license, even a kid could be suddenly zooming around town with no ceremony, no red tape, minimal investment.I haven't used it in well over a decade, but still remember fondly how great it was as a gateway drug to bigger and better things.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44787079,
    "by": "kstrauser",
    "timeISO": "2025-08-04T15:21:07.000Z",
    "textPlain": "PHP is so hard for me to describe. I used it a lot in the late 90s when we were migrating off mod_perl because it was a great way to add dynamic data to otherwise static pages, and no one really knew how to develop large sites yet. We were making it up as we went along. But ye gods, the language was bad. “A poor craftsman blames his tools” and all that, but imagine a screwdriver with 2 handles and 3 tips projecting at random angles. Sure, you could assemble an IKEA desk with it, but would you want to? And would you look suspiciously at anyone who claimed to love that weird screwdriver when the equivalent of a Snap-On was available for free from the same place they got the weirdo?I think that’s the root of much of the horror. No one would bat an eye at using PHP to add little bits of server-side content here and there. It’s great for that! But then you see the giant castles of non-Euclidean horror built with it, and people pointing to them and saying “see what you can built with that weird screwdriver?”, and parts of the castles randomly fall off and kill their owners. No! While that’s impressive, it doesn’t exactly inspire confidence in the screwdriver, or in the people who keep using it to build things larger than it was clearly able to do well. But heaven help you if you point out that there are saner screwdrivers. “You’re just being close minded and out of touch! We added another handle to it and removed the razor blade so it’s much better now!”Maybe so, but wow, it’s still one hell of an odd screwdriver.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44786262,
    "by": "PaulHoule",
    "timeISO": "2025-08-04T14:25:41.000Z",
    "textPlain": "Other languages caught up with PHP.As I remember it all the early languages that let you write code inline with the HTML were proprietary such as server-side Javascript built into Netscape's web server,  ColdFusion,  ASP,  etc.PHP was the first of these that was open source and basically competent which made it my #1 choice for making web applications in 2001.  Compared to many other languages (say cgi-bin) it was pretty fast without a build step and had enough resource management that hosting firms could offer cheap PHP hosting plans which made world-changing open source products like Wordpress deployable.It got long in the tooth quickly because people realized that to make quality web applications you had to have a part of your framework (a \"router\") which could serve different pages based on the inputs.  For example,  if you are doing server-side error handling on a form you either display a form that says \"successful\" or you re-display the form with error messages.  You certainly can write PHP that does that if you have some discipline,  but once you introduce a router you might as well write your \"views\" with some kind of templating system and after ruby-on-rails every language got frameworks,  typically Sinatra-like,  which were about as comfortable as PHP and that pushed you into having some discipline.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44786528,
    "by": "Zak",
    "timeISO": "2025-08-04T14:44:59.000Z",
    "textPlain": "The author makes a fair point that the language is no longer the fractal of bad design it was in 2009, but doesn't make the case for starting a green field project with it in 2025.What does it do better than other languages? The article mentions features that sound like parity with other modern languages, but nothing that stands out.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44786340,
    "by": "ChrisMarshallNY",
    "timeISO": "2025-08-04T14:30:39.000Z",
    "textPlain": "I’ve used PHP for more than 20 years. It’s my “go-to” language for the backend. I’m not a server programmer, and PHP is fast, well-supported, and, if you’re a decent programmer, you can write robust, secure, performant servers in it.I also really don’t like the language. I’ve never warmed to it.But I think it will still be around, as a principal backend language, for the next fifty years.I feel like this graph says it all: https://w3techs.com/technologies/history_overview/programmin...I call it \"The Fishtank Graph,\" for obvious reasons.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44786376,
    "by": "jamil7",
    "timeISO": "2025-08-04T14:34:27.000Z",
    "textPlain": "The article loses impact due to the way the author keeps self-conciously mentioning how the \"PHP haters\" are wrong instead of just explaining the possible usecase for PHP better.I've never really used it but it would have been somewhat useful to know why anyone would choose this language for a greenfield project in 2025, given the choices available. The reasons given are pretty unconvincing to me.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44788127,
    "by": "JohnMakin",
    "timeISO": "2025-08-04T16:32:53.000Z",
    "textPlain": "I fell in love with PHP in kind of a funny way (and looking at my career now, was probably an indicator I was destined for what I do now) because it saved me during college.My 2nd to last quarter I had to cram 20 difficult units because of some requirement I had somehow missed. Part of that was a 5 unit web development project/lecture course. Our project was to build an ecommerce site. We were introduced to several paradigms of how to build end to end, PHP being one of them - and as other commenters have noted, what I particularly liked was its ease of deployment.However, the class at the end pushed everyone towards vanilla JS, which I have never had much success working with and to be honest kind of loathed it. I could not deploy the site with it on the school servers - apparently I wasn't the only one.So, I looked carefully at the rubric and realized only 20% of it was code evaluation. The rest was site design, and one massive chunk of the grade was simply just getting it deployed by the deadline.So, I wrote it in php because I knew 1000% it would work and I could get it running on time. The TA wanted to fail the project, but since only 20% of the grade was code, I got a B-. Almost everyone failed because only a few people could get it deployed at all.I'd love to work on modern PHP projects but don't know where to start or what even is out there, people just scoff at it because it looks horribly ugly and its history of security flaws.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44786290,
    "by": "normie3000",
    "timeISO": "2025-08-04T14:27:44.000Z",
    "textPlain": "Aren't Corollas reputed to be functional and reliable? Seems like a weird analogy.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44786250,
    "by": "lucasyvas",
    "timeISO": "2025-08-04T14:24:42.000Z",
    "textPlain": "PHP is a DeLorean. I think I encountered 10 segfaults in it within 1 year which is a complete joke. This was only two years ago.It also includes breaking changes in point releases which is a nonsensical maintenance strategy - this is in stark contrast to the reputation of stability in a Corolla.While PHP may have some strengths, it immediately fails this particular comparison.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44788463,
    "by": "teunispeters",
    "timeISO": "2025-08-04T16:55:41.000Z",
    "textPlain": "Emphatically no.  PHP is the ford escort of programming (needing regular maintenance, rather insecure but easy and simple to drive and control).  Unlike the Toyota Corolla which is really REALLY reliable, consistent and much much more secure.(as someone who's maintained a lot of different vehicles for years and a lot of programming languages this doesn't even quite cut it.  PHP is a lemon car).",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44786530,
    "by": "0xbadcafebee",
    "timeISO": "2025-08-04T14:45:04.000Z",
    "textPlain": "I think the author means the Nissan Versa of programming. Corollas are quite a bit more expensive and hold value longer. But both are very useful.I've written more shell scripts than any other language for close to a decade now. The reason is simple: I'm not writing web apps. I mostly do system programming (that is to say, tasks needed to build or maintain a system or are generally user-focused yet non-interactive). You don't need more than a shell script for most of that.My contemporaries will, of course, pooh-pooh a shell script on general principle. If it's not using a more \"advanced language\" it must be unreliable or unmaintainable or ugly. Yet the practical experience of writing programs in multiple languages over years leads me to the same conclusion: literally any language will do. You could use BASIC for system programming. You could use ASM. It will work. People will argue over whether one language is \"better\" than another, but who cares if it's better or not? If it works it works. But that's because nearly any language works for that kind of program. Other kinds of programs need advanced features, so you need a more advanced language. But for simple tasks? It doesn't matter.To go back to the car analogy: you can use literally any car to pick up groceries. You can't use any car to pick up 3,000lbs of sandbags.If we were scientists and not craftspeople, none of these discussions would be relevant. We'd pick up the tool designed for our specific purpose and not bicker over our personal preferences or idealistic principles. But our languages, and our approach to using them, is anything but scientific. We're just a bunch of tradies talking shit at the water cooler.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44789484,
    "by": "kevdoran",
    "timeISO": "2025-08-04T18:10:44.000Z",
    "textPlain": "Having used many of the 'Toyota Corollas' to build web apps, do any others feel a little pang of frustration that, here in 2025, teams have the choice of using TypeScript on both the client and the server and choose not to?\"Use this other language I know for the backend, it's the [reliable car model]. It's the {Latin, Swahili, English} of the programming world. It's JVM, it's PHP, it's Python, it's Ruby, it's C#'\"I feel that after a decade of jumping between systems, TypeScript is now the \"good enough\" language. We have to use it on the client. Now we can use it on the server.The weird side-projects vibes node libraries had in the 2010's have matured into fully supported production systems in the 2020s.And I've never been happier. It's a fine choice for the backend, and it's not really optional on the frontend. Which is important: like a lingua franca, TS/JS is not optional in a web app. This is not an attribute which PHP shares.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44788320,
    "by": "cies",
    "timeISO": "2025-08-04T16:46:08.000Z",
    "textPlain": "The Corolla was simple but very well designed; it's manuals were used in classes teaching car mechanics.PHP was not well designed. No one learning to program should choose it as a first language. That fact that people did choose it was because it was free, easier than Perl and cheap/easy to deploy (in the shared hosting era).You are better off starting with a typed language like C#/Java/Kotlin (for OO-first) or OCaml/F# (for FP-first) or even Golang.PHP sets you back if chosen as a first language.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44786734,
    "by": "DonHopkins",
    "timeISO": "2025-08-04T14:58:48.000Z",
    "textPlain": "Common Lisp is the Bagger 288 of programming!https://www.youtube.com/watch?v=azEvfD4C6owhttps://en.wikipedia.org/wiki/Bagger_288",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44788613,
    "by": "pkphilip",
    "timeISO": "2025-08-04T17:06:43.000Z",
    "textPlain": "I have programmed using Php for at least 25 years. While PHP did start off being quite poorly designed for security, newer versions of Php and also the PHP frameworks like Laravel, Yii etc have become quite sophisticated over the years and is a really good alternative to frameworks like Rails etc.The CMS frameworks have also improved quite a bit.The improvements in PHP include big performance gains - PHP 7 was a huge improvement over PHP 5 and now PHP 8 also includes a JIT), improvements in the language such as a type system, object orientation, improved error handling etc.PHP 8 is a lot faster (about 3x) faster than Python.https://sailingbyte.com/blog/php5-to-php8-modern-programming...",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44786766,
    "by": "AnotherGoodName",
    "timeISO": "2025-08-04T15:00:54.000Z",
    "textPlain": "I always found Hack interesting. It's PHP slowly transformed step by step into something closer to Java (Java isn't as bad as new grads claim, compared to PHP it's actually great). It's pretty much exclusively used at Meta.Basically what they did is they had repeated codemods (changes to the entire codebase with automated tooling) that bit by bit moved PHP closer to Java. More and more static typing, generics, all the common Java ADTs (Vector, Map, Set, Pair, etc.), bytecode+JIT execution, etc.Essentially instead of rewriting the codebase to a better language they just changed the language itself. Which makes sense since PHP is a much smaller codebase than the Meta backend.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44789800,
    "by": "Einenlum",
    "timeISO": "2025-08-04T18:38:50.000Z",
    "textPlain": "I'm quite surprised that the article doesn't mention Laravel.PHP as a language? Definitely getting better but still not great. Doesn't support async, the stdlib is awful, data structures are quite rudimentary (no tuple, no list, no map, just a weird array type mixing maps and lists), the old extension system sucks.But the ecosystem? Damn. I see many people here saying that Typescript is definitely the mature choice for the backend. Honestly, I wanted to believe it, but I disagree. The level of productivity with Laravel is absolutely insane. You have everything you need out of the box and you can launch something so fast it's almost unreal.Typescript doesn't have that. Maybe it's because of a different mentality in this ecosystem (you should build your blocks yourself), but nothing comes close. The closest would be Adonisjs but it doesn't seem to gain traction.You don't choose a language to build your web project. You choose a stack. A framework.\nI definitely prefer python but Django has way less features than Laravel and I don't really enjoy using it. Typescript on the backend was a thing I wanted to believe in (because sharing types between the front and back is a great idea), but I feel like I have to reinvent the wheel, or at least choose 20 different wheels to do something quite simple.Is Ruby such a great language, or do people just love being productive with Rails? It seems to me that the usage of Ruby without Rails is quite low (I could be wrong).People choose and stick with stacks, not just languages. And I couldn't find something equivalent to Laravel elsewhere. Give me an equally productive stack and I'll happily drop PHP.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44787869,
    "by": "PeterStuer",
    "timeISO": "2025-08-04T16:13:50.000Z",
    "textPlain": "There's few programming environments I hated more viscerally than PHP. Yes, it got the job done. But thank God I never had to maintain that giant kludge of duct tape and elastic bands.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44789198,
    "by": "fsckboy",
    "timeISO": "2025-08-04T17:50:21.000Z",
    "textPlain": "\"vibe coding\" is also a Corolla of programming, the Adam Corollahttps://www.youtube.com/watch?v=iNMrQUF6Fvc",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44788831,
    "by": "jancsika",
    "timeISO": "2025-08-04T17:22:10.000Z",
    "textPlain": "Couldn't agree more.I've mentored for a lot of PHP GSoC projects. I always force the students to use PHP binaries from the late 90s or early 2000s (the sweet spot IMHO). Those versions are typically simpler in design/implementation, built to last, and-- for the relatively minor bugs you find-- there are lots and lots of workarounds you can find all over the web.I do understand the conveniences that make people choose the latest version. But these GSoC students are typically working on projects where things like personal health data must be kept secure on public facing servers. For those cases, being able to understand the engine-- and even change it out manually, if needed-- is paramount to security.In short, those earlier versions were designed by engineers to last. And if you know how to patch the runtime you can essentially drive them forever.And... scene. :)",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44790574,
    "by": "jay-barronville",
    "timeISO": "2025-08-04T19:45:36.000Z",
    "textPlain": "Even after years of not building anything substantial with PHP, it still maintains a soft spot in my heart. I remember how it felt writing PHP code ~15 years ago and feeling so productive. I felt that I could do anything with it. Then the Laravel framework came around and made that experience at least an order of magnitude better.I think the main issue for PHP nowadays is the curse that it had many issues (especially security-wise) in the past and so many folks believe that the PHP of today is still the PHP of the past, when in actuality, it's evolved into a pretty dope programming language/environment with some pretty decent features. It seems like this is something that the PHP community can't shake no matter how hard they try.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44787997,
    "by": "eptcyka",
    "timeISO": "2025-08-04T16:22:51.000Z",
    "textPlain": "The corolla is wonderfully designed for its main purpose- a cash cow in its segment. PHP just worked, but it is not well designed. The reason it is somewhat simple to deploy is because everyone and their dog had to learn how to deploy it - compared to deploying a Go binary it is miserable.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44787587,
    "by": "decasia",
    "timeISO": "2025-08-04T15:53:33.000Z",
    "textPlain": "I spent a few years trying to work on legacy PHP systems. Would never take another job using it if I had any choice. Most large tech companies do not have large PHP codebases, and most small ad hoc PHP codebases are awful to work with (in my experience), so the intersection of \"uses PHP\" and \"higher quality software engineering\" is pretty small. I won't say it's an empty set, but it's a small opportunity space. Meanwhile, the odds of having to work on really awful codebases are... high.Generally - we live in a world with lots of fantastic programming languages, so I would never choose PHP for a greenfield project if I had a choice, and I would not pursue professional opportunities with legacy PHP codebases except in very special circumstances.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44791784,
    "by": "omnimus",
    "timeISO": "2025-08-04T21:54:30.000Z",
    "textPlain": "What people who don't work on content sites don't realize is that from 10 best CMSes like 7 are written in PHP. And i don't even mean Wordpress. It's stuff like Craft, Kirby, Twill, October, Bolt, Statamic, Bookstack, Dokuwiki, Mediawiki… there few OK ones in Javascript but they lack features and maturity.That's why it's so popular in those circles. If you want really solid selfhosted platform for publishing/ecommerce you can't avoid it.For SPA web apps or anything realtime… sure there are probably better choices. But many agencies transition to making small apps with devs already knowing PHP then it's not bad choice.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44794671,
    "by": "librasteve",
    "timeISO": "2025-08-05T05:42:02.000Z",
    "textPlain": "In 2024, I asked “Can Raku replace PHP?”https://rakujourney.wordpress.com/2024/09/15/can-raku-replac...If you are wondering, Raku can replace PHP literally…  \"PHP\".subst(/PHP/, 'Raku').say;    #Raku\n\nBUT that’s beside the point. Just my sense of -Ofun getting out of hand.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44788684,
    "by": "rs186",
    "timeISO": "2025-08-04T17:11:45.000Z",
    "textPlain": "Sorry, that's an insult to Toyota and Corolla. PHP is at best a Nissan car.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44787396,
    "by": "msgodel",
    "timeISO": "2025-08-04T15:42:50.000Z",
    "textPlain": "The corolla may be boring but it's the well designed kind of boring. I think Python or maybe Java is the Corolla of programming.PHP is boring and poorly designed. Maybe more like some of the very old Eastern European cars.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44788200,
    "by": "potato3732842",
    "timeISO": "2025-08-04T16:37:51.000Z",
    "textPlain": "The fact that people are ignoring the degree to which human factors are responsible for making the Corolla what it is in people's minds is disappointing albeit 100% predictable.The Toyota Corolla would not be what you think it is if \"Altima people\" historically went out and bought them in droves and many would do well to think about comparable effects on other classes of product (Adobe Flash anyone?).",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44789817,
    "by": "munificent",
    "timeISO": "2025-08-04T18:40:51.000Z",
    "textPlain": "I don't think this analogy holds. Corollas are popular because they are good cars. People make individual choices to buy them and are generally satisfied with that choice long term. Corollas are not a regretful product choice.PHP is more like a Lime scooter. Trivially easy to start with, gets going quickly, significant chance of causing brain damage.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44789780,
    "by": "t1234s",
    "timeISO": "2025-08-04T18:37:07.000Z",
    "textPlain": "PHP being a Corolla would mean my 20 year old PHP application would run today with no changes. This is not the case.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44786293,
    "by": "pinewurst",
    "timeISO": "2025-08-04T14:27:49.000Z",
    "textPlain": "The Trabant of Programming",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44795873,
    "by": "petersumskas",
    "timeISO": "2025-08-05T09:11:01.000Z",
    "textPlain": "From reading the comments you would think this article was actually about cars.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44787882,
    "by": "daft_pink",
    "timeISO": "2025-08-04T16:14:54.000Z",
    "textPlain": "I think the allure of javascript is the idea that you can use sparse server resources and have your software mostly run on the client side.I’m resistant to using php, because I really don’t want to have heavy server resources, but if I were building an app that used heavy server resources anyways, I would be open to php.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44791459,
    "by": "interestica",
    "timeISO": "2025-08-04T21:17:26.000Z",
    "textPlain": "I think that wordpress probably had a big impact on PHP's success.\nIt's on 40%+ of sites. It was set up in a way for people to make modifications to actual code (or at least see). Hosting providers had to make sure PHP was preinstalled and useful.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44793051,
    "by": "billy99k",
    "timeISO": "2025-08-05T00:39:38.000Z",
    "textPlain": "Before I started a different career, I made lots of money as a PHP developer.I've not been out of work for my entire 20 year career and there were always lots of jobs around.Many other people I know that used other languages struggled a lot more over the years.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44786338,
    "by": "wodenokoto",
    "timeISO": "2025-08-04T14:30:33.000Z",
    "textPlain": "I still think the way you mix php and html is the best. It’s not php + jinja, it’s just php.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44786708,
    "by": "calvinmorrison",
    "timeISO": "2025-08-04T14:56:59.000Z",
    "textPlain": "php is so boring and it works. i am so surprised to not see more jobs on HN for it. I don't really consider myself a PHP programmer, it just, what we use I dont think about it, almost ever.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44792823,
    "by": "spdionis",
    "timeISO": "2025-08-05T00:10:58.000Z",
    "textPlain": "Whenever I read HN talking about PHP I am reminded of the Gell-Mann Amnesia effect. The level of discussion on the topic is abysmal, compared to (I guess perceived?) the discussion on other topics.It's interesting how clearly 80% of the developers in the community clearly have 0 clue about modern PHP. People mention shared hosting, code in html files, CGI and bad security defaults. To be clear these things have been dead in the PHP world for 10+ years, but most developers here have used it once in 2005 and haven't seen how it looks like in the modern ecosystem.It's as if whenever the topic was Java, the discussion would center only around the devs working with Java 1.8.Likely, the rest of the discussion on HN is of the same level, but I have a harder time spotting the errors.",
    "parent": 44785759,
    "depth": 1
  },
  {
    "id": 44788847,
    "by": "rwaksmunski",
    "timeISO": "2025-08-04T17:23:34.000Z",
    "textPlain": "If PHP is a Corolla, whats a Land Cruiser then? Rust?",
    "parent": 44785759,
    "depth": 1
  }
]