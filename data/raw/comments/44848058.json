[
  {
    "id": 44848660,
    "by": "mg",
    "timeISO": "2025-08-09T18:05:50.000Z",
    "textPlain": "Now that Chromium supports the File System Access API on desktop and mobile, I am building every software I need as HTML+JS+CSS.Before that, handling files in the browser was cumbersome. You had to offer download and upload links for users to manage files. And handling whole directories was impossible.But now web apps are like native software tools that you can use to edit and manage files on the file system.And the bonus point is that what you build this way is fully functional on mobile too. Right away, without any changes. At least on Android.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44848843,
    "by": "vladdoster",
    "timeISO": "2025-08-09T18:25:14.000Z",
    "textPlain": "Flutter is a super compelling framework (https://flutter.dev/multi-platform/desktop), but I’d live in fear of it randomly being sent to the Google graveyard.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44850526,
    "by": "foresto",
    "timeISO": "2025-08-09T21:40:01.000Z",
    "textPlain": "Topping my list of GUI toolkit requirements are cross-platform and native look & feel. As far as I know, Qt still beats everything else in these areas on the desktop. It's mostly excellent.However, I find The Qt Group's commercial licensing (and their tactics as reported by various people on HN) a little scary. If I were to go commercial, I think I would stick with LGPL Qt and link dynamically or give customers my object files for re-linking, because I get the impression that accepting a commercial Qt license could restrict my ability to use open-source Qt elsewhere. I suppose there might be some other way to safely navigate those waters, but from what I've read, The Qt Group has a reputation for making this far from hassle-free. It's not an immediate problem because I currently use Qt only for open-source and personal tools.I have grown tired of C++, so I've been using Python to drive Qt. The bindings are very good, mirroring the C++ API so closely that I just use the C++ docs when I need to look something up.I've also been watching for Qt bindings to other compiled languages, mainly for distributing non-Linux GUI apps more simply than Python allows. Such bindings often turn out to expose only Qt Quick, which lacks functionality that I sometimes need, but there are a few that expose Qt Widgets. For example, these Go bindings:https://github.com/mappu/miqtI hope we'll eventually see a cross-platform GUI toolkit rivaling Qt in a language more pleasant than C++ (and ideally easier to bind to other languages). The one being developed for internal use by the Zed editor has some promising ideas about how to render native-looking text, which I think is a good start:https://zed.dev/blog/videogamehttps://www.gpui.rs/",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44850228,
    "by": "cosmic_cheese",
    "timeISO": "2025-08-09T21:07:40.000Z",
    "textPlain": "Still plain old Swift (or when the itch strikes, Objective-C) and AppKit. I don’t really build for platforms other than macOS because I haven’t found toolkits that feel right elsewhere. I would do just about anything for multiplatform AppKit.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44849510,
    "by": "jlarocco",
    "timeISO": "2025-08-09T19:46:54.000Z",
    "textPlain": "At work we use C#, .Net, and WPF.  I've only used it at this company, and I can't say for sure if my dislikes are with WPF, or how our codebase is using it.  Overall it's not terrible, except for being proprietary and Windows only.Outside of work, I'm out in left field using Common Lisp for most of my projects, so I'm not sure how helfpul this is, but...In the past, I used Qt4 because there was an amazing Common Lisp binding and it worked well on Linux, FreeBSD and OSX.  It's increasingly hard to use Qt4 any more, though, and changes in the Qt project made the technique used by the Qt4 bindings impractical for Qt5 or Qt6 - at least that was my understanding when I looked into it.For newer things I've tried LTK but don't really like the looks of it and I wouldn't say it's \"modern\".  It seems to work across platform well enough, though, and for simple stuff it's okay.More often than not I'm using a combination of the Slime tools in Emacs in combination with an GLFW/OpenGL window.  Often I'll use the inspector to display data and make changes that show up in an OpenGL window, or run some commands in the REPL and pop up an image in an external viewer or load something in a browser.  It only works for certain types of applications, and I won't even pretend it's practical for end users, but it works pretty well, and it's flexible as a developer.I'm curious to see what other people say.  It's been a while since I madea full blown GUI application.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44848656,
    "by": "Palomides",
    "timeISO": "2025-08-09T18:04:47.000Z",
    "textPlain": "Qt with QML for a somewhat embedded use case.  I think it hits a really nice intersection of native speed, GPU acceleration, interfacing with C++, and ease of development.I wouldn't really recommend a career out of it.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44850430,
    "by": "edtech_dev",
    "timeISO": "2025-08-09T21:30:08.000Z",
    "textPlain": "Avalonia - https://avaloniaui.net/",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44850377,
    "by": "PhilippGille",
    "timeISO": "2025-08-09T21:24:17.000Z",
    "textPlain": "For Go, I've been using Wails [1] and Fyne [2]. The former uses a web view for the UI, the latter is Go only.[1] https://github.com/wailsapp/wails[2] https://github.com/fyne-io/fyne",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44848903,
    "by": "akkartik",
    "timeISO": "2025-08-09T18:32:36.000Z",
    "textPlain": "As someone who loved Turbo Pascal, for the past 3 years I use Lua and LÖVE.https://akkartik.name/freewheeling",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44848729,
    "by": "dazzawazza",
    "timeISO": "2025-08-09T18:13:53.000Z",
    "textPlain": "Within game development it's Dear ImGui. https://github.com/ocornut/imguiNormally with the Windows DX12 backend, sometimes with the SDL+OpenGL backend if you want cross platform support.Other frameworks are sort of disappearing. C++ all the way although some use it with C#.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44848616,
    "by": "dochtman",
    "timeISO": "2025-08-09T17:59:46.000Z",
    "textPlain": "Tauri seems interesting. It combines a Rust core with the platform-native browser engine for presentation. Of course a potential downside is rendering incompatibilities between engines/platforms.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44848552,
    "by": "bsoles",
    "timeISO": "2025-08-09T17:50:45.000Z",
    "textPlain": "To my dismay, my company uses JavaScript, HTML, CSS with a custom Chromium-based web browser installed on your PC. The performance is shit: GUI performance that should take milliseconds takes seconds to render with constant pinging of corporate servers and user activity logging. Development mostly done in IntelliJ or VS Code.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44848515,
    "by": "mikewarot",
    "timeISO": "2025-08-09T17:46:37.000Z",
    "textPlain": "Lazarus is the open source equivalent to Delphi these days, and for the most part it's awesome. (The documentation, on the other hand... just isn't fit for purpose)I've been using Visual Studio Code and Github Copilot together, and it seems to work ok. I've not used it heavily, though, as I'm retired.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44849841,
    "by": "sltr",
    "timeISO": "2025-08-09T20:23:12.000Z",
    "textPlain": "On my projects [1][2], I use C# and Avalonia with Rider or Visual Studio. For extra performance, turn on AOT, which has the nice side-effect of making reversing your app to C# impossible.I worked in WPF for a decade. I wouldn't go with it for a new project since it's Windows-only and doesn't support AOT.At work we have a Blazor MAUI hybrid desktop app because it also has to run on the web. If we only needed a desktop app, I'd go with Avalonia.[1] https://linklever.net/\n[2] https://github.com/endurabyte/FitEdit",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44849107,
    "by": "woile",
    "timeISO": "2025-08-09T18:57:29.000Z",
    "textPlain": "Slint-ui with rust (they have bindings for cpp, Python and js).Quite good, I've been building this Pomodoro:https://github.com/reciperium/temporis/I've also used nix to build the packages when possible.One of the things I like about slint is that it has native components. They also have experimental support for Android and iOS.The language is quite simple as well. Though it could benefit from something like flex",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44848764,
    "by": "AaronAPU",
    "timeISO": "2025-08-09T18:17:24.000Z",
    "textPlain": "I’m using JUCE C++ which is very popular for audio software. But it can be used for more general purpose applications. The latest version has some kind of HTML based UI system but I’ve not migrated yet.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44848648,
    "by": "pragmatic",
    "timeISO": "2025-08-09T18:03:49.000Z",
    "textPlain": "Windows Forms are alive and well.Still supported in latest .net versions.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44848845,
    "by": "Philpax",
    "timeISO": "2025-08-09T18:25:25.000Z",
    "textPlain": "Rust + egui, but it's a far cry from the convenience or iteration speed of the web. Wherever possible, I build webapps instead, just because it's so much faster to get results (especially with LLMs!)With that being said, I'd like to try the modern .NET stack sometime. Shame that the UI side of things is still largely Windows-only, and even Microsoft themselves don't know which UI framework they're using this week.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44849581,
    "by": "cryptoalex",
    "timeISO": "2025-08-09T19:55:27.000Z",
    "textPlain": "Delphi was so ahead of its time (a mandatory remark)... I've used Delphi 1 to 4  then moved on to other things. Using .NET since 1.0 beta, and it still remains my favorite stack. The project I am currently building is a software infra for building E2EE applications, and it requires a little bit of everything - mobile apps for key management, desktop/cli apps/client libraries for actually encrypting data, sometimes a web based app, and a zero trust backend. Using Xamarin/MAUI for mobile apps, Blazor WASM for Web, Blazor Hybrid / MAUI / Avalonia UI for Desktop. All of the frameworks have their quirks, so it may take a bit of time to learn your patterns, build your base classes, but after that you pretty much enjoy the productivity of a modern high level language.- What programming languages and frameworks are popular for desktop apps?\n- for me - Blazor Hybrid / MAUI / Avalonia UI / WinForms- Are there any go-to IDEs, build tools, or libraries that make development easier?\n- I use MSVS 2022, VSCode for .NET, IntelliJ for $$$ at work. There are of course UI control libraries, I am using MudBlazor for Blazor WASM / Hybrid, other than that I use built-in controls that come with each framework. I try to use as little as possible of 3rd party libraries b/c my apps are security-sensitive.- Do the above answers change if you care about code performance or efficiency (whatever that means to you)? \n- in my case no, I am able to find what I need in .NET ecosystem. Modern .NET supports ahead-of-time compilation compiling to native code, and that helps to reduce start-up time which is important for Desktop / CLI. Ironically, for a long running processes, like a web service, the just-in-time compilation sometimes produces code running faster than ahead-of-time compilation, b/c it learns most common execution paths at runtime, and is able to recompile on the fly, optimizing for most frequent execution paths, giving a non-trivial performance boost in some cases- Is native desktop app",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44850291,
    "by": "eqvinox",
    "timeISO": "2025-08-09T21:13:49.000Z",
    "textPlain": "Python & Gtk (& sometimes Glade)",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44849240,
    "by": "anonymousd3vil",
    "timeISO": "2025-08-09T19:14:05.000Z",
    "textPlain": "I'm personally aware and used few Desktop app building frameworks like Flutter, Tauri, Electron. I think you might have some luck with Electron support for LLMs since its early development and resources available. But I personally like to use Tauri recently, its backend is Rust but you can plug it in with any JS, CSS framework and develop your application.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44849373,
    "by": "osm3000",
    "timeISO": "2025-08-09T19:28:25.000Z",
    "textPlain": "Because I mainly work with python, I am using Kivy (https://kivy.org/).Earlier I was HTMX, Jinja templates, Flask, Tailwind and little vanilla JS. It was too inelegant for my taste.I am considering moving to either Swift, or JS/Svelete",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44848740,
    "by": "gisborne",
    "timeISO": "2025-08-09T18:15:08.000Z",
    "textPlain": "Flutter builds pretty decent desktop apps these days.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44849160,
    "by": "alkonaut",
    "timeISO": "2025-08-09T19:04:17.000Z",
    "textPlain": ".NET and whatever gui framework is appropriate (WPF, Avalonia, WinForms).Rust + Egui for special cases like DAW plugins.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44848849,
    "by": "gwbennett",
    "timeISO": "2025-08-09T18:25:53.000Z",
    "textPlain": "For both iOS and Android app:\n- Xcode\n- SwiftUI\n- Supabase\n- Claude CLI\n- Skip.tools (converts SwiftUI to native Katlin code)Been developing mobile apps for over 15 years. This is by far the best stack for developing mobile apps. Speed, total control, native UI's. Love it.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44848644,
    "by": "dev08979",
    "timeISO": "2025-08-09T18:03:23.000Z",
    "textPlain": "I support Java software using a Swing GUI. It's fairly performant, but requires a fair bit of boilerplate for setting up the GUI and can take longer than typical web development.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44848940,
    "by": "mariu52",
    "timeISO": "2025-08-09T18:35:42.000Z",
    "textPlain": "Rust for backend + Qt via cxx-qt bindings.Would consider flutter for smaller apps as I had a great experience before.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44849614,
    "by": "_nhh",
    "timeISO": "2025-08-09T19:59:45.000Z",
    "textPlain": "C#, dotnet core and Avalonia. Its awesome",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44848815,
    "by": "diego_moita",
    "timeISO": "2025-08-09T18:22:17.000Z",
    "textPlain": "For Windows only (because that's the most common platform in the world): C# and .Net. The UI is mostly either WPF or WindowsForms.For Mac only: new apps use Swift, legacy ones use Objective-C, both with AppKit.Linux only: these are quite rare and there is a broad mix of them: C++, Java, etc.Cross-platform: C++ with Qt seems to be the standard. Go and Rust seem to be rising. Rising UI libraries are Tauri, Slint and Iced. There are other alternatives like cross-platform .Net, Java or Flutter. But they don't look very solid and widely adopted.Then there are other UI frameworks for some specific use cases (games, scientific applications, etc).",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44848828,
    "by": "self_awareness",
    "timeISO": "2025-08-09T18:23:42.000Z",
    "textPlain": "C++ and Qt.Rust as a statically linked library where it makes sense.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44848872,
    "by": "adamnemecek",
    "timeISO": "2025-08-09T18:28:32.000Z",
    "textPlain": "I have been recently playing with Dioxus and I kinda like it. I too am dismayed that we are using browser to target desktop but here we are I guess.",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44849100,
    "by": "mahadali",
    "timeISO": "2025-08-09T18:56:35.000Z",
    "textPlain": "Zte the hack",
    "parent": 44848058,
    "depth": 1
  },
  {
    "id": 44850089,
    "by": "Mars008",
    "timeISO": "2025-08-09T20:51:18.000Z",
    "textPlain": "What about FireFox, does/will it support file system access? I'm not an expert, just thinking this way and don't like Chromium. The idea is to use light web server in application + browser with JS. This makes it easier and more convenient as it can naturally run remote, on microprocessor. Also LLMs are good at generating such UIs.",
    "parent": 44848660,
    "depth": 2
  },
  {
    "id": 44848979,
    "by": "lyu07282",
    "timeISO": "2025-08-09T18:41:03.000Z",
    "textPlain": "+1 Another bonus is that it's properly sandboxed, you only give access to the files/directories and other resources it needs.",
    "parent": 44848660,
    "depth": 2
  },
  {
    "id": 44849316,
    "by": "robertoandred",
    "timeISO": "2025-08-09T19:23:15.000Z",
    "textPlain": "Except you lose native document UI features. Especially frustrating in Electron \"apps\".",
    "parent": 44848660,
    "depth": 2
  },
  {
    "id": 44849747,
    "by": "doawoo",
    "timeISO": "2025-08-09T20:14:37.000Z",
    "textPlain": "We shipped a project at work with Flutter recently, specifically using it on embedded Linux, basically a touch screen smart apartment tablet/thermostat combo.Internally the “UI” team is tiny (basically me, a UI/Designer and one or two other part time engineers) and the productivity is astounding tbh",
    "parent": 44848843,
    "depth": 2
  },
  {
    "id": 44849114,
    "by": "x0x0",
    "timeISO": "2025-08-09T18:58:08.000Z",
    "textPlain": "It had layoffs in 2024.  And Google has emitted a bunch of words about their support for Flutter, but hasn't taken the most obvious step towards solidifying support: guarantee a minimal spend level on Flutter dev for a decade, either internally or by donating to an external foundation.  eg we will spend $x on Flutter until 2036.  :shrug:  So they've carefully retained the option to cut support at will.  Which is their choice, but I recently wasn't comfortable starting a greenfield project in it for that reason.",
    "parent": 44848843,
    "depth": 2
  },
  {
    "id": 44849351,
    "by": "LarMachinarum",
    "timeISO": "2025-08-09T19:26:25.000Z",
    "textPlain": "Qt used to be what I used as well, but the licensing has become so repulsive for professional use that I now refuse to touch it now (not even for my open source side projects where this wouldn't be an issue).Too bad the hopes from the early Nokia adoption days got smashed by MS mole Elop and the later owners of Qt.",
    "parent": 44848656,
    "depth": 2
  },
  {
    "id": 44848916,
    "by": "diego_moita",
    "timeISO": "2025-08-09T18:33:31.000Z",
    "textPlain": "> I wouldn't really recommend a career out of it.Care to say why? I ask because that's what I use at work: C++ and QtYes, I'd prefer Rust and Slint/Tauri.But like a prostitute I don't do what I love, I do what pays the bills.",
    "parent": 44848656,
    "depth": 2
  },
  {
    "id": 44850825,
    "by": "dlachausse",
    "timeISO": "2025-08-09T22:16:26.000Z",
    "textPlain": "Have you looked at Free Pascal and Lazarus?  It's an excellent open source and cross-platform implementation of Object Pascal and Delphi.https://www.lazarus-ide.org/",
    "parent": 44848903,
    "depth": 2
  }
]