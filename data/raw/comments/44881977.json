[
  {
    "id": 44883758,
    "by": "nulld3v",
    "timeISO": "2025-08-13T01:32:33.000Z",
    "textPlain": "New `encoding/json/v2` package (hidden behind `GOEXPERIMENT=jsonv2` flag)! It brings perf improvements and finally allows devs to implement custom marshalers for external types:> Alternatively, users can implement functions that match MarshalFunc, MarshalToFunc, UnmarshalFunc, or UnmarshalFromFunc to specify the JSON representation for arbitrary types. This provides callers of JSON functionality with control over how any arbitrary type is serialized as JSON.Awesome stuff.",
    "parent": 44881977,
    "depth": 1
  },
  {
    "id": 44884317,
    "by": "kristianp",
    "timeISO": "2025-08-13T03:13:09.000Z",
    "textPlain": "Includes [1], which fixes the bug which was blogged about in \"How we tracked down a Go 1.24 memory regression\" [2,3].[1] https://github.com/golang/go/issues/72991[2] https://www.datadoghq.com/blog/engineering/go-memory-regress...[3] https://news.ycombinator.com/item?id=44597550 (24 days ago)",
    "parent": 44881977,
    "depth": 1
  },
  {
    "id": 44882558,
    "by": "disintegrator",
    "timeISO": "2025-08-12T22:33:35.000Z",
    "textPlain": "I just love how this language marches forward. I have so many colleagues that hate many aspects of it but I sit here combining Go, Goa and SQLc writing mountains of code and having a fairly good compiler behind me. I understand what I’m missing out on by not using stricter languages and so often it’s a totally fine trade off.",
    "parent": 44881977,
    "depth": 1
  },
  {
    "id": 44882370,
    "by": "Gobd",
    "timeISO": "2025-08-12T22:11:02.000Z",
    "textPlain": "Yay new version! Not the most exciting (as Go releases tend to be which is good), but hopefully jsonv2 and greentea can get some testing and be standard in 1.26",
    "parent": 44881977,
    "depth": 1
  },
  {
    "id": 44883492,
    "by": "nunez",
    "timeISO": "2025-08-13T00:53:28.000Z",
    "textPlain": "> LookupMX and Resolver.LookupMX now return DNS names that look like valid IP address, as well as valid domain names. Previously if a name server returned an IP address as a DNS name, LookupMX would discard it, as required by the RFCs. However, name servers in practice do sometimes return IP addresses.This one is interesting; which servers return an IP address as a record? Why would they want to do this?",
    "parent": 44881977,
    "depth": 1
  },
  {
    "id": 44881978,
    "by": "bitbasher",
    "timeISO": "2025-08-12T21:25:01.000Z",
    "textPlain": "1.25 tag was released; https://github.com/golang/go/releases/tag/go1.25.0",
    "parent": 44881977,
    "depth": 1
  },
  {
    "id": 44883940,
    "by": "zx8080",
    "timeISO": "2025-08-13T02:03:56.000Z",
    "textPlain": "Wow, top comment about json. (Edit: not top 1 anymore, but still the point).It's ironic that the information technology and software engineering industry is so much \"json parsing and repacking\" one.",
    "parent": 44883758,
    "depth": 2
  },
  {
    "id": 44884022,
    "by": "gottorf",
    "timeISO": "2025-08-13T02:15:25.000Z",
    "textPlain": "Go is the only language where I've come back to a nontrivial source code after 10 years of letting it sit and have had zero problems building and running. That alone, for me, more than makes up for its idiosyncrasies.",
    "parent": 44882558,
    "depth": 2
  },
  {
    "id": 44882973,
    "by": "danudey",
    "timeISO": "2025-08-12T23:27:55.000Z",
    "textPlain": "I've gotten used to golang, though it's still not my favourite language to program in by any stretch. One issue I've been having, though, is the documentation.Documentation for third-party modules in Python is fantastic, almost universally so. In nearly every case of using a third-party library, large or small, there's sufficient documentation to get up and running.Golang libraries, however, seem to be the opposite. In most cases there's either no documentation whatsoever on how to use things, or, more commonly, there is example code in the readme which is out of date and does not work at all.The IDE integration with golang is great, and it makes some of this a bit easier, but I also still get a ton of situations where my editor will offer some field or function that looks like what I want (and is what I'm typing to see if it will autocomplete) but once I select it it complains that there's no such field or function. Still haven't figured that out.So yeah, I dunno. The language is 'great'; it certainly has some extreme strengths and conveniences, like the fact that 'run this function with these arguments in a separate thread' is a language keyword and not some deep dive into subprocess or threading or concurrent.futures; the fact that synchronization functionality is trivially easy to access; Sync.Once feels so extremely obvious for a language where concurrency is king, and so on.Still, the ecosystem is... a bit of a mess, at the best of times. Good modules are great, all other modules are awful.",
    "parent": 44882558,
    "depth": 2
  },
  {
    "id": 44882748,
    "by": "devmor",
    "timeISO": "2025-08-12T23:00:10.000Z",
    "textPlain": "I did not like it at first but it has grown on me. I still have my gripes, which are mostly things that come from its overall architecture and will never be resolved, but it is pretty enjoyable to use for the limited domain I use it in at work.",
    "parent": 44882558,
    "depth": 2
  },
  {
    "id": 44882797,
    "by": "latchkey",
    "timeISO": "2025-08-12T23:05:49.000Z",
    "textPlain": "> greenteaI didn't know what it is and had to look it up. Looks like a new GC.https://github.com/golang/go/issues/73581",
    "parent": 44882370,
    "depth": 2
  }
]