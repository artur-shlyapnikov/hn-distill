[
  {
    "id": 44884409,
    "by": "Syzygies",
    "timeISO": "2025-08-13T03:29:45.000Z",
    "textPlain": "I'm hoping to code Bezier animation in OCaml/F# in four dimensional space time, with a moving vantage point. Offload rendering each time slice frame to worker threads.I'm surprised Bezier-rs is all about curves. Sure, fonts, but I can't be alone here in seeing curves as a special case.It's easy as a pure mathematician to write off Bezier theory as \"specialized\" but it's simply the right way to work with polynomials on a simplex.",
    "parent": 44846781,
    "depth": 1
  },
  {
    "id": 44885119,
    "by": "pjmlp",
    "timeISO": "2025-08-13T06:10:17.000Z",
    "textPlain": "Great example, this is the kind of stuff that we could make use of interactive documents for, and not bend them into applications.",
    "parent": 44846781,
    "depth": 1
  },
  {
    "id": 44884695,
    "by": "continuational",
    "timeISO": "2025-08-13T04:40:28.000Z",
    "textPlain": "Very neat. I'm not sure if I missed it, but is there any way to get n equidistant points on the curve?E.g. for moving an object at constant speed along the curve.",
    "parent": 44846781,
    "depth": 1
  },
  {
    "id": 44884593,
    "by": "shmerl",
    "timeISO": "2025-08-13T04:15:13.000Z",
    "textPlain": "Is the documentation using the library itself for visualizations?",
    "parent": 44846781,
    "depth": 1
  },
  {
    "id": 44884728,
    "by": "jamwaffles",
    "timeISO": "2025-08-13T04:49:13.000Z",
    "textPlain": "There is indeed: Bezier::compute_lookup_table[1]. You'll want to use a `TValueType` of `Euclidean` to get equidistant points.[1]: https://docs.rs/bezier-rs/latest/bezier_rs/struct.Bezier.htm...",
    "parent": 44884695,
    "depth": 2
  }
]