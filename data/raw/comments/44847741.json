[
  {
    "id": 44849147,
    "by": "tptacek",
    "timeISO": "2025-08-09T19:01:59.000Z",
    "textPlain": "Learning how to use LLMs in a coding workflow is trivial. There is no learning curve. You can safely ignore them if they don’t fit your workflows at the moment.I have never heard anybody successfully using LLMs say this before. Most of what I've learned from talking to people about their workflows is counterintuitive and subtle.It's a really weird way to open up an article concluding that LLMs make one a worse programmer: \"I definitely know how to use this tool optimally, and I conclude the tool sucks\". Ok then. Also: the piano is a terrible, awful instrument; what a racket it makes.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44848846,
    "by": "ebiester",
    "timeISO": "2025-08-09T18:25:28.000Z",
    "textPlain": "I disagree from almost the first sentence:> Learning how to use LLMs in a coding workflow is trivial. There is no learning curve. You can safely ignore them if they don’t fit your workflows at the moment.Learning how to use LLMs in a coding workflow is trivial to start, but you find you get a bad taste early if you don't learn how to adapt both your workflow and its workflow. It is easy to get a trivially good result and then be disappointed in the followup. It is easy to try to start on something it's not good at and think it's worthless.The pure dismissal of cursor, for example, means that the author didn't learn how to work with it. Now, it's certainly limited and some people just prefer Claude code. I'm not saying that's unfair. However, it requires a process adaptation.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44848603,
    "by": "randfish",
    "timeISO": "2025-08-09T17:57:38.000Z",
    "textPlain": "Deeply curious to know if this is an outlier opinion, a mainstream but pessimistic one, or the general consensus. My LinkedIn feed and personal network certainly suggests that it's an outlier, but I wonder if the people around me are overly optimistic or out of synch with what the HN community is experiencing more broadly.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44849807,
    "by": "weeksie",
    "timeISO": "2025-08-09T20:20:07.000Z",
    "textPlain": "Yet another developer who is too full of themselves to admit that they have no idea how to use LLMs for development. There's an arrogance that can set in when you get to be more senior and unless you're capable of force feeding yourself a bit of humility you'll end up missing big, important changes in your field.It becomes farcical when not only are you missing the big thing but you're also proud of your ignorance and this guy is both.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44849341,
    "by": "simonw",
    "timeISO": "2025-08-09T19:25:31.000Z",
    "textPlain": "Learning how to use LLMs in a coding workflow is trivial. There is no learning curve. [...]LLMs will always suck at writing code that has not be written millions of times before. As soon as you venture slightly offroad, they falter.That right there is your learning curve! Getting LLMs to write code that's not heavily represented in their training data takes experience and skill and isn't obvious to learn.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44849170,
    "by": "dezmou",
    "timeISO": "2025-08-09T19:05:23.000Z",
    "textPlain": "OP did miss the vscode extension for claude code, it is still terminal based but: \n - it show you the diff of the incoming changes in vscode ( like git ) \n - it know the line you selected in the editor for context",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44849200,
    "by": "sudhirb",
    "timeISO": "2025-08-09T19:08:49.000Z",
    "textPlain": "I have a biased opinion since I work for a background agent startup currently - but there are more (and better!) out there than Jules and Copilot that might address some of the author's issues.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44849854,
    "by": "bgwalter",
    "timeISO": "2025-08-09T20:24:21.000Z",
    "textPlain": "Pianists' results are well known to be proportional to their talent/effort. In open source hardly anyone is even using LLMs and the ones that do have barely any output, In many cases less output than they had before using LLMs.The blogging output on the other hand ...",
    "parent": 44849147,
    "depth": 2
  },
  {
    "id": 44849317,
    "by": "prerok",
    "timeISO": "2025-08-09T19:23:20.000Z",
    "textPlain": "I agree with your assessment about this statement. I actually had to reread it a few times to actually understand it.He is actually recommending Copilot for price/performance reasons and his closing statement is \"Don’t fall for the hype, but also, they are genuinely powerful tools sometimes.\"So, it just seems like he never really gave a try at how to engineer better prompts that these more advanced models can use.",
    "parent": 44849147,
    "depth": 2
  },
  {
    "id": 44849260,
    "by": "edfletcher_t137",
    "timeISO": "2025-08-09T19:16:31.000Z",
    "textPlain": "The first two points directly contradict each other, too. Learning a tool should have the outcome that one is productive with it. If getting to \"productive\" is non-trivial, then learning the tool is non-trivial.",
    "parent": 44849147,
    "depth": 2
  },
  {
    "id": 44848923,
    "by": "mkozlows",
    "timeISO": "2025-08-09T18:34:20.000Z",
    "textPlain": "\"There's no learning curve\" just means this guy didn't get very far up, which is definitely backed up by thinking that Copilot and other tools are all basically the same.",
    "parent": 44848846,
    "depth": 2
  },
  {
    "id": 44849782,
    "by": "procaryote",
    "timeISO": "2025-08-09T20:17:54.000Z",
    "textPlain": "Linkedin posts seems like an awful source. The people I see posting for themselves there are either pre-successful or just very fond of personal branding",
    "parent": 44848603,
    "depth": 2
  },
  {
    "id": 44848862,
    "by": "MobiusHorizons",
    "timeISO": "2025-08-09T18:27:03.000Z",
    "textPlain": "My impression has been that in corporate settings (and I would include LinkedIn in that) AI optimism is basically used as virtue signaling, making it very hard to distinguish people who are actually excited about the tech from people wanting to be accepted.My personal experience has been that AI has trouble keeping the scope of the change small and targeted. I have only been using Gemini 2.5 pro though, as we don’t have access to other models at my work. My friend tells me he uses Claud for coding and Gemini for documentation.",
    "parent": 44848603,
    "depth": 2
  },
  {
    "id": 44848841,
    "by": "WD-42",
    "timeISO": "2025-08-09T18:24:55.000Z",
    "textPlain": "I think it’s pretty common among people whose job it is to provide working, production software.If you go by MBA types on LinkedIn that aren’t really developers or haven’t been in a long time, now they can vibe out some react components or a python script so it’s a revolution.",
    "parent": 44848603,
    "depth": 2
  },
  {
    "id": 44848771,
    "by": "Terretta",
    "timeISO": "2025-08-09T18:17:58.000Z",
    "textPlain": "Which part of the opinion?I tend to strongly agree with the \"unpopular opinion\" about the IDEs mentioned versus CLI (specifically, aider.chat and Claude Code).Assuming (this is key) you have mastery of the language and framework you're using, working with the CLI tool in 25 year old XP practices is an incredible accelerant.Caveats:- You absolutely must bring taste and critical thinking, as the LLM has neither.- You absolutely must bring systems thinking, as it cannot keep deep weirdness \"in mind\". By this I mean the second and third order things that \"gotcha\" about how things ought to work but don't.- Finally, you should package up everything new about your language or frameworks since a few months or year before the knowledge cutoff date, and include a condensed synthesis in your context (e.g., Swift 6 and 6.1 versus the 5.10 and 2024's WWDC announcements that are all GPT-5 knows).For this last one I find it useful to (a) use OpenAI's \"Deep Research\" to first whitepaper the gaps, then another pass to turn that into a Markdown context prompt, and finally bring that over to your LLM tooling to include as needed when doing a spec or in architect mode.  Similarly, (b) use repomap tools on dependencies if creating new code that leverages those dependencies, and have that in context for that work.I'm confused why these two obvious steps aren't built into leading agentic tools, but maybe handling the LLM as a naive and outdated \"Rain Man\" type doesn't figure into mental models at most KoolAid-drinking \"AI\" startups, or maybe vibecoders don't care, so it's just not a priority.Either way, context based development beats Leroy Jenkins.",
    "parent": 44848603,
    "depth": 2
  },
  {
    "id": 44849488,
    "by": "TheSamFischer",
    "timeISO": "2025-08-09T19:44:00.000Z",
    "textPlain": "[dead]",
    "parent": 44849341,
    "depth": 2
  }
]