[
  {
    "id": 44849147,
    "by": "tptacek",
    "timeISO": "2025-08-09T19:01:59.000Z",
    "textPlain": "Learning how to use LLMs in a coding workflow is trivial. There is no learning curve. You can safely ignore them if they don’t fit your workflows at the moment.I have never heard anybody successfully using LLMs say this before. Most of what I've learned from talking to people about their workflows is counterintuitive and subtle.It's a really weird way to open up an article concluding that LLMs make one a worse programmer: \"I definitely know how to use this tool optimally, and I conclude the tool sucks\". Ok then. Also: the piano is a terrible, awful instrument; what a racket it makes.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44848846,
    "by": "ebiester",
    "timeISO": "2025-08-09T18:25:28.000Z",
    "textPlain": "I disagree from almost the first sentence:> Learning how to use LLMs in a coding workflow is trivial. There is no learning curve. You can safely ignore them if they don’t fit your workflows at the moment.Learning how to use LLMs in a coding workflow is trivial to start, but you find you get a bad taste early if you don't learn how to adapt both your workflow and its workflow. It is easy to get a trivially good result and then be disappointed in the followup. It is easy to try to start on something it's not good at and think it's worthless.The pure dismissal of cursor, for example, means that the author didn't learn how to work with it. Now, it's certainly limited and some people just prefer Claude code. I'm not saying that's unfair. However, it requires a process adaptation.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44849921,
    "by": "kodisha",
    "timeISO": "2025-08-09T20:31:58.000Z",
    "textPlain": "LLM driven coding can yield awesome results, but you will be typing a lot and, as article states, requires already well structured codebase.I recently started with fresh project, and until I got to the desired structure I only used AI to ask questions or suggestions. I organized and written most of the code.Once it started to get into the shape that felt semi-permanent to me, I started a lot of queries like:```- Look at existing service X at folder services/x- see how I deploy the service using k8s/services/x- see how the docker file for service X looks like at services/x/Dockerfile- now, I started service Y that does [this and that]- create all that is needed for service Y to be skaffolded and deployed, follow the same pattern as service X```And it would go, read existing stuff for X, then generate all of the deployment/monitoring/readme/docker/k8s/helm/skaffold for YWith zero to none mistakes.\nBoth claude and gemini are more than capable to do such task.\nI had both of them generate 10-15 files with no errors, with code being able to be deployed right after (of course service will just answer and not do much more than that)Then, I will take over again for a bit, do some business logic specific to Y, then again leverage AI to fill in missing bits, review, suggest stuff etc.It might look slow, but it actually cuts most boring and most error prone steps when developing medium to large k8s backed project.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44849341,
    "by": "simonw",
    "timeISO": "2025-08-09T19:25:31.000Z",
    "textPlain": "Learning how to use LLMs in a coding workflow is trivial. There is no learning curve. [...]LLMs will always suck at writing code that has not be written millions of times before. As soon as you venture slightly offroad, they falter.That right there is your learning curve! Getting LLMs to write code that's not heavily represented in their training data takes experience and skill and isn't obvious to learn.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44849868,
    "by": "spenrose",
    "timeISO": "2025-08-09T20:26:00.000Z",
    "textPlain": "So many articles should prepend “My experience with ...” to their title. Here is OP's first sentence: “I spent the past ~4 weeks trying out all the new and fancy AI tools for software development.” Dude, you have had some experiences and they are worth writing up and sharing. But your experiences are not a stand-in for \"the current state.\" This point applies to a significant fraction of HN articles, to the point that I wish the headlines were flagged “blog”.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44848603,
    "by": "randfish",
    "timeISO": "2025-08-09T17:57:38.000Z",
    "textPlain": "Deeply curious to know if this is an outlier opinion, a mainstream but pessimistic one, or the general consensus. My LinkedIn feed and personal network certainly suggests that it's an outlier, but I wonder if the people around me are overly optimistic or out of synch with what the HN community is experiencing more broadly.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44850595,
    "by": "bachmeier",
    "timeISO": "2025-08-09T21:49:42.000Z",
    "textPlain": "> By being particularly bad at anything outside of the most popular languages and frameworks, LLMs force you to pick a very mainstream stack if you want to be efficient.I haven't found that to be true with my most recent usage of AI. I do a lot of programming in D, which is not popular like Python or Javascript, but Copilot knows it well enough to help me with things like templates, metaprogramming, and interoperating with GCC-produced DLL's on Windows. This is true in spite of the lack of a big pile of training data for these tasks. Importantly, it gets just enough things wrong when I ask it to write code for me that I have to understand everything well enough to debug it.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44850822,
    "by": "stephc_int13",
    "timeISO": "2025-08-09T22:16:09.000Z",
    "textPlain": "I have not tried every IDE/CLI or models, only a few, mostly Claude and Qwen.I work mostly in C/C++.The most valuable improvement of using this kind of tools, for me, is to easily find help when I have to work on boring/tedious tasks or when I want to have a Socratic conversation about a design idea with a not-so-smart but extremely knowledgeable colleague.But for anything requiring a brain, it is almost useless.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44850796,
    "by": "singularity2001",
    "timeISO": "2025-08-09T22:12:04.000Z",
    "textPlain": "\"LLMs won’t magically make you deliver production-ready code\"Either I'm extremely lucky or I was lucky to find the guy who said it must all be test driven and guided by the usual principles of DRY etc. Claude Code works absolutely fantastically nine out of 10 times and when it doesn't we just roll back the three hours of nonsense it did postpone this feature or give it extra guidance.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44849170,
    "by": "dezmou",
    "timeISO": "2025-08-09T19:05:23.000Z",
    "textPlain": "OP did miss the vscode extension for claude code, it is still terminal based but: \n - it show you the diff of the incoming changes in vscode ( like git ) \n - it know the line you selected in the editor for context",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44850824,
    "by": "infoseek12",
    "timeISO": "2025-08-09T22:16:21.000Z",
    "textPlain": "There are kind of a lot of errors in this piece. For instance, the problem the author had with Gemini CLI running out of tokens in ten minutes is what happens when you don’t set up (a free) API key in your environment.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44849200,
    "by": "sudhirb",
    "timeISO": "2025-08-09T19:08:49.000Z",
    "textPlain": "I have a biased opinion since I work for a background agent startup currently - but there are more (and better!) out there than Jules and Copilot that might address some of the author's issues.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44850022,
    "by": "philipwhiuk",
    "timeISO": "2025-08-09T20:44:42.000Z",
    "textPlain": "There’s an IntelliJ extension for GitHub CoPilot.It’s not perfect but it’s okay.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44850641,
    "by": "Vektorceraptor",
    "timeISO": "2025-08-09T21:54:05.000Z",
    "textPlain": "I agree. I had a similar experience.https://speculumx.at/pages/read_post.html?post=59",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44849899,
    "by": "dash2",
    "timeISO": "2025-08-09T20:29:24.000Z",
    "textPlain": "They missed OpenAI Codex, maybe deliberately? It's less llm-development and more vibe-coding, or maybe \"being a PHB of robots\". I'm enjoying it for my side project this week.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44850279,
    "by": "yogthos",
    "timeISO": "2025-08-09T21:12:08.000Z",
    "textPlain": "Personally, I’ve had a pretty positive experience with the coding assistants, but I had to spend some time to develop intuition for the types of tasks they’re likely to do well. I would not say that this was trivial to do.Like if you need to crap out a UI based on a JSON payload, make a service call, add a server endpoint, LLMs will typically do this correctly in one shot. These are common operations that are easily extrapolated from their training data. Where they tend to fail are tasks like business logic which have specific requirements that aren’t easily generalized.I’ve also found that writing the scaffolding for the code yourself really helps focus the agent. I’ll typically add stubs for the functions I want, and create overall code structure, then have the agent fill the blanks. I’ve found this is a really effective approach for preventing the agent from going off into the weeds.I also find that if it doesn’t get things right on the first shot, the chances are it’s not going to fix the underlying problems. It tends to just add kludges on top to address the problems you tell it about. If it didn’t get it mostly right at the start, then it’s better to just do it yourself.All that said, I find enjoyment is an important aspect as well and shouldn’t be dismissed. If you’re less productive, but you enjoy the process more, then I see that as a net positive. If all LLMs accomplish is to make development more fun, that’s a good thing.I also find that there's use for both terminal based tools and IDEs. The terminal REPL is great for initially sketching things out, but IDE based tooling makes it much easier to apply selective changes exactly where you want.As a side note, got curious and asked GLM-4.5 to make a token field widget with React, and it did it in one shot.It's also strange not to mention DeepSeek and GLM as options given that they cost orders of magnitude less per token than Claude or Gemini.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44849807,
    "by": "weeksie",
    "timeISO": "2025-08-09T20:20:07.000Z",
    "textPlain": "Yet another developer who is too full of themselves to admit that they have no idea how to use LLMs for development. There's an arrogance that can set in when you get to be more senior and unless you're capable of force feeding yourself a bit of humility you'll end up missing big, important changes in your field.It becomes farcical when not only are you missing the big thing but you're also proud of your ignorance and this guy is both.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44850118,
    "by": "SadErn",
    "timeISO": "2025-08-09T20:54:54.000Z",
    "textPlain": "It's all about the Kilo Code extension.",
    "parent": 44847741,
    "depth": 1
  },
  {
    "id": 44851031,
    "by": "SkyPuncher",
    "timeISO": "2025-08-09T22:42:30.000Z",
    "textPlain": "> Learning how to use LLMs in a coding workflow is trivial. There is no learning curve. You can safely ignore them if they don’t fit your workflows at the moment.That's a wild statement. I'm now extremely productive with LLMs in my core codebases, but it took a lot of practice to get it right and repeatable. There's a lot of little contextual details you need to learn how to control so the LLM makes the right choices.Whenever I start working in a new code base, it takes a a non-trivial amount of time to ramp back up to full LLM productivity.",
    "parent": 44849147,
    "depth": 2
  },
  {
    "id": 44849260,
    "by": "edfletcher_t137",
    "timeISO": "2025-08-09T19:16:31.000Z",
    "textPlain": "The first two points directly contradict each other, too. Learning a tool should have the outcome that one is productive with it. If getting to \"productive\" is non-trivial, then learning the tool is non-trivial.",
    "parent": 44849147,
    "depth": 2
  },
  {
    "id": 44849317,
    "by": "prerok",
    "timeISO": "2025-08-09T19:23:20.000Z",
    "textPlain": "I agree with your assessment about this statement. I actually had to reread it a few times to actually understand it.He is actually recommending Copilot for price/performance reasons and his closing statement is \"Don’t fall for the hype, but also, they are genuinely powerful tools sometimes.\"So, it just seems like he never really gave a try at how to engineer better prompts that these more advanced models can use.",
    "parent": 44849147,
    "depth": 2
  },
  {
    "id": 44849854,
    "by": "bgwalter",
    "timeISO": "2025-08-09T20:24:21.000Z",
    "textPlain": "Pianists' results are well known to be proportional to their talent/effort. In open source hardly anyone is even using LLMs and the ones that do have barely any output, In many cases less output than they had before using LLMs.The blogging output on the other hand ...",
    "parent": 44849147,
    "depth": 2
  },
  {
    "id": 44849887,
    "by": "troupo",
    "timeISO": "2025-08-09T20:27:59.000Z",
    "textPlain": "> I have never heard anybody successfully using LLMs say this before. Most of what I've learned from talking to people about their workflows is counterintuitive and subtle.Because for all our posturing about being skeptical and data driven we all believe in magic.Those \"counterintuitive non-trivial workflows\"? They work about as well as just prompting \"implement X\" with no rules, agents.md, careful lists etc.Because 1) literally no one actually measures whether magical incarnations work and 2) it's impossible to make such measurements due to non-determinism",
    "parent": 44849147,
    "depth": 2
  },
  {
    "id": 44848923,
    "by": "mkozlows",
    "timeISO": "2025-08-09T18:34:20.000Z",
    "textPlain": "\"There's no learning curve\" just means this guy didn't get very far up, which is definitely backed up by thinking that Copilot and other tools are all basically the same.",
    "parent": 44848846,
    "depth": 2
  },
  {
    "id": 44851185,
    "by": "manmal",
    "timeISO": "2025-08-09T23:02:54.000Z",
    "textPlain": "My workflow with a medium sized iOS codebase is a bit like that. By the time everything works and is up to my standards, I‘ve usually taken longer, or almost as long, as if I‘d written everything manually. That’s with Opus-only Claude Code. It’s complicated stuff (structured concurrency and lots of custom AsyncSequence operators) which maybe CC just isn‘t suitable for.Whipping up greenfield projects is almost magical, of course. But that’s not most of my work.",
    "parent": 44849921,
    "depth": 2
  },
  {
    "id": 44849488,
    "by": "TheSamFischer",
    "timeISO": "2025-08-09T19:44:00.000Z",
    "textPlain": "[dead]",
    "parent": 44849341,
    "depth": 2
  },
  {
    "id": 44850115,
    "by": "mettamage",
    "timeISO": "2025-08-09T20:54:25.000Z",
    "textPlain": "Clickbait gets more reach. It's an unfortunate thing. I remember Veritasium in a video even saying something along the lines of him feeling forced to do clickbaity YouTube because it works so well.The reach is big enough to not care about our feelings. I wish it wasn't this way.",
    "parent": 44849868,
    "depth": 2
  },
  {
    "id": 44848862,
    "by": "MobiusHorizons",
    "timeISO": "2025-08-09T18:27:03.000Z",
    "textPlain": "My impression has been that in corporate settings (and I would include LinkedIn in that) AI optimism is basically used as virtue signaling, making it very hard to distinguish people who are actually excited about the tech from people wanting to be accepted.My personal experience has been that AI has trouble keeping the scope of the change small and targeted. I have only been using Gemini 2.5 pro though, as we don’t have access to other models at my work. My friend tells me he uses Claud for coding and Gemini for documentation.",
    "parent": 44848603,
    "depth": 2
  },
  {
    "id": 44848771,
    "by": "Terretta",
    "timeISO": "2025-08-09T18:17:58.000Z",
    "textPlain": "Which part of the opinion?I tend to strongly agree with the \"unpopular opinion\" about the IDEs mentioned versus CLI (specifically, aider.chat and Claude Code).Assuming (this is key) you have mastery of the language and framework you're using, working with the CLI tool in 25 year old XP practices is an incredible accelerant.Caveats:- You absolutely must bring taste and critical thinking, as the LLM has neither.- You absolutely must bring systems thinking, as it cannot keep deep weirdness \"in mind\". By this I mean the second and third order things that \"gotcha\" about how things ought to work but don't.- Finally, you should package up everything new about your language or frameworks since a few months or year before the knowledge cutoff date, and include a condensed synthesis in your context (e.g., Swift 6 and 6.1 versus the 5.10 and 2024's WWDC announcements that are all GPT-5 knows).For this last one I find it useful to (a) use OpenAI's \"Deep Research\" to first whitepaper the gaps, then another pass to turn that into a Markdown context prompt, and finally bring that over to your LLM tooling to include as needed when doing a spec or in architect mode.  Similarly, (b) use repomap tools on dependencies if creating new code that leverages those dependencies, and have that in context for that work.I'm confused why these two obvious steps aren't built into leading agentic tools, but maybe handling the LLM as a naive and outdated \"Rain Man\" type doesn't figure into mental models at most KoolAid-drinking \"AI\" startups, or maybe vibecoders don't care, so it's just not a priority.Either way, context based development beats Leroy Jenkins.",
    "parent": 44848603,
    "depth": 2
  },
  {
    "id": 44848841,
    "by": "WD-42",
    "timeISO": "2025-08-09T18:24:55.000Z",
    "textPlain": "I think it’s pretty common among people whose job it is to provide working, production software.If you go by MBA types on LinkedIn that aren’t really developers or haven’t been in a long time, now they can vibe out some react components or a python script so it’s a revolution.",
    "parent": 44848603,
    "depth": 2
  },
  {
    "id": 44849782,
    "by": "procaryote",
    "timeISO": "2025-08-09T20:17:54.000Z",
    "textPlain": "Linkedin posts seems like an awful source. The people I see posting for themselves there are either pre-successful or just very fond of personal branding",
    "parent": 44848603,
    "depth": 2
  },
  {
    "id": 44851009,
    "by": "simonw",
    "timeISO": "2025-08-09T22:39:31.000Z",
    "textPlain": "I'm beginning to suspect robust automated tests may be one of the single strongest indicators for if you're going to have a good time with LLM coding agents or not.If there's a test suite for the thing to run it's SO much less likely to break other features when it's working. Plus it can read the tests and use them to get a good idea about how everything is supposed to work already.Telling Claude to write the test first, then execute it and watch it fail, then write the implementation has been giving me really great results.",
    "parent": 44850796,
    "depth": 2
  },
  {
    "id": 44849913,
    "by": "troupo",
    "timeISO": "2025-08-09T20:30:12.000Z",
    "textPlain": "And those mythical better tools tools that you didn't even bother to mention are?",
    "parent": 44849200,
    "depth": 2
  }
]