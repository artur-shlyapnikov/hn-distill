{
  "id": 44823272,
  "lang": "ru",
  "summary": "**Кратко:**  \nPHP-фонд предлагает реализовать *только* компиляторные обобщения (generics) для интерфейсов и абстрактных классов.  \nСинтаксис:\n\n```php\ninterface Repository<Item> {\n    public function find(int $id): Item;\n}\n\nclass UserRepo implements Repository<User> { … }\n```\n\n- Все проверки типов происходят на этапе компиляции.  \n- Ошибки ловятся до запуска кода.  \n- `new Repository<User>()` по-прежнему невозможно, но и не усложняется.  \n\n**Почему не полные обобщения?**  \nПолноценные runtime-generics требуют сложного вывода типов и резко замедляют работу, особенно при объединённых типах и массивах.  \n\n**Откуда идея?**  \n- 2023-2024: эксперименты Arnaud Le Blanc показали, что 80 % пользы можно получить без 80 % сложностей.  \n- 2025: Gina Banyard разрабатывала «ассоциированные типы» и поняла, что их легко переформулировать как ограниченные обобщения.  \n\n**Вопрос сообществу:**  \nПоддержите ли вы такой вариант и проголосуете ли «за»?",
  "inputHash": "5c9e027fe712531a1f188519d7963ea71be682e4db3107b568d809be604e9d2e",
  "model": "moonshotai/kimi-k2:free",
  "createdISO": "2025-08-10T21:23:52.054Z"
}