{
  "id": 44858009,
  "lang": "ru",
  "summary": "## Что такое событие  \nСобытие — это сигнал браузера, возникающий при действии пользователя (клик, нажатие клавиши, изменение размера окна и т.д.). JavaScript «слушает» такие сигналы и запускает нужный код.\n\n## Слушатели событий\n\n### `addEventListener()`  \n```js\nconst btn = document.querySelector('button');\nbtn.addEventListener('click', () => alert('Клик!'));\n```\n- Первый аргумент — имя события (без `on`).  \n- Второй — функция-обработчик.  \n- Один элемент может иметь множество обработчиков одного события.\n\n### Альтернативные способы  \n- HTML-атрибуты: `<button onclick=\"alert('Hi')\">`.  \n- DOM-свойства: `btn.onclick = handler`.  \nОба способа перезаписывают предыдущие обработчики и считаются устаревшими.\n\n## Объект события  \nОбработчик получает объект `event` со свойствами:  \n- `target` — элемент, на котором произошло событие.  \n- `type` — имя события.  \n- `clientX`, `clientY` — координаты курсора и др.\n\n```js\nbtn.addEventListener('click', (e) => {\n  console.log(`Клик по ${e.target.tagName}`);\n});\n```\n\n## Отмена действия по умолчанию  \n`event.preventDefault()` останавливает стандартное поведение (например, переход по ссылке).\n\n```js\nform.addEventListener('submit', (e) => {\n  e.preventDefault(); // не отправлять форму\n});\n```\n\n## События вне браузера  \nNode.js, Electron, React Native и другие платформы тоже используют события, но их API отличается.\n\n## Итог  \n- События — основа интерактивности.  \n- Используйте `addEventListener` для гибкого управления.  \n- Объект `event` передаёт детали происшествия.",
  "inputHash": "f3ecb7e365465b0586724a0e2517dc05ffe240c1ffd0c2567f2b9b3751850525",
  "model": "moonshotai/kimi-k2:free",
  "createdISO": "2025-08-10T21:23:20.494Z"
}