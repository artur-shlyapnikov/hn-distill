{
  "id": 44810890,
  "lang": "ru",
  "summary": "**Elixir-миф #1: «Let it crash»**\n\nФраза «let it crash» вводит в заблуждение: звучит так, будто приложение падает, хотя речь всегда идёт **об отдельном процессе**, который супервизор мгновенно перезапустит. Приложение при этом живёт.\n\nПроблема: процессы связаны с реальными вещами — сокетами, HTTP-запросами, файлами, БД. Пример LiveView:\n\n```elixir\ndef handle_event(\"import_data\", %{\"data\" => data}, socket) do\n  Enum.each(data, &create_item/1)\n  {:noreply, socket}\nend\n```\n\nКод упадёт, если:\n- имя события не совпадёт;\n- нет ключа `\"data\"`;\n- `data` не список;\n- ошибка в `create_item/1`.\n\nПервые три случая — скорее баг фронтенда, падение допустимо. Но последний — ошибка валидации одного элемента, и из-за неё **весь веб-сокет пользователя рвётся**, UI пропадает. Это плохой UX.\n\n**Что делать вместо «let it crash»**\n\n1. **Валидируй вход** до бизнес-логики.  \n2. **Возвращай ошибки** пользователю, а не падай.  \n3. **Перезапускай только то, что действительно сломалось** (например, соединение с БД), а не весь контекст пользователя.\n\nСлоган лучше переформулировать:  \n**«Не позволяй падать — позволяй исцеляться».**",
  "inputHash": "c4bc7f3b6a5db3a0a21ad05b2f53f5d53ee7ddcda0109093c4071cfb93fc87b9",
  "model": "moonshotai/kimi-k2:free",
  "createdISO": "2025-08-10T12:08:24.054Z"
}