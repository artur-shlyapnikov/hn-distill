{
  "id": 44847741,
  "lang": "ru",
  "summary": "**LLM-разработка: краткий итог**\n\n- **Мифы**: LLM не делают код продакшн-готовым, требуют понимания задачи и хорошо структурированных кодовых баз. Использование LLM снижает навыки чтения документации и глубокого мышления.  \n- **Агенты** — это просто цикл «LLM → вызов локального API → ответ → LLM снова». Инструменты: навигация, редактирование, shell, поиск, MCP-серверы.  \n- **Проблемы продуктов**  \n  - Нестабильность: модели и цены меняются еженедельно.  \n  - Нет детерминизма, приходится постоянно обновлять промпты и MCP.  \n- **Тесты**  \n  - Python, TypeScript, Rust, Flutter, сложные рефакторинги — справляются.  \n  - Не справились: Token Field во Flutter (редкий компонент, сложное управление состоянием). Claude Opus 4.1 и GPT-5 провалили задачу.  \n\n**Продукты**\n\n- **GitHub Copilot**  \n  - Плюсы: быстрое автодополнение, стабильность, низкая цена.  \n  - Минусы: слабые «агенты», нет контекста всего проекта.  \n\n- **Claude Code Pro**  \n  - Плюсы: лучший «умный» режим, хорошо работает в больших кодовых базах.  \n  - Минусы: дорого, медленно, иногда «теряется».  \n\n- **Gemini CLI / Jules**  \n  - Плюсы: бесплатный CLI, быстрый.  \n  - Минусы: слабые модели, ограниченные возможности.  \n\n- **Kiro, Cursor, Windsurf**  \n  - Плюсы: встроенные редакторы, удобные интерфейсы.  \n  - Минусы: дороже, часто баги, привязка к конкретному редактору.  \n\n**Когда LLM полезны**\n\n- **Лучшие языки**: Python, TypeScript/JavaScript, Go.  \n- **Лучшие задачи**:  \n  - Репетитивный код, тесты, миграции.  \n  - Документация, примеры, объяснение legacy.  \n- **Плохо**:  \n  - Редкие фреймворки, сложные UI, архитектурные решения.  \n  - Надёжность и безопасность.  \n\n**Вывод**  \nLLM — полезный инструмент для рутины и прототипов, но не заменяет мышление и глубокое понимание.",
  "inputHash": "2fa4b4fa258ec367bbc059184b9f838621e87b0b34bc9681afe3bd0db4b7c122",
  "model": "moonshotai/kimi-k2:free",
  "createdISO": "2025-08-10T12:11:14.440Z"
}