{
  "id": 44823761,
  "lang": "ru",
  "summary": "Это не кликбейт: в Я нет монад. Я лишь по привычке использую «монические/комонические» прилагательные для описания привязки и расширения.\n\nНо монады сильно переоценены. Почему:\n\n### Ещё один туториал по монадe\n\nОсвежим определения по-своему. Пусть есть ковариантный функтор T и натуральные преобразования, которые:\n- «порождают» структуру функтора из ничего (I — тождественный функтор): η[i]: into i (t i)\n- сплющивают слои функтора: μ[i]: into (t (t i)) (t i)\n\ninto — морфизм (в Я это Arrow или Attribute). Если выполняется μ[i] ∘ η[i] ≡ identity, то T — монада. (Другую когерентность опускаем — она следует из горизонтальной композиции натуральных преобразований.)\n\n### Пример на Maybe\n\nOptional разрешается оператором la:\n(be \"bye\" `la` is) (Some \"hi\") ===> \"hi\"\n(be \"bye\" `la` is) (None Unit) ===> \"bye\"\n\nПервая трансформация:\nη[i]: i `AR__` Maybe i\nη[i] = Some\n\nВторая:\nμ[i]: (Maybe (Maybe i)) `AR__` (Maybe i)\nμ[i] = None `la` (None `la` Some)\n\nПроверка μ ∘ η = id:\nНа None Unit даёт None Unit, на Some Unit даёт Some Unit.\n\n### А как с композицией монад?\n\nГоворят, монады не композиционируются. На самом деле компоновать можно монады одного и того же типа — этим и занимается μ[i]. Но если сложить один функтор в другой (композиция функторов), результат снова функтор. Можно ли так получить монаду? В общем случае — нет: для каждой монады нужен свой шаблон композиции, поэтому используют трансформеры монад.\n\nВ Я аналог — «сшитые эффекты» (jointed effects):\n\n(Stops r `T'TT'I` State s)\n(Stops r `JNT` State s)\n\nРазница в разложении типов:\nSupertype ((Stops r `T'TT'I` State s) i) ~ Stops r (State s i)\nSupertype ((Stops r `JNT` State s) i) ~ Given s (Stops r (Stash s i))\n\nМы раскололи State на Given и Stash и вставили Stops между ними: старое состояние передать можно всегда, а новое получить не гарантируется. Только JNT может взаимодействовать и со State, и со Stops через оператор yok:\n\nx: (Stops r `JNT` State s) Unit\nf: Unit `AR__` State s result\ng: Unit `AR__` Stops r result\nh: Unit `AR__` (Stops r `JNT` State s) Unit\n\nx `yok` New `ha` f: (Stops r `JNT` State s) result\nx `yok` Try `ha` g: (Stops r `JNT` State s) result",
  "inputHash": "94390de866ace7832580014d3a7cac5d30a81614d6802ff5b5c9d885c68cfb21",
  "model": "openrouter/horizon-beta",
  "createdISO": "2025-08-07T13:47:16.149Z"
}