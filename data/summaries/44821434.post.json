{
  "id": 44821434,
  "lang": "ru",
  "summary": "Введение: когда модель доверия подводит\n\nСекрет-хранилища — опора цифровой инфраструктуры: в них лежат креденшелы, токены и сертификаты, управляющие доступом к системам, сервисам, API и данным. Это не просто часть модели доверия — это и есть модель доверия. Если хранилище взломано, инфраструктура уже потеряна.\n\nПонимая, что такие хранилища — цели высокой ценности, команда Cyata провела углубленную оценку HashiCorp Vault — одного из самых популярных решений.\n\nЗа несколько недель мы выявили девять ранее неизвестных уязвимостей нулевого дня, каждой присвоен CVE через ответственное раскрытие. Совместно с HashiCorp все проблемы были исправлены до публикации.\n\nОбнаруженные изъяны обходят блокировки, политики и позволяют выдавать себя за других. Одна уязвимость ведет к повышению привилегий до root, другая — к первому публичному RCE в Vault, дающему полный захват системы.\n\nМы увидели цепочки логических ошибок, которые по отдельности и в комбинации создают опасные пути атаки — особенно в реальных внедрениях с мисконфигами или избыточными правами.\n\nЭто не были ошибки памяти или гонки, а скрытые логические баги в слоях аутентификации, идентичности и политик Vault. Некоторые существовали почти десятилетие — незаметные, но легко эксплуатируемые после понимания.\n\nПредыдущие исследования (например, Google Project Zero, 2020) касались обходов в IAM-бэкендах облаков (AWS, GCP). Мы нацелились на базовые потоки аутентификации Vault, затрагивающие OSS и Enterprise-версии по разным провайдерам.\n\nДалее — что мы нашли, как нашли и что это значит для инфраструктуры, которую должен защищать Vault.\n\nЧто такое HashiCorp Vault?\n\nVault — открытый инструмент для защиты, хранения и контроля доступа к секретам: API-ключам, паролям БД, сертификатам, ключам шифрования.\n\nЕго используют компании разных масштабов: он централизует управление секретами и применяет детальные политики в распределенных системах.\n\nПо сути — это граница безопасности: аутентифицирует людей и машины, посредничает доступу к чувствительным данным.\n\nВ DevSecOps Vault снижает риски хардкода секретов, расползания и несанкционированного доступа. Его ценят за гибкую интеграцию, точные политики и пригодность для сложных сред. Часто это последний сторож секретов: при определенных настройках компрометация Vault равна компрометации всего.\n\nОсновные возможности Vault\n- Управление секретами и крипто-движок для динамичных мульти-/гибрид-облаков\n- Централизованное хранилище с доступом по API\n- Динамическая выдача учетных данных с автоистечением\n- Идентификационно-ориентированный доступ для людей и машин\n- Шифрование как сервис для данных «в покое» и «в пути»\n- Управление сертификатами: выпуск, ротация, отзыв\n- Распределение, включение/отключение и ротация ключей шифрования\n\nМетодология: как мы нашли то, что другие пропустили\n\nЭто целенаправленное исследование логических уязвимостей Vault — тех, что не видны в сканерах памяти и логах падений, но подтачивают модель доверия.\n\nМы исходили из гипотезы: если Vault — якорь доверия, то малые несогласованности в идентичности, аутентификации или политике могут иметь непропорционально большие последствия.\n\nФокус — базовый поток обработки запросов, особенно файл request_handling.go, «мозг» Vault: маршрутизация, разрешение идентичностей, принятие политик. Неделями изучали логику функций и модулей, отслеживая крайние случаи размывания границ доверия.\n\nНе полагались на фаззинг и автопробинг. Проводили глубокий ручной код-ревью, анализируя не только функции, но и интерпретации идентичности/ввода разными компонентами. Увидев несоответствия в регистре, алиасинге, форматировании — углублялись.\n\nКаждый тест — целевая проверка, основанная на коде. Мы думали как атакующие: начиная с минимальных прав, спрашивали «насколько далеко можно продвинуться отсюда?» И повторяли этот цикл, замечая мелкие несоответствия и прослеживая их последствия.",
  "inputHash": "c0a5478eae805fb698a78a0048048261b4d50de1441e811bfc1cac5fb2de8c12",
  "model": "openrouter/horizon-beta",
  "createdISO": "2025-08-07T08:57:03.900Z"
}