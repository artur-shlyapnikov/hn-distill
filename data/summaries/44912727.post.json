{
  "id": 44912727,
  "lang": "ru",
  "summary": "**Интерактивный гайд по слиянию сенсоров с кватернионами**\n\nЭто vim-подобный туториал с живыми редакторами и 3-D визуализациями, где мы соединяем гироскоп с акселерометром на реальных данных IMU. Сайт появился после 5 лет работы над [аксессуаром для телескопа](https://stargraph.net/); теперь делюсь тем, что редко описывают в литературе.\n\n---\n\n### Кватернионы?\n\n**4-D представление поворота в 3-D:** `(w,x,y,z)`  \nПлюсы: нет gimbal-lock, быстрые вычисления, плавная интерполяция (slerp).  \nМинусы: на 33 % тяжелее углов Эйлера и менее интуитивны.\n\n---\n\n### Основы\n\nКватернион кодирует ось-угол `(θ,n̂)` как `[cos(θ/2), sin(θ/2)·n̂]`.\n\n```js\nfunction quat_from_axis(θ, x, y, z) {\n  const hc = Math.cos(θ/2), hs = Math.sin(θ/2);\n  return new Quaternion(hc, x*hs, y*hs, z*hs);\n}\n```\n\n---\n\n### Мини-библиотека\n\n```js\nquat_pure(x,y,z)          // вектор → кватернион\nquat_normalize(q)         // нормировка\nquat_from_axis(axis,θ)    // ось-угол → кватернион\nquat_from_two_vectors(a,b)// между векторами\nquat_from_euler(x,y,z)    // углы Эйлера\nquat_mult(q1,q2)          // композиция\nquat_add, quat_sub        // поэлементно\nquat_conj(q)              // сопряжение\n```\n\n---\n\n### Поворот вектора\n\n«Бутерброд»: `q · v · q*`\n\n```js\nconst q = quat_from_euler(0, 30, 0);\nlet v = quat_pure(10, 10, 10);\nv = quat_mult(q, v);\nv = quat_mult(v, quat_conj(q));\n```\n\n---\n\n### Далее\n\n- **Ориентация**  \n  – Эйлерова интеграция  \n  – Компенсация наклона  \n- **Хиральность**  \n- **Начальная ориентация и отладка**",
  "inputHash": "e34de836ee458d06e6e06e27375cf29569ebe6befc77740f186f8b7115ad2473",
  "model": "moonshotai/kimi-k2:free",
  "createdISO": "2025-08-15T17:26:48.626Z"
}