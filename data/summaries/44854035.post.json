{
  "id": 44854035,
  "lang": "ru",
  "summary": "## Как сделать простые таб-дополнения для Bash и Zsh\n\n**Li Haoyi, 7 августа 2025**\n\nТаб-дополнения в шелле удобны, но их настройка усложняется тем, что часть пользователей использует Bash в Linux, а другая — Zsh в macOS, и у них разные API. К тому же, пользователям полезно видеть описание каждого варианта, но это доступно только в Zsh.\n\nВ этой заметке показано, как реализовать кросс-платформенные дополнения с описаниями на примере Mill 1.0.3.\n\n### Базовый механизм\n\nПри нажатии `<TAB>` шелл вызывает функцию, которой передаёт текущие слова и индекс слова под курсором. Функция возвращает список возможных дополнений.\n\n```bash\n_generate_foo_completions() {\n  local idx=$1; shift\n  local words=( \"$@\" )\n  local cur=${words[idx]}\n\n  local arr=(apple apricot banana cherry durian)\n  for e in \"${arr[@]}\"; do [[ $e == \"$cur\"* ]] && echo \"$e\"; done\n}\n\n_complete_foo_bash() {\n  local raw=($(_generate_foo_completions \"$COMP_CWORD\" \"${COMP_WORDS[@]}\"))\n  COMPREPLY=( \"${raw[@]}\" )\n}\n\n_complete_foo_zsh() {\n  local -a raw\n  raw=($(_generate_foo_completions \"$CURRENT\" \"${words[@]}\"))\n  compadd -- $raw\n}\n\n[[ -n $ZSH_VERSION ]] && { autoload -Uz compinit; compinit; compdef _complete_foo_zsh foo; } \\\n                     || complete -F _complete_foo_bash foo\n```\n\n- `_generate_foo_completions` возвращает список вариантов.  \n- `_complete_foo_bash` и `_complete_foo_zsh` преобразуют результат в формат нужного шелла.  \n- Скрипт добавляется в `~/.bashrc`, `~/.zshrc` и т.д.\n\nMill устанавливает дополнения командой:\n\n```console\n$ ./mill mill.tabcomplete/install\n```",
  "inputHash": "62d186de544b4a011cb8084a45bd6e70d0d257378ad580cab35f6eded691d8a9",
  "model": "moonshotai/kimi-k2:free",
  "createdISO": "2025-08-10T12:03:22.910Z"
}