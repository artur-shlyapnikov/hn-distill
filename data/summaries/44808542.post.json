{
  "id": 44808542,
  "lang": "ru",
  "summary": "![Изображение 1: обложка](https://acko.net/files/dom-cruft-2025/cover.jpg)\n\nПереосмысление DOM с нуля\n-------------------------\n\n![Изображение 2: обложка](https://acko.net/files/dom-cruft-2025/cover.jpg)\n\nБраузеры в странном положении: WebAssembly выстрелил, даже на сервере, а клиентская часть ощущается почти как 10 лет назад. Доступ к веб-API из WASM решают тонким JS-клеем — но зачем вообще лезть в DOM? Просто других опций нет. Пора отправить DOM и его API «на ферму», и вот почему.\n\nНикто уже не знает браузеры целиком — и это часть проблемы.\n\n![Изображение 3: Netscape](https://acko.net/files/dom-cruft-2025/netscape-upside-down.jpg)\n\nМодель «документа»\n------------------\n\nМало кто осознает, насколько DOM раздут. У `document.body` в Chrome 350+ ключей, а в `document.body.style` — около 660 свойств. Граница между свойствами и методами размыта, геттеры могут триггерить релэйаут, висят легаси-штучки вроде `onevent`. DOM толстеет; страничникам это почти не видно, а приложениям — боль.\n\nБольшинство избегают прямой работы с DOM; деклартивности мало и она несовременна. Способов сделать одно и то же много, ни один не приятен.\n\n```\nconnectedCallback() {\n  const shadow = this.attachShadow({ mode: 'closed' });\n  const template = document.getElementById('hello-world').content.cloneNode(true);\n  const hwMsg = `Hello ${ this.name }`;\n  Array.from(template.querySelectorAll('.hw-text')).forEach(n => n.textContent = hwMsg);\n  shadow.append(template);\n}\n```\n\nВеб-компоненты пришли поздно, непопулярны: API громоздкий, Shadow DOM плодит уровни вложенности и области видимости. Главная беда — строковая наследственность SGML/XML: состояние хранить в документе плохо; React-подобные это избегают, их «XML» — лишь синтаксис.\n\n![Изображение 5: W3C](https://acko.net/files/dom-cruft-2025/w3c-logo.png)\n![Изображение 6: WHATWG](https://acko.net/files/dom-cruft-2025/whatwg.png)\n\nHTML почти не менялся 10–15 лет. ARIA стала заплаткой тому, что не дала «семантика HTML». Цели так и не достигли: нет `<thread>` или `<comment>`, правила странные. WHATWG (то есть вендоры) добавляет лишь заплатки по краям; даже CSS оброс выражениями — любая шаблонка хочет стать языком программирования.\n\n![Изображение 7: Netscape Composer](https://acko.net/files/dom-cruft-2025/composer.gif)\n\nРедактируемость HTML через `contentEditable` — теоретически есть, практически — темная магия; у команд Docs/Notion наверняка кошмары. Догмы про «прогрессивное улучшение» и разделение разметки/стилей в мире приложений мало кто исповедует.\n\nСегодня приложения склеивают HTML/CSS/SVG до «достаточно красиво», ценой огромных оверхедов — это анти-UI тулкит.\n\n![Изображение 8: редактор Slack](https://acko.net/files/dom-cruft-2025/slack-html.png)\nПодпись: Ввод Slack\n\n![Изображение 9: хак с раскладкой](https://acko.net/files/dom-cruft-2025/slack-abs.png)\nПодпись: Оффскрин-хаки для буфера обмена\n\nСписки и таблицы приходится виртуализировать вручную, перехватывая лайаут, ресайз, драги и т. п. «Прилипший вниз» скролл в чате — вечный TODO. Чем больше виртуализируешь, тем больше заново пишешь «поиск на странице», контекстные меню и пр. Веб стер грань между UI и «текучим контентом» — когда-то это было ново, теперь UI устарел, контент унифицировался.\n\n![Изображение 10: кружка “css is awesome”](https://acko.net/files/dom-cruft-2025/css-is-awesome.jpg)\n\nCSS вывернут наизнанку\n----------------------\n\nCSS не имеет стройной…",
  "inputHash": "b150bd9455e29edbaf18223a80b86c64f123e29bfa02d4c21462188cd54518b2",
  "model": "openrouter/horizon-beta",
  "createdISO": "2025-08-07T12:34:59.539Z"
}