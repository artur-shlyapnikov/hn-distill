{
  "id": 44872584,
  "lang": "ru",
  "summary": "**Краткий обзор**\n\n- **Проблема**: компилятор Solidity (solc) падает на Ubuntu 22.04 при компиляции корректного кода.  \n- **Причина**: сочетание трёх факторов  \n  1. 12-летний баг G++ (< 14) в разрешении перегрузок.  \n  2. Устаревший паттерн сравнения в Boost.  \n  3. Новые правила симметричных сравнений C++20.  \n\n**Цепочка событий**\n\n1. **Баг G++** (2012, GCC-53499): при `boost::rational<T> == 0` компилятор до 14-й версии выбирает нечлен-шаблон вместо член-шаблона.  \n2. **C++20** добавляет автоматическую перестановку аргументов: `0 == rational<T>` → `rational<T> == 0`.  \n3. **Boost 1.74** предоставляет обе версии оператора, что приводит к бесконечной рекурсии и переполнению стека.  \n\n**Минимальный пример**\n\n```cpp\ntemplate<typename T>\nstruct rational {\n    template<class U>\n    bool operator==(const U&) const { return true; }\n};\n\ntemplate<class U, class T>\nbool operator==(const rational<T>&, const U&) { return false; }\n\nint main() {\n    rational<int> r;\n    return r == 0;   // g++11 выбирает free-функцию\n}\n```\n\n**Как починить**\n\n- Обновить GCC ≥ 14 или Clang, **или**  \n- Собрать Solidity без C++20 (`-std=c++17`), **или**  \n- Патч Boost/использовать свежий Boost ≥ 1.82.\n\n**Итог**  \nНи один компонент по отдельности не «сломан», но их комбинация приводит к крашу компилятора на валидном коде.",
  "inputHash": "34e190ae720512523fc5ef029ef1f9456cd2cfe9f2175036d9b3615d9dd6ea93",
  "model": "moonshotai/kimi-k2:free",
  "createdISO": "2025-08-15T16:33:14.575Z"
}