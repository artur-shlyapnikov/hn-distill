{
  "id": 44891302,
  "lang": "ru",
  "summary": "**CSRF** — атака «сбитого заместителя»: злоумышленник заставляет браузер отправить запрос на целевой сайт с авторизацией жертвы через куки.  \nПример: скрытая форма на `attacker.example` переводит деньги с `example.com`.\n\nЗащита нужна всем, кто использует cookie-аутентификацию. Это не про полный доступ злоумышленника, а про блокировку подделанных запросов.\n\n### Почему браузеры разрешают?\nИз-за обратной совместимости и SSO-потоков; отключение «сторонних» кук ломает авторизацию.\n\n### same-site ≠ same-origin\n- `https://app.example.com` и `https://marketing.example.com` — same-site, но разные origin.  \n- HTTP ↔ HTTPS — разные trust-уровни; схема важна.  \n- Куки пока схему не учитывают (кроме Chrome с 2020).  \n- `Sec-Fetch-Site` и Fetch-спецификация считают HTTP и HTTPS разными сайтами.  \n- HSTS помогает закрыть HTTP→HTTPS CSRF.\n\n### Защита\n\n#### Токены\n- **Double-submit**: случайное значение в cookie и в теле/параметре.  \n- **Synchronized tokens**: значение хранится на сервере.  \n- Проблема «cookie tossing» — чужой origin может подложить куку.  \n  - Решение: префикс `__Host-` или подпись токена с привязкой к пользователю.  \n- Подпись без привязки к пользователю бесполезна: злоумышленник может взять свою пару «кука-токен».\n\n#### SameSite cookies\n- `SameSite=Lax/Strict` блокирует отправку кук на cross-site POST.  \n- Не защищает от GET-CSRF при `Lax`.  \n- Не работает для «сторонних» POST, если нужен SSO-обход.\n\n#### Origin/Referer\n- Проверка заголовков `Origin`/`Referer`; ломается при их отсутствии.\n\n#### Fetch Metadata + Sec-Fetch-*\n- `Sec-Fetch-Site`, `Sec-Fetch-Mode`, `Sec-Fetch-Dest` позволяют серверу отвергать подозрительные запросы.  \n- Пока не везде поддерживается.\n\n#### SameSite + токены\n- SameSite закрывает большинство случаев, токен — оставшиеся edge-case.  \n- Удобно, но нужно помнить про SSO-исключения.\n\n### Итого\n- Используйте `SameSite=Lax` + CSRF-токен.  \n- Для критичных действий — `SameSite=Strict` или явная проверка `Origin`.  \n- Учитывайте HTTP→HTTPS и cookie-tossing.",
  "inputHash": "6ced073c0d76bfc24f67e7908be212f40dc0b28a97d981befa86411857aca352",
  "model": "moonshotai/kimi-k2:free",
  "createdISO": "2025-08-13T18:34:40.804Z"
}