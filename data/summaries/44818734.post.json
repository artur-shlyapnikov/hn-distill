{
  "id": 44818734,
  "lang": "ru",
  "summary": "git-fetch-file — утилита для выборочного импорта файлов или glob-шаблонов из других Git-репозиториев с фиксацией исходного коммита и защитой локальных изменений. Хранит манифест .git-remote-files с источником, коммитом и комментарием. Похоже на мини‑субмодули, но только для нужных файлов.\n\nВозможности:\n- Забор одного файла или glob из удалённого репо\n- Отслеживание источника, коммита и комментария в .git-remote-files\n- Перезапись локальных правок с --force\n- Обновление зафиксированных коммитов с --save\n- Сухой прогон (--dry-run)\n- Параллельная загрузка (--jobs)\n- Вывод в стиле git\n- Простой CLI как у git\n\nУстановка:\n- Вариант 1 (рекомендуется): алиас git\n  git config --global alias.fetch-file '!python3 /path/to/git-fetch-file.py'\n  Запуск: git fetch-file <subcommand> [args...]\n- Вариант 2: положить скрипт git-fetch-file в PATH\n\nКоманды:\n\ngit fetch-file add\nСинопсис: git fetch-file add <repo> <path> [<target_dir>] [<options>]\nДобавляет файл или glob из удалённого репо в .git-remote-files; скачивание произойдёт при pull.\nОпции: --commit <commit>|branch|tag (по умолчанию HEAD), --glob/--no-glob, --comment <text>, --dry-run.\n\ngit fetch-file pull\nСинопсис: git fetch-file pull [<options>]\nСкачивает все отслеживаемые файлы в указанные цели, обнаруживает локальные изменения. По умолчанию без автокоммита; для автокоммита используйте --commit, -m/--message, --edit; отключить — --no-commit.\nОпции: --force (перезапись локальных правок), --save (сохранить новые хэши для движущихся веток/тегов), --dry-run, --jobs=<n> (по умолчанию 4), --commit/-m/--edit/--no-commit.\n\ngit fetch-file status | list\nПоказывает отслеживаемые файлы, их репозитории и коммиты в стиле git remote -v.\nФормат: <path>[<индикаторы>]    <repo> (<commit>) [# <comment>]\nИндикаторы: (glob), -> <target>; коммит укорочен до 7 символов.\n\n.git-remote-files (INI):\n[file \"lib/util.py\"]\nrepo = https://github.com/example/tools.git\ncommit = a1b2c3d\ntarget = vendor\ncomment = Common utility function\nЭтот файл следует коммитить в репозиторий.\n\nПроизводительность и рабочий процесс:\n- Параллельные операции: по умолчанию 4 потока, настраивается --jobs, эффективно при множестве источников, потокобезопасно с изоляцией ошибок.\n- Сухой прогон: позволяет просмотреть изменения без выполнения.",
  "inputHash": "3c8d89864ec31eeda50f00b08760ba8e32a3942e98aa3309f6571e9b92e9b84c",
  "model": "openrouter/horizon-beta",
  "createdISO": "2025-08-07T12:31:27.256Z"
}