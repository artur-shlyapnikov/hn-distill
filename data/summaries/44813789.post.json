{
  "id": 44813789,
  "lang": "ru",
  "summary": "Это вторая часть серии о разработке Tyr — современного GPU‑драйвера на Rust для ядра Linux с поддержкой Arm Mali на CSF.\n\nРазберем, как работают GPU‑драйверы, на примере VkCube — простого приложения на Vulkan, рисующего вращающийся куб. Простота сцены помогает понять путь данных и команд от приложения к GPU.\n\nUMD и KMD\n- UMD (usermode) реализует API вроде Vulkan/OpenGL/OpenCL и преобразует команды приложений в низкоуровневые команды для GPU. В нашем случае это panvk из Mesa.\n- KMD (kernel mode) соединяет UMD с железом: инициализирует устройство, управляет памятью, очередями, планированием и уведомлениями. В нашем случае это Tyr, нацеленный попасть в основное дерево Linux.\n\nЧто делает UMD\n- Подготавливает данные: геометрию, текстуры, машинный код шейдеров, матрицы трансформаций.\n- Просит KMD разместить их в памяти GPU, создает VkCommandBuffer с командами отрисовки, настраивает состояние конвейера, указывает, куда писать результат, и как получать сигнал о завершении.\n\nПро шейдеры\n- Это полноценные программы на GPU. Для VkCube им нужны хотя бы геометрия, цвета и матрица вращения, чтобы расположить и раскрасить куб и крутить его.\n\nЧто делает KMD\n- Выделяет и отображает память, изолируя процессы в отдельных контекстах/VM.\n- Принимает работу от UMD, ставит в аппаратные очереди, отслеживает зависимости и завершение.\n- Планирует выполнение на массово параллельном, асинхронном железе, соблюдая порядок и справедливое распределение ресурса между клиентами.\n- Инициализирует устройство: тактирование, питание, стартовые процедуры; обеспечивает совместный и честный доступ приложений к GPU.\n\nКлючевой вывод\n- Основная сложность — в UMD, который переводит высокоуровневые API в команды GPU. Но KMD обязан предоставить надежные примитивы: память, очереди, синхронизацию, планирование и разделение ресурсов, чтобы UMD было реально реализовать.\n\nИнтерфейс драйвера\n- На основе этих задач KMD экспонирует минимальный набор операций: запрос сведений об устройстве, создание/уничтожение VM, привязка/отвязка памяти к VM, получение состояния VM, отправка работ в очереди и механизмы уведомлений — тот же API, что у C‑драйвера Panthor для того же железа.",
  "inputHash": "7bb6a0de50d35f497596d1cd194e289a209688ee90a352f5d8f63efd6158320a",
  "model": "openrouter/horizon-beta",
  "createdISO": "2025-08-07T09:11:31.137Z"
}