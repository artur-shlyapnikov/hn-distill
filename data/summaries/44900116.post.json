{
  "id": 44900116,
  "lang": "ru",
  "summary": "**Почему LLM не могут строить ПО**\n\nЭффективный инженер постоянно прокручивает цикл:  \n1. формирует ментальную модель требований,  \n2. пишет код,  \n3. проверяет, что он реально делает,  \n4. сверяет модели и правит код или требования.\n\nLLM умеют писать и обновлять код, запускать тесты, логировать, но не умеют держать в голове ясную модель. Они путаются: считают, что всё работает, не понимают, где ошибка — в коде или в тесте, и при раздражении сносят всё и начинают заново. Человек же, столкнувшись с проблемой, может «свернуть» контекст, сфокусироваться на детали, затем вернуться к общей картине.\n\nДаже если модели станут мощнее, им нужно научиться так же «держать в памяти» и переключаться между уровнями детализации. Сейчас они страдают от выпадения контекста, пристрастия к свежим фактам и галлюцинаций. Работа над «памятью» идёт, но пока LLM не понимают происходящего и не могут сравнивать две похожие модели, чтобы решить, что менять.\n\nLLM полезны: быстро генерируют код и документацию, справляются с простыми задачами. В сложных случаях человек всё равно должен контролировать требования и проверять результат. В Zed верят в совместную работу человека и агента, но руль остаётся за инженером, а LLM — лишь инструмент.",
  "inputHash": "8579c635012be061da11cc55370e317aa6c5ba32c5e4f5d992cfa6d9db807f74",
  "model": "moonshotai/kimi-k2:free",
  "createdISO": "2025-08-14T15:26:42.417Z"
}